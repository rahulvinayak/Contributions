
EthernetFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003550  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08003610  08003610  00004610  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a0  080037a0  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080037a0  080037a0  000047a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037a8  080037a8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a8  080037a8  000047a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037ac  080037ac  000047ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080037b0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000005c  0800380c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000304  20000384  0800380c  00005384  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e395  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee9  00000000  00000000  00013419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000050d0  00000000  00000000  00015302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  0001a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094b  00000000  00000000  0001acf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011abd  00000000  00000000  0001b643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fceb  00000000  00000000  0002d100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006b5da  00000000  00000000  0003cdeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a83c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d90  00000000  00000000  000a8408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  000aa198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035f8 	.word	0x080035f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080035f8 	.word	0x080035f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	@ (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <W5500_Write>:


}

void W5500_Write(uint16_t addr, uint8_t cb, uint8_t data)
{
 8000644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000646:	27a0      	movs	r7, #160	@ 0xa0
 8000648:	05ff      	lsls	r7, r7, #23
{
 800064a:	0016      	movs	r6, r2
 800064c:	0005      	movs	r5, r0
 800064e:	000c      	movs	r4, r1
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000650:	0038      	movs	r0, r7
 8000652:	2200      	movs	r2, #0
 8000654:	2110      	movs	r1, #16
 8000656:	f001 f95f 	bl	8001918 <HAL_GPIO_WritePin>
    uint8_t cmd[4] = {addr>>8, addr&0xFF, cb|0x04, data};
 800065a:	2204      	movs	r2, #4
    HAL_SPI_Transmit(&spi, cmd, 4, 1000);
 800065c:	23fa      	movs	r3, #250	@ 0xfa
    uint8_t cmd[4] = {addr>>8, addr&0xFF, cb|0x04, data};
 800065e:	a901      	add	r1, sp, #4
 8000660:	4314      	orrs	r4, r2
 8000662:	ba6d      	rev16	r5, r5
    HAL_SPI_Transmit(&spi, cmd, 4, 1000);
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4806      	ldr	r0, [pc, #24]	@ (8000680 <W5500_Write+0x3c>)
    uint8_t cmd[4] = {addr>>8, addr&0xFF, cb|0x04, data};
 8000668:	800d      	strh	r5, [r1, #0]
 800066a:	70ce      	strb	r6, [r1, #3]
 800066c:	708c      	strb	r4, [r1, #2]
    HAL_SPI_Transmit(&spi, cmd, 4, 1000);
 800066e:	f001 fdf1 	bl	8002254 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000672:	0038      	movs	r0, r7
 8000674:	2201      	movs	r2, #1
 8000676:	2110      	movs	r1, #16
 8000678:	f001 f94e 	bl	8001918 <HAL_GPIO_WritePin>
}
 800067c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	200001dc 	.word	0x200001dc

08000684 <W5500_Read>:

uint8_t W5500_Read(uint16_t addr, uint8_t cb)
{
 8000684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t data;
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000686:	25a0      	movs	r5, #160	@ 0xa0
 8000688:	05ed      	lsls	r5, r5, #23
{
 800068a:	000e      	movs	r6, r1
 800068c:	0004      	movs	r4, r0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	0028      	movs	r0, r5
 8000692:	2110      	movs	r1, #16
 8000694:	f001 f940 	bl	8001918 <HAL_GPIO_WritePin>
    uint8_t cmd[3] = {addr>>8, addr&0xFF, cb};
 8000698:	466b      	mov	r3, sp
 800069a:	719e      	strb	r6, [r3, #6]
    HAL_SPI_Transmit(&spi, cmd, 3, 1000);
 800069c:	26fa      	movs	r6, #250	@ 0xfa
    uint8_t cmd[3] = {addr>>8, addr&0xFF, cb};
 800069e:	ba64      	rev16	r4, r4
 80006a0:	809c      	strh	r4, [r3, #4]
    HAL_SPI_Transmit(&spi, cmd, 3, 1000);
 80006a2:	4c0b      	ldr	r4, [pc, #44]	@ (80006d0 <W5500_Read+0x4c>)
 80006a4:	00b6      	lsls	r6, r6, #2
 80006a6:	0033      	movs	r3, r6
 80006a8:	a901      	add	r1, sp, #4
 80006aa:	2203      	movs	r2, #3
 80006ac:	0020      	movs	r0, r4
 80006ae:	f001 fdd1 	bl	8002254 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&spi, &data, 1, 1000);
 80006b2:	466b      	mov	r3, sp
 80006b4:	1cdf      	adds	r7, r3, #3
 80006b6:	0039      	movs	r1, r7
 80006b8:	0033      	movs	r3, r6
 80006ba:	2201      	movs	r2, #1
 80006bc:	0020      	movs	r0, r4
 80006be:	f001 ff93 	bl	80025e8 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80006c2:	0028      	movs	r0, r5
 80006c4:	2201      	movs	r2, #1
 80006c6:	2110      	movs	r1, #16
 80006c8:	f001 f926 	bl	8001918 <HAL_GPIO_WritePin>
    return data;
 80006cc:	7838      	ldrb	r0, [r7, #0]
}
 80006ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006d0:	200001dc 	.word	0x200001dc

080006d4 <W5500_SocketInit>:
    W5500_Write(W5500_S0_CR, CB_SOCK0, CMD_CLOSE);
 80006d4:	2001      	movs	r0, #1
 80006d6:	2210      	movs	r2, #16
 80006d8:	2108      	movs	r1, #8
{
 80006da:	b570      	push	{r4, r5, r6, lr}
    W5500_Write(W5500_S0_CR, CB_SOCK0, CMD_CLOSE);
 80006dc:	f7ff ffb2 	bl	8000644 <W5500_Write>
    HAL_Delay(10);
 80006e0:	200a      	movs	r0, #10
        HAL_Delay(1);
 80006e2:	f000 fd2d 	bl	8001140 <HAL_Delay>
    while(W5500_Read(W5500_S0_SR, CB_SOCK0) != SOCK_CLOSED) {
 80006e6:	2108      	movs	r1, #8
 80006e8:	2003      	movs	r0, #3
 80006ea:	f7ff ffcb 	bl	8000684 <W5500_Read>
 80006ee:	1e04      	subs	r4, r0, #0
 80006f0:	d13b      	bne.n	800076a <W5500_SocketInit+0x96>
    W5500_Write(W5500_S0_MR, CB_SOCK0, 0x01);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2108      	movs	r1, #8
 80006f6:	f7ff ffa5 	bl	8000644 <W5500_Write>
    W5500_Write(W5500_S0_PORT, CB_SOCK0, 0x00);
 80006fa:	0022      	movs	r2, r4
 80006fc:	2108      	movs	r1, #8
 80006fe:	2004      	movs	r0, #4
 8000700:	f7ff ffa0 	bl	8000644 <W5500_Write>
    W5500_Write(W5500_S0_PORT+1, CB_SOCK0, 80);
 8000704:	2250      	movs	r2, #80	@ 0x50
 8000706:	2108      	movs	r1, #8
 8000708:	2005      	movs	r0, #5
 800070a:	f7ff ff9b 	bl	8000644 <W5500_Write>
    W5500_Write(W5500_S0_CR, CB_SOCK0, CMD_OPEN);
 800070e:	2201      	movs	r2, #1
 8000710:	2108      	movs	r1, #8
 8000712:	0010      	movs	r0, r2
 8000714:	f7ff ff96 	bl	8000644 <W5500_Write>
    HAL_Delay(10);
 8000718:	200a      	movs	r0, #10
 800071a:	f000 fd11 	bl	8001140 <HAL_Delay>
    uint32_t timeout = HAL_GetTick() + 1000;
 800071e:	f000 fd09 	bl	8001134 <HAL_GetTick>
 8000722:	23fa      	movs	r3, #250	@ 0xfa
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	18c5      	adds	r5, r0, r3
    while(W5500_Read(W5500_S0_SR, CB_SOCK0) != SOCK_INIT) {
 8000728:	2108      	movs	r1, #8
 800072a:	2003      	movs	r0, #3
 800072c:	f7ff ffaa 	bl	8000684 <W5500_Read>
 8000730:	2813      	cmp	r0, #19
 8000732:	d11c      	bne.n	800076e <W5500_SocketInit+0x9a>
    W5500_Write(W5500_S0_CR, CB_SOCK0, CMD_LISTEN);
 8000734:	2202      	movs	r2, #2
 8000736:	2108      	movs	r1, #8
 8000738:	3812      	subs	r0, #18
 800073a:	f7ff ff83 	bl	8000644 <W5500_Write>
    HAL_Delay(10);
 800073e:	200a      	movs	r0, #10
 8000740:	f000 fcfe 	bl	8001140 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2108      	movs	r1, #8
 8000748:	4811      	ldr	r0, [pc, #68]	@ (8000790 <W5500_SocketInit+0xbc>)
 800074a:	f001 f8e5 	bl	8001918 <HAL_GPIO_WritePin>
    timeout = HAL_GetTick() + 1000;
 800074e:	f000 fcf1 	bl	8001134 <HAL_GetTick>
 8000752:	23fa      	movs	r3, #250	@ 0xfa
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	18c5      	adds	r5, r0, r3
    while(W5500_Read(W5500_S0_SR, CB_SOCK0) != SOCK_LISTEN) {
 8000758:	2108      	movs	r1, #8
 800075a:	2003      	movs	r0, #3
 800075c:	f7ff ff92 	bl	8000684 <W5500_Read>
 8000760:	2814      	cmp	r0, #20
 8000762:	d10c      	bne.n	800077e <W5500_SocketInit+0xaa>
    return 1;
 8000764:	2401      	movs	r4, #1
}
 8000766:	0020      	movs	r0, r4
 8000768:	bd70      	pop	{r4, r5, r6, pc}
        HAL_Delay(1);
 800076a:	2001      	movs	r0, #1
 800076c:	e7b9      	b.n	80006e2 <W5500_SocketInit+0xe>
        if(HAL_GetTick() > timeout) {
 800076e:	f000 fce1 	bl	8001134 <HAL_GetTick>
 8000772:	42a8      	cmp	r0, r5
 8000774:	d8f7      	bhi.n	8000766 <W5500_SocketInit+0x92>
        HAL_Delay(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f000 fce2 	bl	8001140 <HAL_Delay>
 800077c:	e7d4      	b.n	8000728 <W5500_SocketInit+0x54>
        if(HAL_GetTick() > timeout) {
 800077e:	f000 fcd9 	bl	8001134 <HAL_GetTick>
 8000782:	42a8      	cmp	r0, r5
 8000784:	d8ef      	bhi.n	8000766 <W5500_SocketInit+0x92>
        HAL_Delay(1);
 8000786:	2001      	movs	r0, #1
 8000788:	f000 fcda 	bl	8001140 <HAL_Delay>
 800078c:	e7e4      	b.n	8000758 <W5500_SocketInit+0x84>
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	50000400 	.word	0x50000400

08000794 <W5500_WriteN>:

void W5500_WriteN(uint16_t addr, uint8_t cb, const uint8_t* data, uint8_t len)
{
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000796:	27a0      	movs	r7, #160	@ 0xa0
{
 8000798:	0004      	movs	r4, r0
 800079a:	b085      	sub	sp, #20
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800079c:	05ff      	lsls	r7, r7, #23
{
 800079e:	000e      	movs	r6, r1
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80007a0:	0038      	movs	r0, r7
{
 80007a2:	9201      	str	r2, [sp, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80007a4:	2110      	movs	r1, #16
 80007a6:	2200      	movs	r2, #0
{
 80007a8:	001d      	movs	r5, r3
    uint8_t cmd[3] = {addr>>8, addr&0xFF, cb|0x04};
 80007aa:	ba64      	rev16	r4, r4
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80007ac:	f001 f8b4 	bl	8001918 <HAL_GPIO_WritePin>
    uint8_t cmd[3] = {addr>>8, addr&0xFF, cb|0x04};
 80007b0:	ab02      	add	r3, sp, #8
 80007b2:	809c      	strh	r4, [r3, #4]
 80007b4:	2304      	movs	r3, #4
 80007b6:	4333      	orrs	r3, r6
    HAL_SPI_Transmit(&spi, cmd, 3, 1000);
 80007b8:	26fa      	movs	r6, #250	@ 0xfa
 80007ba:	4c0b      	ldr	r4, [pc, #44]	@ (80007e8 <W5500_WriteN+0x54>)
    uint8_t cmd[3] = {addr>>8, addr&0xFF, cb|0x04};
 80007bc:	aa02      	add	r2, sp, #8
    HAL_SPI_Transmit(&spi, cmd, 3, 1000);
 80007be:	00b6      	lsls	r6, r6, #2
    uint8_t cmd[3] = {addr>>8, addr&0xFF, cb|0x04};
 80007c0:	7193      	strb	r3, [r2, #6]
    HAL_SPI_Transmit(&spi, cmd, 3, 1000);
 80007c2:	a903      	add	r1, sp, #12
 80007c4:	0033      	movs	r3, r6
 80007c6:	2203      	movs	r2, #3
 80007c8:	0020      	movs	r0, r4
 80007ca:	f001 fd43 	bl	8002254 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&spi, (uint8_t*)data, len, 1000);
 80007ce:	0033      	movs	r3, r6
 80007d0:	002a      	movs	r2, r5
 80007d2:	9901      	ldr	r1, [sp, #4]
 80007d4:	0020      	movs	r0, r4
 80007d6:	f001 fd3d 	bl	8002254 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	2110      	movs	r1, #16
 80007de:	0038      	movs	r0, r7
 80007e0:	f001 f89a 	bl	8001918 <HAL_GPIO_WritePin>
}
 80007e4:	b005      	add	sp, #20
 80007e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e8:	200001dc 	.word	0x200001dc

080007ec <W5500_Init>:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80007ec:	2180      	movs	r1, #128	@ 0x80
 80007ee:	20a0      	movs	r0, #160	@ 0xa0
{
 80007f0:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	0049      	lsls	r1, r1, #1
 80007f6:	05c0      	lsls	r0, r0, #23
 80007f8:	f001 f88e 	bl	8001918 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f000 fc9f 	bl	8001140 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000802:	2180      	movs	r1, #128	@ 0x80
 8000804:	20a0      	movs	r0, #160	@ 0xa0
 8000806:	2201      	movs	r2, #1
 8000808:	0049      	lsls	r1, r1, #1
 800080a:	05c0      	lsls	r0, r0, #23
 800080c:	f001 f884 	bl	8001918 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000810:	2064      	movs	r0, #100	@ 0x64
 8000812:	f000 fc95 	bl	8001140 <HAL_Delay>
    uint8_t version = W5500_Read(0x0039, CB_COMMON);
 8000816:	2100      	movs	r1, #0
 8000818:	2039      	movs	r0, #57	@ 0x39
 800081a:	f7ff ff33 	bl	8000684 <W5500_Read>
 800081e:	0004      	movs	r4, r0
    if(version != 0x04) {
 8000820:	2804      	cmp	r0, #4
 8000822:	d000      	beq.n	8000826 <W5500_Init+0x3a>
        while(1);
 8000824:	e7fe      	b.n	8000824 <W5500_Init+0x38>
    W5500_WriteN(W5500_SHAR, CB_COMMON, mac, 6);      // MAC address
 8000826:	2306      	movs	r3, #6
 8000828:	2100      	movs	r1, #0
 800082a:	2009      	movs	r0, #9
 800082c:	4a11      	ldr	r2, [pc, #68]	@ (8000874 <W5500_Init+0x88>)
 800082e:	f7ff ffb1 	bl	8000794 <W5500_WriteN>
    W5500_WriteN(W5500_GAR, CB_COMMON, gateway, 4);   // Gateway
 8000832:	0023      	movs	r3, r4
 8000834:	2100      	movs	r1, #0
 8000836:	2001      	movs	r0, #1
 8000838:	4a0f      	ldr	r2, [pc, #60]	@ (8000878 <W5500_Init+0x8c>)
 800083a:	f7ff ffab 	bl	8000794 <W5500_WriteN>
    W5500_WriteN(W5500_SUBR, CB_COMMON, subnet, 4);   // Subnet mask
 800083e:	0023      	movs	r3, r4
 8000840:	2100      	movs	r1, #0
 8000842:	2005      	movs	r0, #5
 8000844:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <W5500_Init+0x90>)
 8000846:	f7ff ffa5 	bl	8000794 <W5500_WriteN>
    W5500_WriteN(W5500_SIPR, CB_COMMON, ip, 4);       // IP address
 800084a:	0023      	movs	r3, r4
 800084c:	2100      	movs	r1, #0
 800084e:	200f      	movs	r0, #15
 8000850:	4a0b      	ldr	r2, [pc, #44]	@ (8000880 <W5500_Init+0x94>)
 8000852:	f7ff ff9f 	bl	8000794 <W5500_WriteN>
    W5500_Write(0x001E, CB_SOCK0, 2);  // RX buffer = 2KB
 8000856:	2202      	movs	r2, #2
 8000858:	2108      	movs	r1, #8
 800085a:	201e      	movs	r0, #30
 800085c:	f7ff fef2 	bl	8000644 <W5500_Write>
    W5500_Write(0x001F, CB_SOCK0, 2);  // TX buffer = 2KB
 8000860:	2202      	movs	r2, #2
 8000862:	2108      	movs	r1, #8
 8000864:	201f      	movs	r0, #31
 8000866:	f7ff feed 	bl	8000644 <W5500_Write>
    HAL_Delay(100);
 800086a:	2064      	movs	r0, #100	@ 0x64
 800086c:	f000 fc68 	bl	8001140 <HAL_Delay>
}
 8000870:	bd10      	pop	{r4, pc}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	08003779 	.word	0x08003779
 8000878:	0800376d 	.word	0x0800376d
 800087c:	08003771 	.word	0x08003771
 8000880:	08003775 	.word	0x08003775

08000884 <W5500_Send>:
{
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	0006      	movs	r6, r0
    uint16_t len = 0;
 8000888:	2400      	movs	r4, #0
    while(msg[len]) len++;  // Get string length
 800088a:	5d33      	ldrb	r3, [r6, r4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d123      	bne.n	80008d8 <W5500_Send+0x54>
    uint16_t ptr = W5500_Read(W5500_S0_TX_WR, CB_SOCK0) << 8;
 8000890:	2108      	movs	r1, #8
 8000892:	2024      	movs	r0, #36	@ 0x24
 8000894:	f7ff fef6 	bl	8000684 <W5500_Read>
    ptr |= W5500_Read(W5500_S0_TX_WR+1, CB_SOCK0);
 8000898:	2108      	movs	r1, #8
    uint16_t ptr = W5500_Read(W5500_S0_TX_WR, CB_SOCK0) << 8;
 800089a:	0205      	lsls	r5, r0, #8
    ptr |= W5500_Read(W5500_S0_TX_WR+1, CB_SOCK0);
 800089c:	2025      	movs	r0, #37	@ 0x25
 800089e:	f7ff fef1 	bl	8000684 <W5500_Read>
    uint16_t ptr = W5500_Read(W5500_S0_TX_WR, CB_SOCK0) << 8;
 80008a2:	b2ad      	uxth	r5, r5
    ptr |= W5500_Read(W5500_S0_TX_WR+1, CB_SOCK0);
 80008a4:	4305      	orrs	r5, r0
 80008a6:	b2ad      	uxth	r5, r5
    W5500_WriteN(ptr, CB_SOCK0_TX, (const uint8_t*)msg, len);
 80008a8:	b2e3      	uxtb	r3, r4
    ptr += len;
 80008aa:	1964      	adds	r4, r4, r5
    W5500_WriteN(ptr, CB_SOCK0_TX, (const uint8_t*)msg, len);
 80008ac:	0032      	movs	r2, r6
 80008ae:	0028      	movs	r0, r5
    ptr += len;
 80008b0:	b2a4      	uxth	r4, r4
    W5500_WriteN(ptr, CB_SOCK0_TX, (const uint8_t*)msg, len);
 80008b2:	2110      	movs	r1, #16
 80008b4:	f7ff ff6e 	bl	8000794 <W5500_WriteN>
    W5500_Write(W5500_S0_TX_WR, CB_SOCK0, ptr >> 8);
 80008b8:	0a22      	lsrs	r2, r4, #8
 80008ba:	2108      	movs	r1, #8
 80008bc:	2024      	movs	r0, #36	@ 0x24
 80008be:	f7ff fec1 	bl	8000644 <W5500_Write>
    W5500_Write(W5500_S0_TX_WR+1, CB_SOCK0, ptr & 0xFF);
 80008c2:	b2e2      	uxtb	r2, r4
 80008c4:	2108      	movs	r1, #8
 80008c6:	2025      	movs	r0, #37	@ 0x25
 80008c8:	f7ff febc 	bl	8000644 <W5500_Write>
    W5500_Write(W5500_S0_CR, CB_SOCK0, CMD_SEND);
 80008cc:	2220      	movs	r2, #32
 80008ce:	2108      	movs	r1, #8
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff feb7 	bl	8000644 <W5500_Write>
}
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
    while(msg[len]) len++;  // Get string length
 80008d8:	3401      	adds	r4, #1
 80008da:	b2a4      	uxth	r4, r4
 80008dc:	e7d5      	b.n	800088a <W5500_Send+0x6>
	...

080008e0 <W5500_ReadN>:

void W5500_ReadN(uint16_t addr, uint8_t cb, uint8_t* data, uint8_t len)
{
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80008e2:	27a0      	movs	r7, #160	@ 0xa0
{
 80008e4:	000e      	movs	r6, r1
 80008e6:	b085      	sub	sp, #20
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80008e8:	05ff      	lsls	r7, r7, #23
{
 80008ea:	9201      	str	r2, [sp, #4]
 80008ec:	0004      	movs	r4, r0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	0038      	movs	r0, r7
 80008f2:	2110      	movs	r1, #16
{
 80008f4:	001d      	movs	r5, r3
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80008f6:	f001 f80f 	bl	8001918 <HAL_GPIO_WritePin>
    uint8_t cmd[3] = {addr>>8, addr&0xFF, cb};
 80008fa:	ab02      	add	r3, sp, #8
 80008fc:	719e      	strb	r6, [r3, #6]
    HAL_SPI_Transmit(&spi, cmd, 3, 1000);
 80008fe:	26fa      	movs	r6, #250	@ 0xfa
    uint8_t cmd[3] = {addr>>8, addr&0xFF, cb};
 8000900:	ba64      	rev16	r4, r4
 8000902:	809c      	strh	r4, [r3, #4]
    HAL_SPI_Transmit(&spi, cmd, 3, 1000);
 8000904:	4c0a      	ldr	r4, [pc, #40]	@ (8000930 <W5500_ReadN+0x50>)
 8000906:	00b6      	lsls	r6, r6, #2
 8000908:	0033      	movs	r3, r6
 800090a:	a903      	add	r1, sp, #12
 800090c:	2203      	movs	r2, #3
 800090e:	0020      	movs	r0, r4
 8000910:	f001 fca0 	bl	8002254 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&spi, data, len, 1000);
 8000914:	0033      	movs	r3, r6
 8000916:	002a      	movs	r2, r5
 8000918:	9901      	ldr	r1, [sp, #4]
 800091a:	0020      	movs	r0, r4
 800091c:	f001 fe64 	bl	80025e8 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000920:	2201      	movs	r2, #1
 8000922:	2110      	movs	r1, #16
 8000924:	0038      	movs	r0, r7
 8000926:	f000 fff7 	bl	8001918 <HAL_GPIO_WritePin>
}
 800092a:	b005      	add	sp, #20
 800092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	200001dc 	.word	0x200001dc

08000934 <W5500_Recv>:
{
 8000934:	b570      	push	{r4, r5, r6, lr}
    uint16_t len = W5500_Read(W5500_S0_RX_RSR, CB_SOCK0) << 8;
 8000936:	2108      	movs	r1, #8
 8000938:	2026      	movs	r0, #38	@ 0x26
 800093a:	f7ff fea3 	bl	8000684 <W5500_Read>
    len |= W5500_Read(W5500_S0_RX_RSR+1, CB_SOCK0);
 800093e:	2108      	movs	r1, #8
    uint16_t len = W5500_Read(W5500_S0_RX_RSR, CB_SOCK0) << 8;
 8000940:	0204      	lsls	r4, r0, #8
    len |= W5500_Read(W5500_S0_RX_RSR+1, CB_SOCK0);
 8000942:	2027      	movs	r0, #39	@ 0x27
 8000944:	f7ff fe9e 	bl	8000684 <W5500_Read>
    uint16_t len = W5500_Read(W5500_S0_RX_RSR, CB_SOCK0) << 8;
 8000948:	b2a4      	uxth	r4, r4
    len |= W5500_Read(W5500_S0_RX_RSR+1, CB_SOCK0);
 800094a:	4320      	orrs	r0, r4
 800094c:	b285      	uxth	r5, r0
    if(len == 0) return 0;
 800094e:	2d00      	cmp	r5, #0
 8000950:	d02a      	beq.n	80009a8 <W5500_Recv+0x74>
    if(len > sizeof(buf)-1) len = sizeof(buf)-1;
 8000952:	1c2b      	adds	r3, r5, #0
 8000954:	2d7f      	cmp	r5, #127	@ 0x7f
 8000956:	d900      	bls.n	800095a <W5500_Recv+0x26>
 8000958:	237f      	movs	r3, #127	@ 0x7f
    uint16_t ptr = W5500_Read(W5500_S0_RX_RD, CB_SOCK0) << 8;
 800095a:	2108      	movs	r1, #8
 800095c:	2028      	movs	r0, #40	@ 0x28
    if(len > sizeof(buf)-1) len = sizeof(buf)-1;
 800095e:	b29d      	uxth	r5, r3
    uint16_t ptr = W5500_Read(W5500_S0_RX_RD, CB_SOCK0) << 8;
 8000960:	f7ff fe90 	bl	8000684 <W5500_Read>
    ptr |= W5500_Read(W5500_S0_RX_RD+1, CB_SOCK0);
 8000964:	2108      	movs	r1, #8
    uint16_t ptr = W5500_Read(W5500_S0_RX_RD, CB_SOCK0) << 8;
 8000966:	0206      	lsls	r6, r0, #8
    ptr |= W5500_Read(W5500_S0_RX_RD+1, CB_SOCK0);
 8000968:	2029      	movs	r0, #41	@ 0x29
 800096a:	f7ff fe8b 	bl	8000684 <W5500_Read>
    uint16_t ptr = W5500_Read(W5500_S0_RX_RD, CB_SOCK0) << 8;
 800096e:	b2b6      	uxth	r6, r6
    ptr |= W5500_Read(W5500_S0_RX_RD+1, CB_SOCK0);
 8000970:	4330      	orrs	r0, r6
    W5500_ReadN(ptr, CB_SOCK0_RX, buf, len);
 8000972:	4e0e      	ldr	r6, [pc, #56]	@ (80009ac <W5500_Recv+0x78>)
    ptr |= W5500_Read(W5500_S0_RX_RD+1, CB_SOCK0);
 8000974:	b284      	uxth	r4, r0
    W5500_ReadN(ptr, CB_SOCK0_RX, buf, len);
 8000976:	0020      	movs	r0, r4
 8000978:	0032      	movs	r2, r6
 800097a:	2118      	movs	r1, #24
 800097c:	b2eb      	uxtb	r3, r5
 800097e:	f7ff ffaf 	bl	80008e0 <W5500_ReadN>
    buf[len] = 0; // Null terminate
 8000982:	2300      	movs	r3, #0
    ptr += len;
 8000984:	1964      	adds	r4, r4, r5
 8000986:	b2a4      	uxth	r4, r4
    W5500_Write(W5500_S0_RX_RD, CB_SOCK0, ptr >> 8);
 8000988:	2108      	movs	r1, #8
 800098a:	2028      	movs	r0, #40	@ 0x28
 800098c:	0a22      	lsrs	r2, r4, #8
    buf[len] = 0; // Null terminate
 800098e:	5573      	strb	r3, [r6, r5]
    W5500_Write(W5500_S0_RX_RD, CB_SOCK0, ptr >> 8);
 8000990:	f7ff fe58 	bl	8000644 <W5500_Write>
    W5500_Write(W5500_S0_RX_RD+1, CB_SOCK0, ptr & 0xFF);
 8000994:	2108      	movs	r1, #8
 8000996:	2029      	movs	r0, #41	@ 0x29
 8000998:	b2e2      	uxtb	r2, r4
 800099a:	f7ff fe53 	bl	8000644 <W5500_Write>
    W5500_Write(W5500_S0_CR, CB_SOCK0, CMD_RECV);
 800099e:	2240      	movs	r2, #64	@ 0x40
 80009a0:	2108      	movs	r1, #8
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff fe4e 	bl	8000644 <W5500_Write>
}
 80009a8:	0028      	movs	r0, r5
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	20000078 	.word	0x20000078

080009b0 <Print>:

void Print(const char* msg)
{
 80009b0:	b510      	push	{r4, lr}
 80009b2:	0004      	movs	r4, r0
    int len = 0;
    while(msg[len]) len++;
 80009b4:	f7ff fba8 	bl	8000108 <strlen>
    HAL_UART_Transmit(&uart, (uint8_t*)msg, len, 1000);
 80009b8:	23fa      	movs	r3, #250	@ 0xfa
 80009ba:	b282      	uxth	r2, r0
 80009bc:	0021      	movs	r1, r4
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4801      	ldr	r0, [pc, #4]	@ (80009c8 <Print+0x18>)
 80009c2:	f002 f871 	bl	8002aa8 <HAL_UART_Transmit>
}
 80009c6:	bd10      	pop	{r4, pc}
 80009c8:	20000154 	.word	0x20000154

080009cc <Read_ADC_PA0>:

uint16_t Read_ADC_PA0(void)
{
    ADC_ChannelConfTypeDef sConfig = {0};

    sConfig.Channel = ADC_CHANNEL_0;  // PA0
 80009cc:	2301      	movs	r3, #1
{
 80009ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    sConfig.Channel = ADC_CHANNEL_0;  // PA0
 80009d0:	9300      	str	r3, [sp, #0]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009d2:	2380      	movs	r3, #128	@ 0x80
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80009d4:	4c0e      	ldr	r4, [pc, #56]	@ (8000a10 <Read_ADC_PA0+0x44>)
 80009d6:	4669      	mov	r1, sp
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009d8:	015b      	lsls	r3, r3, #5
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80009da:	0020      	movs	r0, r4
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009dc:	9301      	str	r3, [sp, #4]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80009de:	f000 fe01 	bl	80015e4 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc);
 80009e2:	0020      	movs	r0, r4
 80009e4:	f000 fd4a 	bl	800147c <HAL_ADC_Start>

    if(HAL_ADC_PollForConversion(&hadc, 100) == HAL_OK) {
 80009e8:	2164      	movs	r1, #100	@ 0x64
 80009ea:	0020      	movs	r0, r4
 80009ec:	f000 fd90 	bl	8001510 <HAL_ADC_PollForConversion>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d108      	bne.n	8000a06 <Read_ADC_PA0+0x3a>
        uint16_t result = HAL_ADC_GetValue(&hadc);
 80009f4:	0020      	movs	r0, r4
 80009f6:	f000 fdf1 	bl	80015dc <HAL_ADC_GetValue>
 80009fa:	b285      	uxth	r5, r0
        HAL_ADC_Stop(&hadc);
 80009fc:	0020      	movs	r0, r4
 80009fe:	f000 fd69 	bl	80014d4 <HAL_ADC_Stop>
        return result;
    }

    HAL_ADC_Stop(&hadc);
    return 0;
}
 8000a02:	0028      	movs	r0, r5
 8000a04:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    HAL_ADC_Stop(&hadc);
 8000a06:	0020      	movs	r0, r4
 8000a08:	f000 fd64 	bl	80014d4 <HAL_ADC_Stop>
    return 0;
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	e7f8      	b.n	8000a02 <Read_ADC_PA0+0x36>
 8000a10:	200000f8 	.word	0x200000f8

08000a14 <MX_ADC_Init>:

void MX_ADC_Init(void)
{
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a14:	2380      	movs	r3, #128	@ 0x80
 8000a16:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <MX_ADC_Init+0x54>)
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
{
 8000a1c:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a1e:	430b      	orrs	r3, r1

    hadc.Instance = ADC1;
 8000a20:	4c12      	ldr	r4, [pc, #72]	@ (8000a6c <MX_ADC_Init+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a22:	6353      	str	r3, [r2, #52]	@ 0x34
    hadc.Instance = ADC1;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_ADC_Init+0x5c>)
    hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a26:	2500      	movs	r5, #0
    hadc.Instance = ADC1;
 8000a28:	6023      	str	r3, [r4, #0]
    hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a2a:	2380      	movs	r3, #128	@ 0x80
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	6063      	str	r3, [r4, #4]
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a30:	2301      	movs	r3, #1
 8000a32:	6123      	str	r3, [r4, #16]
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a34:	3303      	adds	r3, #3
 8000a36:	6163      	str	r3, [r4, #20]
    hadc.Init.LowPowerAutoWait = DISABLE;
    hadc.Init.ContinuousConvMode = DISABLE;
 8000a38:	1c63      	adds	r3, r4, #1
 8000a3a:	77dd      	strb	r5, [r3, #31]
    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3c:	23c2      	movs	r3, #194	@ 0xc2
 8000a3e:	33ff      	adds	r3, #255	@ 0xff
 8000a40:	6263      	str	r3, [r4, #36]	@ 0x24
    hadc.Init.DMAContinuousRequests = DISABLE;
 8000a42:	0023      	movs	r3, r4
 8000a44:	332c      	adds	r3, #44	@ 0x2c
 8000a46:	701d      	strb	r5, [r3, #0]
    hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a48:	2380      	movs	r3, #128	@ 0x80
    hadc.Init.OversamplingMode = DISABLE;

    HAL_ADC_Init(&hadc);
 8000a4a:	0020      	movs	r0, r4
    hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a4c:	015b      	lsls	r3, r3, #5
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a4e:	60a5      	str	r5, [r4, #8]
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a50:	60e5      	str	r5, [r4, #12]
    hadc.Init.LowPowerAutoWait = DISABLE;
 8000a52:	61a5      	str	r5, [r4, #24]
    hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a54:	6323      	str	r3, [r4, #48]	@ 0x30
    hadc.Init.OversamplingMode = DISABLE;
 8000a56:	63e5      	str	r5, [r4, #60]	@ 0x3c
    HAL_ADC_Init(&hadc);
 8000a58:	f000 fc3a 	bl	80012d0 <HAL_ADC_Init>
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8000a5c:	0029      	movs	r1, r5
 8000a5e:	0020      	movs	r0, r4
 8000a60:	f000 fe14 	bl	800168c <HAL_ADCEx_Calibration_Start>

}
 8000a64:	bd70      	pop	{r4, r5, r6, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	200000f8 	.word	0x200000f8
 8000a70:	40012400 	.word	0x40012400

08000a74 <SPI_Init>:

void SPI_Init(void)
{
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a74:	2380      	movs	r3, #128	@ 0x80
 8000a76:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <SPI_Init+0x3c>)
 8000a78:	015b      	lsls	r3, r3, #5
 8000a7a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
{
 8000a7c:	b510      	push	{r4, lr}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	6353      	str	r3, [r2, #52]	@ 0x34
    spi.Instance = SPI1;
 8000a82:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <SPI_Init+0x40>)
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <SPI_Init+0x44>)
    spi.Init.Mode = SPI_MODE_MASTER;
    spi.Init.Direction = SPI_DIRECTION_2LINES;
    spi.Init.DataSize = SPI_DATASIZE_8BIT;
    spi.Init.CLKPolarity = SPI_POLARITY_LOW;
    spi.Init.CLKPhase = SPI_PHASE_1EDGE;
    spi.Init.NSS = SPI_NSS_SOFT;
 8000a86:	2280      	movs	r2, #128	@ 0x80
    spi.Instance = SPI1;
 8000a88:	6003      	str	r3, [r0, #0]
    spi.Init.Mode = SPI_MODE_MASTER;
 8000a8a:	2382      	movs	r3, #130	@ 0x82
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	6043      	str	r3, [r0, #4]
    spi.Init.Direction = SPI_DIRECTION_2LINES;
 8000a90:	2300      	movs	r3, #0
    spi.Init.NSS = SPI_NSS_SOFT;
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	6182      	str	r2, [r0, #24]
    spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a96:	3af1      	subs	r2, #241	@ 0xf1
 8000a98:	3aff      	subs	r2, #255	@ 0xff
    spi.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9a:	6083      	str	r3, [r0, #8]
    spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a9c:	60c3      	str	r3, [r0, #12]
    spi.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9e:	6103      	str	r3, [r0, #16]
    spi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa0:	6143      	str	r3, [r0, #20]
    spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000aa2:	61c2      	str	r2, [r0, #28]
    spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa4:	6203      	str	r3, [r0, #32]
    spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa6:	6243      	str	r3, [r0, #36]	@ 0x24
    spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa8:	6283      	str	r3, [r0, #40]	@ 0x28
    HAL_SPI_Init(&spi);
 8000aaa:	f001 fb78 	bl	800219e <HAL_SPI_Init>
}
 8000aae:	bd10      	pop	{r4, pc}
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	200001dc 	.word	0x200001dc
 8000ab8:	40013000 	.word	0x40013000

08000abc <UART_Init>:

void UART_Init(void)
{
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	4a0c      	ldr	r2, [pc, #48]	@ (8000af0 <UART_Init+0x34>)
 8000ac0:	029b      	lsls	r3, r3, #10
 8000ac2:	6b91      	ldr	r1, [r2, #56]	@ 0x38
{
 8000ac4:	b510      	push	{r4, lr}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	6393      	str	r3, [r2, #56]	@ 0x38
    uart.Instance = USART2;
 8000aca:	480a      	ldr	r0, [pc, #40]	@ (8000af4 <UART_Init+0x38>)
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <UART_Init+0x3c>)
    uart.Init.BaudRate = 115200;
    uart.Init.WordLength = UART_WORDLENGTH_8B;
    uart.Init.StopBits = UART_STOPBITS_1;
    uart.Init.Parity = UART_PARITY_NONE;
    uart.Init.Mode = UART_MODE_TX;
 8000ace:	2208      	movs	r2, #8
    uart.Instance = USART2;
 8000ad0:	6003      	str	r3, [r0, #0]
    uart.Init.BaudRate = 115200;
 8000ad2:	23e1      	movs	r3, #225	@ 0xe1
 8000ad4:	025b      	lsls	r3, r3, #9
 8000ad6:	6043      	str	r3, [r0, #4]
    uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad8:	2300      	movs	r3, #0
    uart.Init.Mode = UART_MODE_TX;
 8000ada:	6142      	str	r2, [r0, #20]
    uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000adc:	6083      	str	r3, [r0, #8]
    uart.Init.StopBits = UART_STOPBITS_1;
 8000ade:	60c3      	str	r3, [r0, #12]
    uart.Init.Parity = UART_PARITY_NONE;
 8000ae0:	6103      	str	r3, [r0, #16]
    uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	6183      	str	r3, [r0, #24]
    uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	61c3      	str	r3, [r0, #28]
    uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae6:	6203      	str	r3, [r0, #32]
    uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	6243      	str	r3, [r0, #36]	@ 0x24
    HAL_UART_Init(&uart);
 8000aea:	f002 f8a3 	bl	8002c34 <HAL_UART_Init>
}
 8000aee:	bd10      	pop	{r4, pc}
 8000af0:	40021000 	.word	0x40021000
 8000af4:	20000154 	.word	0x20000154
 8000af8:	40004400 	.word	0x40004400

08000afc <GPIO_Init>:

void GPIO_Init(void)
{
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <GPIO_Init+0xb0>)
{
 8000b04:	b089      	sub	sp, #36	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c

    // PA0 as analog input for ADC
    g.Pin = GPIO_PIN_0;
    g.Mode = GPIO_MODE_ANALOG;
    g.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &g);
 8000b08:	27a0      	movs	r7, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	432a      	orrs	r2, r5
 8000b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    GPIO_InitTypeDef g = {0};
 8000b10:	2100      	movs	r1, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	402a      	ands	r2, r5
 8000b14:	9201      	str	r2, [sp, #4]
 8000b16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    GPIO_InitTypeDef g = {0};
 8000b1a:	a805      	add	r0, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4332      	orrs	r2, r6
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    GPIO_InitTypeDef g = {0};
 8000b22:	220c      	movs	r2, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4033      	ands	r3, r6
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitTypeDef g = {0};
 8000b2a:	f002 f8eb 	bl	8002d04 <memset>
    g.Mode = GPIO_MODE_ANALOG;
 8000b2e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &g);
 8000b30:	05ff      	lsls	r7, r7, #23
 8000b32:	0038      	movs	r0, r7
 8000b34:	a903      	add	r1, sp, #12

    // SPI pins
    g.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    g.Mode = GPIO_MODE_AF_PP;
    g.Pull = GPIO_NOPULL;
 8000b36:	2400      	movs	r4, #0
    g.Mode = GPIO_MODE_ANALOG;
 8000b38:	9304      	str	r3, [sp, #16]
    g.Pin = GPIO_PIN_0;
 8000b3a:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &g);
 8000b3c:	f000 fe3e 	bl	80017bc <HAL_GPIO_Init>
    g.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b40:	23e0      	movs	r3, #224	@ 0xe0
    g.Speed = GPIO_SPEED_FREQ_HIGH;
    g.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &g);
 8000b42:	0038      	movs	r0, r7
 8000b44:	a903      	add	r1, sp, #12
    g.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b46:	9303      	str	r3, [sp, #12]
    g.Mode = GPIO_MODE_AF_PP;
 8000b48:	9604      	str	r6, [sp, #16]
    g.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4a:	9606      	str	r6, [sp, #24]
    g.Pull = GPIO_NOPULL;
 8000b4c:	9405      	str	r4, [sp, #20]
    g.Alternate = GPIO_AF0_SPI1;
 8000b4e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &g);
 8000b50:	f000 fe34 	bl	80017bc <HAL_GPIO_Init>

    // UART TX
    g.Pin = GPIO_PIN_2;
 8000b54:	2304      	movs	r3, #4
    g.Mode = GPIO_MODE_AF_PP;
    g.Pull = GPIO_NOPULL;
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2203      	movs	r2, #3
    g.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &g);
 8000b58:	0038      	movs	r0, r7
 8000b5a:	a903      	add	r1, sp, #12
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	9206      	str	r2, [sp, #24]
    g.Pin = GPIO_PIN_2;
 8000b5e:	9303      	str	r3, [sp, #12]
    g.Mode = GPIO_MODE_AF_PP;
 8000b60:	9604      	str	r6, [sp, #16]
    g.Alternate = GPIO_AF4_USART2;
 8000b62:	9307      	str	r3, [sp, #28]
    g.Pull = GPIO_NOPULL;
 8000b64:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &g);
 8000b66:	f000 fe29 	bl	80017bc <HAL_GPIO_Init>

    // W5500 control pins
    g.Pin = GPIO_PIN_3;
 8000b6a:	2308      	movs	r3, #8
    g.Mode = GPIO_MODE_OUTPUT_PP;
    g.Pull = GPIO_NOPULL;
    g.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6c:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &g);
 8000b6e:	4e10      	ldr	r6, [pc, #64]	@ (8000bb0 <GPIO_Init+0xb4>)
 8000b70:	a903      	add	r1, sp, #12
 8000b72:	0030      	movs	r0, r6
    g.Pin = GPIO_PIN_3;
 8000b74:	9303      	str	r3, [sp, #12]
    g.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	9504      	str	r5, [sp, #16]
    g.Pull = GPIO_NOPULL;
 8000b78:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &g);
 8000b7a:	f000 fe1f 	bl	80017bc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 , GPIO_PIN_RESET);
 8000b7e:	0030      	movs	r0, r6

    // W5500 control pins
    g.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000b80:	2688      	movs	r6, #136	@ 0x88
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 , GPIO_PIN_RESET);
 8000b82:	0022      	movs	r2, r4
 8000b84:	2108      	movs	r1, #8
 8000b86:	f000 fec7 	bl	8001918 <HAL_GPIO_WritePin>
    g.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000b8a:	0076      	lsls	r6, r6, #1
    g.Mode = GPIO_MODE_OUTPUT_PP;
    g.Pull = GPIO_NOPULL;
    g.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &g);
 8000b8c:	0038      	movs	r0, r7
 8000b8e:	a903      	add	r1, sp, #12
    g.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000b90:	9603      	str	r6, [sp, #12]
    g.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	9504      	str	r5, [sp, #16]
    g.Pull = GPIO_NOPULL;
 8000b94:	9405      	str	r4, [sp, #20]
    g.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &g);
 8000b98:	f000 fe10 	bl	80017bc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8, 1);
 8000b9c:	002a      	movs	r2, r5
 8000b9e:	0031      	movs	r1, r6
 8000ba0:	0038      	movs	r0, r7
 8000ba2:	f000 feb9 	bl	8001918 <HAL_GPIO_WritePin>
}
 8000ba6:	b009      	add	sp, #36	@ 0x24
 8000ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	50000400 	.word	0x50000400

08000bb4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000bb4:	b530      	push	{r4, r5, lr}
 8000bb6:	b093      	sub	sp, #76	@ 0x4c
    RCC_OscInitTypeDef osc = {0};
 8000bb8:	2230      	movs	r2, #48	@ 0x30
 8000bba:	2100      	movs	r1, #0
 8000bbc:	a806      	add	r0, sp, #24
 8000bbe:	f002 f8a1 	bl	8002d04 <memset>
    RCC_ClkInitTypeDef clk = {0};
 8000bc2:	2214      	movs	r2, #20
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4668      	mov	r0, sp
 8000bc8:	f002 f89c 	bl	8002d04 <memset>

    osc.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	9305      	str	r3, [sp, #20]
    osc.MSIState = RCC_MSI_ON;
 8000bd0:	3b0f      	subs	r3, #15
 8000bd2:	930b      	str	r3, [sp, #44]	@ 0x2c
    osc.MSICalibrationValue = 0;
    osc.MSIClockRange = RCC_MSIRANGE_5;
 8000bd4:	23a0      	movs	r3, #160	@ 0xa0
    osc.PLL.PLLState = RCC_PLL_NONE;
    HAL_RCC_OscConfig(&osc);

    clk.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    clk.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bd6:	2400      	movs	r4, #0
    clk.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000bd8:	250f      	movs	r5, #15
    osc.MSIClockRange = RCC_MSIRANGE_5;
 8000bda:	021b      	lsls	r3, r3, #8
    HAL_RCC_OscConfig(&osc);
 8000bdc:	a805      	add	r0, sp, #20
    osc.MSIClockRange = RCC_MSIRANGE_5;
 8000bde:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_RCC_OscConfig(&osc);
 8000be0:	f000 fee2 	bl	80019a8 <HAL_RCC_OscConfig>
    clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
    clk.APB1CLKDivider = RCC_HCLK_DIV1;
    clk.APB2CLKDivider = RCC_HCLK_DIV1;
    HAL_Delay(5000);
 8000be4:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <SystemClock_Config+0x58>)
    clk.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000be6:	9500      	str	r5, [sp, #0]
    clk.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000be8:	9401      	str	r4, [sp, #4]
    clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bea:	9402      	str	r4, [sp, #8]
    clk.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bec:	9403      	str	r4, [sp, #12]
    clk.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	9404      	str	r4, [sp, #16]
    HAL_Delay(5000);
 8000bf0:	f000 faa6 	bl	8001140 <HAL_Delay>
    clk.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    clk.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
    clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
    clk.APB1CLKDivider = RCC_HCLK_DIV1;
    clk.APB2CLKDivider = RCC_HCLK_DIV1;
    HAL_RCC_ClockConfig(&clk, FLASH_LATENCY_0);
 8000bf4:	0021      	movs	r1, r4
 8000bf6:	4668      	mov	r0, sp
    clk.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000bf8:	9500      	str	r5, [sp, #0]
    clk.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bfa:	9401      	str	r4, [sp, #4]
    clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	9402      	str	r4, [sp, #8]
    clk.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	9403      	str	r4, [sp, #12]
    clk.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c00:	9404      	str	r4, [sp, #16]
    HAL_RCC_ClockConfig(&clk, FLASH_LATENCY_0);
 8000c02:	f001 f91f 	bl	8001e44 <HAL_RCC_ClockConfig>
}
 8000c06:	b013      	add	sp, #76	@ 0x4c
 8000c08:	bd30      	pop	{r4, r5, pc}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	00001388 	.word	0x00001388

08000c10 <main>:
{
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	4c98      	ldr	r4, [pc, #608]	@ (8000e74 <main+0x264>)
 8000c14:	44a5      	add	sp, r4
    HAL_Init();
 8000c16:	f000 fa6d 	bl	80010f4 <HAL_Init>
    SystemClock_Config();
 8000c1a:	f7ff ffcb 	bl	8000bb4 <SystemClock_Config>
    GPIO_Init();
 8000c1e:	f7ff ff6d 	bl	8000afc <GPIO_Init>
    SPI_Init();
 8000c22:	f7ff ff27 	bl	8000a74 <SPI_Init>
    UART_Init();
 8000c26:	f7ff ff49 	bl	8000abc <UART_Init>
    MX_ADC_Init();
 8000c2a:	f7ff fef3 	bl	8000a14 <MX_ADC_Init>
    Print("=== W5500 Ethernet Server ===\r\n");
 8000c2e:	4892      	ldr	r0, [pc, #584]	@ (8000e78 <main+0x268>)
 8000c30:	f7ff febe 	bl	80009b0 <Print>
    W5500_Init();
 8000c34:	f7ff fdda 	bl	80007ec <W5500_Init>
    if(W5500_SocketInit()) {
 8000c38:	f7ff fd4c 	bl	80006d4 <W5500_SocketInit>
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	d100      	bne.n	8000c42 <main+0x32>
        while(1);
 8000c40:	e7fe      	b.n	8000c40 <main+0x30>
 8000c42:	2301      	movs	r3, #1
    uint8_t last_status = 0xFF;
 8000c44:	25ff      	movs	r5, #255	@ 0xff
 8000c46:	9303      	str	r3, [sp, #12]
        uint16_t adc_raw = Read_ADC_PA0();
 8000c48:	f7ff fec0 	bl	80009cc <Read_ADC_PA0>
        uint16_t voltage_mv = (adc_raw * 3300) / 4095;
 8000c4c:	4b8b      	ldr	r3, [pc, #556]	@ (8000e7c <main+0x26c>)
 8000c4e:	498c      	ldr	r1, [pc, #560]	@ (8000e80 <main+0x270>)
 8000c50:	4358      	muls	r0, r3
 8000c52:	f7ff faf5 	bl	8000240 <__divsi3>
        volt_str[0] = '0' + (voltage_mv / 1000);
 8000c56:	21fa      	movs	r1, #250	@ 0xfa
        uint16_t voltage_mv = (adc_raw * 3300) / 4095;
 8000c58:	b284      	uxth	r4, r0
        volt_str[0] = '0' + (voltage_mv / 1000);
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	0089      	lsls	r1, r1, #2
 8000c5e:	f7ff fa65 	bl	800012c <__udivsi3>
        volt_str[1] = '.';
 8000c62:	232e      	movs	r3, #46	@ 0x2e
        volt_str[0] = '0' + (voltage_mv / 1000);
 8000c64:	ae06      	add	r6, sp, #24
 8000c66:	3030      	adds	r0, #48	@ 0x30
        volt_str[1] = '.';
 8000c68:	7073      	strb	r3, [r6, #1]
        volt_str[2] = '0' + ((voltage_mv / 100) % 10);
 8000c6a:	2164      	movs	r1, #100	@ 0x64
        volt_str[0] = '0' + (voltage_mv / 1000);
 8000c6c:	7030      	strb	r0, [r6, #0]
        volt_str[2] = '0' + ((voltage_mv / 100) % 10);
 8000c6e:	0020      	movs	r0, r4
 8000c70:	f7ff fa5c 	bl	800012c <__udivsi3>
 8000c74:	210a      	movs	r1, #10
 8000c76:	b280      	uxth	r0, r0
 8000c78:	f7ff fade 	bl	8000238 <__aeabi_uidivmod>
 8000c7c:	3130      	adds	r1, #48	@ 0x30
        volt_str[3] = '0' + ((voltage_mv / 10) % 10);
 8000c7e:	0020      	movs	r0, r4
        volt_str[2] = '0' + ((voltage_mv / 100) % 10);
 8000c80:	70b1      	strb	r1, [r6, #2]
        volt_str[3] = '0' + ((voltage_mv / 10) % 10);
 8000c82:	210a      	movs	r1, #10
 8000c84:	f7ff fa52 	bl	800012c <__udivsi3>
 8000c88:	210a      	movs	r1, #10
 8000c8a:	b280      	uxth	r0, r0
 8000c8c:	f7ff fad4 	bl	8000238 <__aeabi_uidivmod>
 8000c90:	3130      	adds	r1, #48	@ 0x30
        volt_str[4] = '0' + (voltage_mv % 10);
 8000c92:	0020      	movs	r0, r4
        volt_str[3] = '0' + ((voltage_mv / 10) % 10);
 8000c94:	70f1      	strb	r1, [r6, #3]
        volt_str[4] = '0' + (voltage_mv % 10);
 8000c96:	210a      	movs	r1, #10
 8000c98:	f7ff face 	bl	8000238 <__aeabi_uidivmod>
        volt_str[5] = 0;
 8000c9c:	2300      	movs	r3, #0
        volt_str[4] = '0' + (voltage_mv % 10);
 8000c9e:	3130      	adds	r1, #48	@ 0x30
 8000ca0:	7131      	strb	r1, [r6, #4]
        uint8_t status = W5500_Read(W5500_S0_SR, CB_SOCK0);
 8000ca2:	2003      	movs	r0, #3
 8000ca4:	2108      	movs	r1, #8
        volt_str[5] = 0;
 8000ca6:	7173      	strb	r3, [r6, #5]
        uint8_t status = W5500_Read(W5500_S0_SR, CB_SOCK0);
 8000ca8:	f7ff fcec 	bl	8000684 <W5500_Read>
 8000cac:	0004      	movs	r4, r0
        if(status != last_status || (status_count % 1000 == 0)) {
 8000cae:	4285      	cmp	r5, r0
 8000cb0:	d108      	bne.n	8000cc4 <main+0xb4>
 8000cb2:	9b03      	ldr	r3, [sp, #12]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	4b73      	ldr	r3, [pc, #460]	@ (8000e84 <main+0x274>)
 8000cb8:	4353      	muls	r3, r2
 8000cba:	2203      	movs	r2, #3
 8000cbc:	41d3      	rors	r3, r2
 8000cbe:	4a72      	ldr	r2, [pc, #456]	@ (8000e88 <main+0x278>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d878      	bhi.n	8000db6 <main+0x1a6>
            switch(status) {
 8000cc4:	2c14      	cmp	r4, #20
 8000cc6:	d822      	bhi.n	8000d0e <main+0xfe>
 8000cc8:	2c12      	cmp	r4, #18
 8000cca:	d848      	bhi.n	8000d5e <main+0x14e>
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d029      	beq.n	8000d24 <main+0x114>
                    Print("STATUS 0x");
 8000cd0:	486e      	ldr	r0, [pc, #440]	@ (8000e8c <main+0x27c>)
 8000cd2:	f7ff fe6d 	bl	80009b0 <Print>
                    char hex[3] = {'0'+(status>>4), '0'+(status&0xF), 0};
 8000cd6:	230f      	movs	r3, #15
 8000cd8:	0922      	lsrs	r2, r4, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	0011      	movs	r1, r2
 8000cde:	4023      	ands	r3, r4
 8000ce0:	001d      	movs	r5, r3
 8000ce2:	2600      	movs	r6, #0
 8000ce4:	3130      	adds	r1, #48	@ 0x30
 8000ce6:	a848      	add	r0, sp, #288	@ 0x120
 8000ce8:	b2c9      	uxtb	r1, r1
 8000cea:	3530      	adds	r5, #48	@ 0x30
 8000cec:	7001      	strb	r1, [r0, #0]
 8000cee:	7045      	strb	r5, [r0, #1]
 8000cf0:	7086      	strb	r6, [r0, #2]
                    if(hex[0] > '9') hex[0] = 'A' + (hex[0]-'0'-10);
 8000cf2:	2939      	cmp	r1, #57	@ 0x39
 8000cf4:	d901      	bls.n	8000cfa <main+0xea>
 8000cf6:	3237      	adds	r2, #55	@ 0x37
 8000cf8:	7002      	strb	r2, [r0, #0]
                    if(hex[1] > '9') hex[1] = 'A' + (hex[1]-'0'-10);
 8000cfa:	2d39      	cmp	r5, #57	@ 0x39
 8000cfc:	d901      	bls.n	8000d02 <main+0xf2>
 8000cfe:	3337      	adds	r3, #55	@ 0x37
 8000d00:	7043      	strb	r3, [r0, #1]
                    Print(hex);
 8000d02:	f7ff fe55 	bl	80009b0 <Print>
                    Print("\r\n");
 8000d06:	4862      	ldr	r0, [pc, #392]	@ (8000e90 <main+0x280>)
 8000d08:	f7ff fe52 	bl	80009b0 <Print>
        if(status == SOCK_LISTEN) {
 8000d0c:	e00f      	b.n	8000d2e <main+0x11e>
            switch(status) {
 8000d0e:	2c17      	cmp	r4, #23
 8000d10:	d055      	beq.n	8000dbe <main+0x1ae>
 8000d12:	2c1c      	cmp	r4, #28
 8000d14:	d1dc      	bne.n	8000cd0 <main+0xc0>
            W5500_Write(W5500_S0_CR, CB_SOCK0, CMD_CLOSE);
 8000d16:	2001      	movs	r0, #1
 8000d18:	2210      	movs	r2, #16
 8000d1a:	2108      	movs	r1, #8
 8000d1c:	f7ff fc92 	bl	8000644 <W5500_Write>
            HAL_Delay(50);
 8000d20:	2032      	movs	r0, #50	@ 0x32
 8000d22:	e09c      	b.n	8000e5e <main+0x24e>
                    HAL_Delay(100);
 8000d24:	2064      	movs	r0, #100	@ 0x64
 8000d26:	f000 fa0b 	bl	8001140 <HAL_Delay>
                    W5500_SocketInit();  // Restart
 8000d2a:	f7ff fcd3 	bl	80006d4 <W5500_SocketInit>
        HAL_Delay(10);
 8000d2e:	200a      	movs	r0, #10
 8000d30:	f000 fa06 	bl	8001140 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2108      	movs	r1, #8
 8000d38:	4856      	ldr	r0, [pc, #344]	@ (8000e94 <main+0x284>)
 8000d3a:	f000 fded 	bl	8001918 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000d3e:	2032      	movs	r0, #50	@ 0x32
 8000d40:	f000 f9fe 	bl	8001140 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2108      	movs	r1, #8
 8000d48:	4852      	ldr	r0, [pc, #328]	@ (8000e94 <main+0x284>)
 8000d4a:	f000 fde5 	bl	8001918 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8000d4e:	2032      	movs	r0, #50	@ 0x32
 8000d50:	f000 f9f6 	bl	8001140 <HAL_Delay>
    while(1) {
 8000d54:	9b03      	ldr	r3, [sp, #12]
 8000d56:	0025      	movs	r5, r4
 8000d58:	3301      	adds	r3, #1
 8000d5a:	9303      	str	r3, [sp, #12]
 8000d5c:	e774      	b.n	8000c48 <main+0x38>
        if(status == SOCK_LISTEN) {
 8000d5e:	2c14      	cmp	r4, #20
 8000d60:	d1e5      	bne.n	8000d2e <main+0x11e>
            uint8_t ir = W5500_Read(W5500_S0_IR, CB_SOCK0);
 8000d62:	2108      	movs	r1, #8
 8000d64:	2002      	movs	r0, #2
 8000d66:	f7ff fc8d 	bl	8000684 <W5500_Read>
 8000d6a:	1e05      	subs	r5, r0, #0
            if(ir != 0) {
 8000d6c:	d0df      	beq.n	8000d2e <main+0x11e>
                Print("Socket interrupt: 0x");
 8000d6e:	484a      	ldr	r0, [pc, #296]	@ (8000e98 <main+0x288>)
 8000d70:	f7ff fe1e 	bl	80009b0 <Print>
                char hex[3] = {'0'+(ir>>4), '0'+(ir&0xF), 0};
 8000d74:	230f      	movs	r3, #15
 8000d76:	092a      	lsrs	r2, r5, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	402b      	ands	r3, r5
 8000d7e:	001e      	movs	r6, r3
 8000d80:	2700      	movs	r7, #0
 8000d82:	3130      	adds	r1, #48	@ 0x30
 8000d84:	a848      	add	r0, sp, #288	@ 0x120
 8000d86:	b2c9      	uxtb	r1, r1
 8000d88:	3630      	adds	r6, #48	@ 0x30
 8000d8a:	7001      	strb	r1, [r0, #0]
 8000d8c:	7046      	strb	r6, [r0, #1]
 8000d8e:	7087      	strb	r7, [r0, #2]
                if(hex[0] > '9') hex[0] = 'A' + (hex[0]-'0'-10);
 8000d90:	2939      	cmp	r1, #57	@ 0x39
 8000d92:	d901      	bls.n	8000d98 <main+0x188>
 8000d94:	3237      	adds	r2, #55	@ 0x37
 8000d96:	7002      	strb	r2, [r0, #0]
                if(hex[1] > '9') hex[1] = 'A' + (hex[1]-'0'-10);
 8000d98:	2e39      	cmp	r6, #57	@ 0x39
 8000d9a:	d901      	bls.n	8000da0 <main+0x190>
 8000d9c:	3337      	adds	r3, #55	@ 0x37
 8000d9e:	7043      	strb	r3, [r0, #1]
                Print(hex);
 8000da0:	f7ff fe06 	bl	80009b0 <Print>
                Print("\r\n");
 8000da4:	483a      	ldr	r0, [pc, #232]	@ (8000e90 <main+0x280>)
 8000da6:	f7ff fe03 	bl	80009b0 <Print>
                W5500_Write(W5500_S0_IR, CB_SOCK0, ir);
 8000daa:	002a      	movs	r2, r5
 8000dac:	2108      	movs	r1, #8
 8000dae:	2002      	movs	r0, #2
 8000db0:	f7ff fc48 	bl	8000644 <W5500_Write>
        if(status == SOCK_ESTABLISHED) {
 8000db4:	e7bb      	b.n	8000d2e <main+0x11e>
        if(status == SOCK_LISTEN) {
 8000db6:	2814      	cmp	r0, #20
 8000db8:	d0d3      	beq.n	8000d62 <main+0x152>
        if(status == SOCK_ESTABLISHED) {
 8000dba:	2817      	cmp	r0, #23
 8000dbc:	d155      	bne.n	8000e6a <main+0x25a>
            uint16_t recv_len = W5500_Recv();
 8000dbe:	f7ff fdb9 	bl	8000934 <W5500_Recv>
 8000dc2:	9002      	str	r0, [sp, #8]
            if(recv_len > 0) {
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d0b2      	beq.n	8000d2e <main+0x11e>
                len_str[0] = '0' + (recv_len / 100);
 8000dc8:	2164      	movs	r1, #100	@ 0x64
 8000dca:	f7ff f9af 	bl	800012c <__udivsi3>
 8000dce:	af05      	add	r7, sp, #20
 8000dd0:	3030      	adds	r0, #48	@ 0x30
                len_str[1] = '0' + ((recv_len / 10) % 10);
 8000dd2:	210a      	movs	r1, #10
                len_str[0] = '0' + (recv_len / 100);
 8000dd4:	7038      	strb	r0, [r7, #0]
                len_str[1] = '0' + ((recv_len / 10) % 10);
 8000dd6:	9802      	ldr	r0, [sp, #8]
 8000dd8:	f7ff f9a8 	bl	800012c <__udivsi3>
 8000ddc:	210a      	movs	r1, #10
 8000dde:	b280      	uxth	r0, r0
 8000de0:	f7ff fa2a 	bl	8000238 <__aeabi_uidivmod>
 8000de4:	3130      	adds	r1, #48	@ 0x30
                len_str[2] = '0' + (recv_len % 10);
 8000de6:	9802      	ldr	r0, [sp, #8]
                len_str[1] = '0' + ((recv_len / 10) % 10);
 8000de8:	7079      	strb	r1, [r7, #1]
                len_str[2] = '0' + (recv_len % 10);
 8000dea:	210a      	movs	r1, #10
 8000dec:	f7ff fa24 	bl	8000238 <__aeabi_uidivmod>
                len_str[3] = 0;
 8000df0:	2500      	movs	r5, #0
                len_str[2] = '0' + (recv_len % 10);
 8000df2:	3130      	adds	r1, #48	@ 0x30
                Print(len_str);
 8000df4:	0038      	movs	r0, r7
                len_str[2] = '0' + (recv_len % 10);
 8000df6:	70b9      	strb	r1, [r7, #2]
                len_str[3] = 0;
 8000df8:	70fd      	strb	r5, [r7, #3]
                Print(len_str);
 8000dfa:	f7ff fdd9 	bl	80009b0 <Print>
                Print(" bytes)\r\n");
 8000dfe:	4827      	ldr	r0, [pc, #156]	@ (8000e9c <main+0x28c>)
 8000e00:	f7ff fdd6 	bl	80009b0 <Print>
                Print("Request: ");
 8000e04:	4826      	ldr	r0, [pc, #152]	@ (8000ea0 <main+0x290>)
 8000e06:	f7ff fdd3 	bl	80009b0 <Print>
                for(int i = 0; i < recv_len && i < 50 && buf[i] != '\r'; i++) {
 8000e0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <main+0x294>)
 8000e0c:	af48      	add	r7, sp, #288	@ 0x120
 8000e0e:	5d5b      	ldrb	r3, [r3, r5]
 8000e10:	2b0d      	cmp	r3, #13
 8000e12:	d00a      	beq.n	8000e2a <main+0x21a>
                    char c = buf[i];
 8000e14:	703b      	strb	r3, [r7, #0]
                    HAL_UART_Transmit(&uart, (uint8_t*)&c, 1, 100);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2364      	movs	r3, #100	@ 0x64
 8000e1a:	0039      	movs	r1, r7
 8000e1c:	4822      	ldr	r0, [pc, #136]	@ (8000ea8 <main+0x298>)
 8000e1e:	f001 fe43 	bl	8002aa8 <HAL_UART_Transmit>
                for(int i = 0; i < recv_len && i < 50 && buf[i] != '\r'; i++) {
 8000e22:	9b02      	ldr	r3, [sp, #8]
 8000e24:	3501      	adds	r5, #1
 8000e26:	429d      	cmp	r5, r3
 8000e28:	db1c      	blt.n	8000e64 <main+0x254>
                Print("\r\n");
 8000e2a:	4819      	ldr	r0, [pc, #100]	@ (8000e90 <main+0x280>)
 8000e2c:	f7ff fdc0 	bl	80009b0 <Print>
                snprintf(body, sizeof(body),
 8000e30:	2180      	movs	r1, #128	@ 0x80
 8000e32:	ad08      	add	r5, sp, #32
 8000e34:	0033      	movs	r3, r6
 8000e36:	4a1d      	ldr	r2, [pc, #116]	@ (8000eac <main+0x29c>)
 8000e38:	0049      	lsls	r1, r1, #1
 8000e3a:	0028      	movs	r0, r5
 8000e3c:	f001 ff2c 	bl	8002c98 <sniprintf>
                int contentLength = strlen(body);
 8000e40:	0028      	movs	r0, r5
 8000e42:	f7ff f961 	bl	8000108 <strlen>
                snprintf(response, sizeof(response),
 8000e46:	2180      	movs	r1, #128	@ 0x80
                int contentLength = strlen(body);
 8000e48:	0003      	movs	r3, r0
                snprintf(response, sizeof(response),
 8000e4a:	4a19      	ldr	r2, [pc, #100]	@ (8000eb0 <main+0x2a0>)
 8000e4c:	0089      	lsls	r1, r1, #2
 8000e4e:	0038      	movs	r0, r7
 8000e50:	9500      	str	r5, [sp, #0]
 8000e52:	f001 ff21 	bl	8002c98 <sniprintf>
                W5500_Send(response);
 8000e56:	0038      	movs	r0, r7
 8000e58:	f7ff fd14 	bl	8000884 <W5500_Send>
                HAL_Delay(100);
 8000e5c:	2064      	movs	r0, #100	@ 0x64
            HAL_Delay(50);
 8000e5e:	f000 f96f 	bl	8001140 <HAL_Delay>
 8000e62:	e764      	b.n	8000d2e <main+0x11e>
                for(int i = 0; i < recv_len && i < 50 && buf[i] != '\r'; i++) {
 8000e64:	2d32      	cmp	r5, #50	@ 0x32
 8000e66:	d1d0      	bne.n	8000e0a <main+0x1fa>
 8000e68:	e7df      	b.n	8000e2a <main+0x21a>
        } else if(status == SOCK_CLOSE_WAIT) {
 8000e6a:	281c      	cmp	r0, #28
 8000e6c:	d100      	bne.n	8000e70 <main+0x260>
 8000e6e:	e752      	b.n	8000d16 <main+0x106>
 8000e70:	e75d      	b.n	8000d2e <main+0x11e>
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	fffffcdc 	.word	0xfffffcdc
 8000e78:	08003610 	.word	0x08003610
 8000e7c:	00000ce4 	.word	0x00000ce4
 8000e80:	00000fff 	.word	0x00000fff
 8000e84:	26e978d5 	.word	0x26e978d5
 8000e88:	00418937 	.word	0x00418937
 8000e8c:	08003630 	.word	0x08003630
 8000e90:	08003656 	.word	0x08003656
 8000e94:	50000400 	.word	0x50000400
 8000e98:	0800363a 	.word	0x0800363a
 8000e9c:	0800364f 	.word	0x0800364f
 8000ea0:	08003659 	.word	0x08003659
 8000ea4:	20000078 	.word	0x20000078
 8000ea8:	20000154 	.word	0x20000154
 8000eac:	08003663 	.word	0x08003663
 8000eb0:	080036e4 	.word	0x080036e4

08000eb4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <HAL_MspInit+0x18>)
 8000eb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	2280      	movs	r2, #128	@ 0x80
 8000ec0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000ec2:	0552      	lsls	r2, r2, #21
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec8:	4770      	bx	lr
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	0004      	movs	r4, r0
 8000ed4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	2214      	movs	r2, #20
 8000ed8:	2100      	movs	r1, #0
 8000eda:	a801      	add	r0, sp, #4
 8000edc:	f001 ff12 	bl	8002d04 <memset>
  if(hadc->Instance==ADC1)
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <HAL_ADC_MspInit+0x48>)
 8000ee2:	6822      	ldr	r2, [r4, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d115      	bne.n	8000f14 <HAL_ADC_MspInit+0x44>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <HAL_ADC_MspInit+0x4c>)
 8000eec:	0092      	lsls	r2, r2, #2
 8000eee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    PA0-CK_IN     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4311      	orrs	r1, r2
 8000efe:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4013      	ands	r3, r2
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0a:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f0c:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f000 fc54 	bl	80017bc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f14:	b006      	add	sp, #24
 8000f16:	bd10      	pop	{r4, pc}
 8000f18:	40012400 	.word	0x40012400
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f20:	b510      	push	{r4, lr}
 8000f22:	0004      	movs	r4, r0
 8000f24:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	2214      	movs	r2, #20
 8000f28:	2100      	movs	r1, #0
 8000f2a:	a801      	add	r0, sp, #4
 8000f2c:	f001 feea 	bl	8002d04 <memset>
  if(hspi->Instance==SPI1)
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <HAL_SPI_MspInit+0x50>)
 8000f32:	6822      	ldr	r2, [r4, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d118      	bne.n	8000f6a <HAL_SPI_MspInit+0x4a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f38:	2280      	movs	r2, #128	@ 0x80
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <HAL_SPI_MspInit+0x54>)
 8000f3c:	0152      	lsls	r2, r2, #5
 8000f3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f42:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f52:	400b      	ands	r3, r1
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f58:	23e0      	movs	r3, #224	@ 0xe0
 8000f5a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	3bde      	subs	r3, #222	@ 0xde
 8000f5e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f000 fc29 	bl	80017bc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f6a:	b006      	add	sp, #24
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	0004      	movs	r4, r0
 8000f7c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	2214      	movs	r2, #20
 8000f80:	2100      	movs	r1, #0
 8000f82:	a801      	add	r0, sp, #4
 8000f84:	f001 febe 	bl	8002d04 <memset>
  if(huart->Instance==USART2)
 8000f88:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <HAL_UART_MspInit+0x54>)
 8000f8a:	6822      	ldr	r2, [r4, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d11b      	bne.n	8000fc8 <HAL_UART_MspInit+0x50>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f90:	2280      	movs	r2, #128	@ 0x80
 8000f92:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <HAL_UART_MspInit+0x58>)
 8000f94:	0292      	lsls	r2, r2, #10
 8000f96:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000faa:	400b      	ands	r3, r1
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000fb0:	23c0      	movs	r3, #192	@ 0xc0
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	185b      	adds	r3, r3, r1
 8000fbc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000fbe:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000fc2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f000 fbfa 	bl	80017bc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fc8:	b006      	add	sp, #24
 8000fca:	bd10      	pop	{r4, pc}
 8000fcc:	40004400 	.word	0x40004400
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler>

08000fd6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler>

08000fd8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fde:	f000 f89d 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe2:	bd10      	pop	{r4, pc}

08000fe4 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	490b      	ldr	r1, [pc, #44]	@ (8001014 <_sbrk+0x30>)
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8001018 <_sbrk+0x34>)
{
 8000fe8:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fea:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	490b      	ldr	r1, [pc, #44]	@ (800101c <_sbrk+0x38>)
{
 8000fee:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000ff0:	6808      	ldr	r0, [r1, #0]
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d101      	bne.n	8000ffa <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8000ff6:	480a      	ldr	r0, [pc, #40]	@ (8001020 <_sbrk+0x3c>)
 8000ff8:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	6808      	ldr	r0, [r1, #0]
 8000ffc:	18c3      	adds	r3, r0, r3
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d906      	bls.n	8001010 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001002:	f001 fe87 	bl	8002d14 <__errno>
 8001006:	230c      	movs	r3, #12
 8001008:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800100a:	2001      	movs	r0, #1
 800100c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800100e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001010:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8001012:	e7fc      	b.n	800100e <_sbrk+0x2a>
 8001014:	00000200 	.word	0x00000200
 8001018:	20000800 	.word	0x20000800
 800101c:	20000234 	.word	0x20000234
 8001020:	20000388 	.word	0x20000388

08001024 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	4770      	bx	lr
	...

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001028:	4813      	ldr	r0, [pc, #76]	@ (8001078 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800102a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800102c:	f7ff fffa 	bl	8001024 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001030:	4812      	ldr	r0, [pc, #72]	@ (800107c <LoopForever+0x6>)
    LDR R1, [R0]
 8001032:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001034:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <LoopForever+0xa>)
    CMP R1, R2
 8001038:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800103a:	d105      	bne.n	8001048 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 800103c:	4811      	ldr	r0, [pc, #68]	@ (8001084 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800103e:	4912      	ldr	r1, [pc, #72]	@ (8001088 <LoopForever+0x12>)
    STR R1, [R0]
 8001040:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001042:	4812      	ldr	r0, [pc, #72]	@ (800108c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001044:	4912      	ldr	r1, [pc, #72]	@ (8001090 <LoopForever+0x1a>)
    STR R1, [R0]
 8001046:	6001      	str	r1, [r0, #0]

08001048 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001048:	4812      	ldr	r0, [pc, #72]	@ (8001094 <LoopForever+0x1e>)
  ldr r1, =_edata
 800104a:	4913      	ldr	r1, [pc, #76]	@ (8001098 <LoopForever+0x22>)
  ldr r2, =_sidata
 800104c:	4a13      	ldr	r2, [pc, #76]	@ (800109c <LoopForever+0x26>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a10      	ldr	r2, [pc, #64]	@ (80010a0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001060:	4c10      	ldr	r4, [pc, #64]	@ (80010a4 <LoopForever+0x2e>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106e:	f001 fe57 	bl	8002d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fdcd 	bl	8000c10 <main>

08001076 <LoopForever>:

LoopForever:
    b LoopForever
 8001076:	e7fe      	b.n	8001076 <LoopForever>
   ldr   r0, =_estack
 8001078:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 800107c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001080:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001084:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001088:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800108c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001090:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800109c:	080037b0 	.word	0x080037b0
  ldr r2, =_sbss
 80010a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010a4:	20000384 	.word	0x20000384

080010a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC1_COMP_IRQHandler>
	...

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b570      	push	{r4, r5, r6, lr}
 80010ae:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	20fa      	movs	r0, #250	@ 0xfa
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <HAL_InitTick+0x3c>)
 80010b4:	0080      	lsls	r0, r0, #2
 80010b6:	7819      	ldrb	r1, [r3, #0]
 80010b8:	f7ff f838 	bl	800012c <__udivsi3>
 80010bc:	4c0b      	ldr	r4, [pc, #44]	@ (80010ec <HAL_InitTick+0x40>)
 80010be:	0001      	movs	r1, r0
 80010c0:	6820      	ldr	r0, [r4, #0]
 80010c2:	f7ff f833 	bl	800012c <__udivsi3>
 80010c6:	f000 fb5f 	bl	8001788 <HAL_SYSTICK_Config>
 80010ca:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80010cc:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ce:	2c00      	cmp	r4, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	2d03      	cmp	r5, #3
 80010d4:	d807      	bhi.n	80010e6 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d6:	3802      	subs	r0, #2
 80010d8:	0022      	movs	r2, r4
 80010da:	0029      	movs	r1, r5
 80010dc:	f000 fb2a 	bl	8001734 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	0020      	movs	r0, r4
 80010e2:	4b03      	ldr	r3, [pc, #12]	@ (80010f0 <HAL_InitTick+0x44>)
 80010e4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
 80010e8:	20000004 	.word	0x20000004
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000008 	.word	0x20000008

080010f4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010f4:	2340      	movs	r3, #64	@ 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	@ (8001118 <HAL_Init+0x24>)
{
 80010f8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010fa:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fc:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010fe:	430b      	orrs	r3, r1
 8001100:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001102:	f7ff ffd3 	bl	80010ac <HAL_InitTick>
 8001106:	1e04      	subs	r4, r0, #0
 8001108:	d103      	bne.n	8001112 <HAL_Init+0x1e>
    HAL_MspInit();
 800110a:	f7ff fed3 	bl	8000eb4 <HAL_MspInit>
}
 800110e:	0020      	movs	r0, r4
 8001110:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001112:	2401      	movs	r4, #1
 8001114:	e7fb      	b.n	800110e <HAL_Init+0x1a>
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	40022000 	.word	0x40022000

0800111c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800111c:	4a03      	ldr	r2, [pc, #12]	@ (800112c <HAL_IncTick+0x10>)
 800111e:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <HAL_IncTick+0x14>)
 8001120:	6811      	ldr	r1, [r2, #0]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	185b      	adds	r3, r3, r1
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	4770      	bx	lr
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	20000238 	.word	0x20000238
 8001130:	20000004 	.word	0x20000004

08001134 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001134:	4b01      	ldr	r3, [pc, #4]	@ (800113c <HAL_GetTick+0x8>)
 8001136:	6818      	ldr	r0, [r3, #0]
}
 8001138:	4770      	bx	lr
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	20000238 	.word	0x20000238

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff fff6 	bl	8001134 <HAL_GetTick>
 8001148:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	1c63      	adds	r3, r4, #1
 800114c:	d002      	beq.n	8001154 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <HAL_Delay+0x20>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	1b40      	subs	r0, r0, r5
 800115a:	42a0      	cmp	r0, r4
 800115c:	d3fa      	bcc.n	8001154 <HAL_Delay+0x14>
  {
  }
}
 800115e:	bd70      	pop	{r4, r5, r6, pc}
 8001160:	20000004 	.word	0x20000004

08001164 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <ADC_DelayMicroSecond+0x24>)
{
 8001166:	b513      	push	{r0, r1, r4, lr}
 8001168:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800116a:	4908      	ldr	r1, [pc, #32]	@ (800118c <ADC_DelayMicroSecond+0x28>)
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	f7fe ffdd 	bl	800012c <__udivsi3>
 8001172:	4344      	muls	r4, r0
 8001174:	9401      	str	r4, [sp, #4]

  while (waitLoopIndex != 0U)
 8001176:	9b01      	ldr	r3, [sp, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d100      	bne.n	800117e <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  }
}
 800117c:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800117e:	9b01      	ldr	r3, [sp, #4]
 8001180:	3b01      	subs	r3, #1
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	e7f7      	b.n	8001176 <ADC_DelayMicroSecond+0x12>
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	20000000 	.word	0x20000000
 800118c:	000f4240 	.word	0x000f4240

08001190 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001190:	2204      	movs	r2, #4
 8001192:	6803      	ldr	r3, [r0, #0]
{
 8001194:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001196:	6899      	ldr	r1, [r3, #8]
{
 8001198:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800119a:	4211      	tst	r1, r2
 800119c:	d101      	bne.n	80011a2 <ADC_ConversionStop+0x12>
  return HAL_OK;
 800119e:	2000      	movs	r0, #0
}
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80011a2:	6899      	ldr	r1, [r3, #8]
 80011a4:	4211      	tst	r1, r2
 80011a6:	d006      	beq.n	80011b6 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 80011a8:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80011aa:	0792      	lsls	r2, r2, #30
 80011ac:	d403      	bmi.n	80011b6 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80011ae:	2210      	movs	r2, #16
 80011b0:	6899      	ldr	r1, [r3, #8]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80011b6:	f7ff ffbd 	bl	8001134 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80011ba:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 80011bc:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	4233      	tst	r3, r6
 80011c4:	d0eb      	beq.n	800119e <ADC_ConversionStop+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80011c6:	f7ff ffb5 	bl	8001134 <HAL_GetTick>
 80011ca:	1b40      	subs	r0, r0, r5
 80011cc:	280a      	cmp	r0, #10
 80011ce:	d9f6      	bls.n	80011be <ADC_ConversionStop+0x2e>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	4233      	tst	r3, r6
 80011d6:	d0f2      	beq.n	80011be <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d8:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011da:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011de:	4313      	orrs	r3, r2
 80011e0:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011e4:	4303      	orrs	r3, r0
 80011e6:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 80011e8:	e7da      	b.n	80011a0 <ADC_ConversionStop+0x10>

080011ea <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011ea:	2103      	movs	r1, #3
 80011ec:	6802      	ldr	r2, [r0, #0]
{
 80011ee:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011f0:	6893      	ldr	r3, [r2, #8]
{
 80011f2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011f4:	400b      	ands	r3, r1
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d001      	beq.n	80011fe <ADC_Disable+0x14>
  return HAL_OK;
 80011fa:	2000      	movs	r0, #0
}
 80011fc:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011fe:	6810      	ldr	r0, [r2, #0]
 8001200:	4218      	tst	r0, r3
 8001202:	d0fa      	beq.n	80011fa <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001204:	2005      	movs	r0, #5
 8001206:	6895      	ldr	r5, [r2, #8]
 8001208:	4005      	ands	r5, r0
 800120a:	2d01      	cmp	r5, #1
 800120c:	d11b      	bne.n	8001246 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800120e:	2302      	movs	r3, #2
 8001210:	6890      	ldr	r0, [r2, #8]
 8001212:	4303      	orrs	r3, r0
 8001214:	6093      	str	r3, [r2, #8]
 8001216:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8001218:	f7ff ff8c 	bl	8001134 <HAL_GetTick>
 800121c:	0006      	movs	r6, r0
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	422b      	tst	r3, r5
 8001224:	d0e9      	beq.n	80011fa <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001226:	f7ff ff85 	bl	8001134 <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	280a      	cmp	r0, #10
 800122e:	d9f6      	bls.n	800121e <ADC_Disable+0x34>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	422b      	tst	r3, r5
 8001236:	d0f2      	beq.n	800121e <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001238:	2310      	movs	r3, #16
 800123a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800123c:	4313      	orrs	r3, r2
 800123e:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001240:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001242:	432b      	orrs	r3, r5
 8001244:	e005      	b.n	8001252 <ADC_Disable+0x68>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001246:	2210      	movs	r2, #16
 8001248:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800124a:	430a      	orrs	r2, r1
 800124c:	6562      	str	r2, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001250:	4313      	orrs	r3, r2
      return HAL_ERROR;
 8001252:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001254:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8001256:	e7d1      	b.n	80011fc <ADC_Disable+0x12>

08001258 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001258:	2103      	movs	r1, #3
 800125a:	6803      	ldr	r3, [r0, #0]
{
 800125c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800125e:	689a      	ldr	r2, [r3, #8]
{
 8001260:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001262:	400a      	ands	r2, r1
 8001264:	2a01      	cmp	r2, #1
 8001266:	d104      	bne.n	8001272 <ADC_Enable+0x1a>
 8001268:	6819      	ldr	r1, [r3, #0]
 800126a:	4211      	tst	r1, r2
 800126c:	d001      	beq.n	8001272 <ADC_Enable+0x1a>
  return HAL_OK;
 800126e:	2000      	movs	r0, #0
}
 8001270:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001272:	6899      	ldr	r1, [r3, #8]
 8001274:	4a15      	ldr	r2, [pc, #84]	@ (80012cc <ADC_Enable+0x74>)
 8001276:	4211      	tst	r1, r2
 8001278:	d009      	beq.n	800128e <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127a:	2310      	movs	r3, #16
 800127c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800127e:	4313      	orrs	r3, r2
 8001280:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001282:	2301      	movs	r3, #1
 8001284:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001286:	4313      	orrs	r3, r2
      return HAL_ERROR;
 8001288:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800128a:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 800128c:	e7f0      	b.n	8001270 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 800128e:	2501      	movs	r5, #1
 8001290:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001292:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8001294:	432a      	orrs	r2, r5
 8001296:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001298:	f7ff ff64 	bl	8001164 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 800129c:	f7ff ff4a 	bl	8001134 <HAL_GetTick>
 80012a0:	0006      	movs	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	422b      	tst	r3, r5
 80012a8:	d1e1      	bne.n	800126e <ADC_Enable+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012aa:	f7ff ff43 	bl	8001134 <HAL_GetTick>
 80012ae:	1b80      	subs	r0, r0, r6
 80012b0:	280a      	cmp	r0, #10
 80012b2:	d9f6      	bls.n	80012a2 <ADC_Enable+0x4a>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	422b      	tst	r3, r5
 80012ba:	d1f2      	bne.n	80012a2 <ADC_Enable+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012bc:	2310      	movs	r3, #16
 80012be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012c0:	4313      	orrs	r3, r2
 80012c2:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012c6:	432b      	orrs	r3, r5
 80012c8:	e7de      	b.n	8001288 <ADC_Enable+0x30>
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	80000017 	.word	0x80000017

080012d0 <HAL_ADC_Init>:
{
 80012d0:	b570      	push	{r4, r5, r6, lr}
 80012d2:	1e04      	subs	r4, r0, #0
  if (hadc == NULL)
 80012d4:	d016      	beq.n	8001304 <HAL_ADC_Init+0x34>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d105      	bne.n	80012e8 <HAL_ADC_Init+0x18>
    hadc->Lock = HAL_UNLOCKED;
 80012dc:	0002      	movs	r2, r0
 80012de:	3250      	adds	r2, #80	@ 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 80012e0:	6583      	str	r3, [r0, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 80012e2:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80012e4:	f7ff fdf4 	bl	8000ed0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012ea:	06db      	lsls	r3, r3, #27
 80012ec:	d403      	bmi.n	80012f6 <HAL_ADC_Init+0x26>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012f2:	0752      	lsls	r2, r2, #29
 80012f4:	d508      	bpl.n	8001308 <HAL_ADC_Init+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f6:	2310      	movs	r3, #16
 80012f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 80012fa:	3450      	adds	r4, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fc:	4313      	orrs	r3, r2
 80012fe:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hadc);
 8001300:	2300      	movs	r3, #0
 8001302:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8001304:	2001      	movs	r0, #1
}
 8001306:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8001308:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800130a:	4a56      	ldr	r2, [pc, #344]	@ (8001464 <HAL_ADC_Init+0x194>)
 800130c:	4011      	ands	r1, r2
 800130e:	3206      	adds	r2, #6
 8001310:	32ff      	adds	r2, #255	@ 0xff
 8001312:	430a      	orrs	r2, r1
 8001314:	6562      	str	r2, [r4, #84]	@ 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001316:	2203      	movs	r2, #3
 8001318:	6899      	ldr	r1, [r3, #8]
 800131a:	4011      	ands	r1, r2
 800131c:	4a52      	ldr	r2, [pc, #328]	@ (8001468 <HAL_ADC_Init+0x198>)
 800131e:	2901      	cmp	r1, #1
 8001320:	d102      	bne.n	8001328 <HAL_ADC_Init+0x58>
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	4208      	tst	r0, r1
 8001326:	d119      	bne.n	800135c <HAL_ADC_Init+0x8c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001328:	2580      	movs	r5, #128	@ 0x80
 800132a:	6861      	ldr	r1, [r4, #4]
 800132c:	05ed      	lsls	r5, r5, #23
 800132e:	0048      	lsls	r0, r1, #1
 8001330:	0840      	lsrs	r0, r0, #1
 8001332:	42a8      	cmp	r0, r5
 8001334:	d003      	beq.n	800133e <HAL_ADC_Init+0x6e>
 8001336:	2080      	movs	r0, #128	@ 0x80
 8001338:	0600      	lsls	r0, r0, #24
 800133a:	4281      	cmp	r1, r0
 800133c:	d176      	bne.n	800142c <HAL_ADC_Init+0x15c>
 800133e:	6918      	ldr	r0, [r3, #16]
 8001340:	0080      	lsls	r0, r0, #2
 8001342:	0880      	lsrs	r0, r0, #2
 8001344:	6118      	str	r0, [r3, #16]
 8001346:	6918      	ldr	r0, [r3, #16]
 8001348:	4301      	orrs	r1, r0
 800134a:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800134c:	2018      	movs	r0, #24
 800134e:	68d9      	ldr	r1, [r3, #12]
 8001350:	4381      	bics	r1, r0
 8001352:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001354:	68d9      	ldr	r1, [r3, #12]
 8001356:	68a0      	ldr	r0, [r4, #8]
 8001358:	4301      	orrs	r1, r0
 800135a:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800135c:	6811      	ldr	r1, [r2, #0]
 800135e:	4843      	ldr	r0, [pc, #268]	@ (800146c <HAL_ADC_Init+0x19c>)
 8001360:	4001      	ands	r1, r0
 8001362:	6011      	str	r1, [r2, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001366:	6810      	ldr	r0, [r2, #0]
 8001368:	0649      	lsls	r1, r1, #25
 800136a:	4301      	orrs	r1, r0
 800136c:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800136e:	2280      	movs	r2, #128	@ 0x80
 8001370:	6899      	ldr	r1, [r3, #8]
 8001372:	0552      	lsls	r2, r2, #21
 8001374:	4211      	tst	r1, r2
 8001376:	d102      	bne.n	800137e <HAL_ADC_Init+0xae>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001378:	6899      	ldr	r1, [r3, #8]
 800137a:	430a      	orrs	r2, r1
 800137c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	493b      	ldr	r1, [pc, #236]	@ (8001470 <HAL_ADC_Init+0x1a0>)
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001382:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001384:	400a      	ands	r2, r1
 8001386:	60da      	str	r2, [r3, #12]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001388:	1c62      	adds	r2, r4, #1
 800138a:	7fd1      	ldrb	r1, [r2, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800138c:	68e2      	ldr	r2, [r4, #12]
 800138e:	68d8      	ldr	r0, [r3, #12]
 8001390:	432a      	orrs	r2, r5
 8001392:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001394:	69a0      	ldr	r0, [r4, #24]
 8001396:	0380      	lsls	r0, r0, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001398:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800139a:	69e0      	ldr	r0, [r4, #28]
 800139c:	03c0      	lsls	r0, r0, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800139e:	4302      	orrs	r2, r0
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013a0:	0348      	lsls	r0, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013a2:	4302      	orrs	r2, r0
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80013a4:	0020      	movs	r0, r4
 80013a6:	302c      	adds	r0, #44	@ 0x2c
 80013a8:	7800      	ldrb	r0, [r0, #0]
 80013aa:	0040      	lsls	r0, r0, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013ac:	4302      	orrs	r2, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80013ae:	6920      	ldr	r0, [r4, #16]
 80013b0:	3802      	subs	r0, #2
 80013b2:	4245      	negs	r5, r0
 80013b4:	4168      	adcs	r0, r5
 80013b6:	0080      	lsls	r0, r0, #2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013b8:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ba:	20c2      	movs	r0, #194	@ 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013bc:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80013c0:	30ff      	adds	r0, #255	@ 0xff
 80013c2:	4282      	cmp	r2, r0
 80013c4:	d004      	beq.n	80013d0 <HAL_ADC_Init+0x100>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80013c6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80013c8:	68d8      	ldr	r0, [r3, #12]
 80013ca:	432a      	orrs	r2, r5
 80013cc:	4302      	orrs	r2, r0
 80013ce:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013d0:	1ca2      	adds	r2, r4, #2
 80013d2:	7fd2      	ldrb	r2, [r2, #31]
 80013d4:	2a01      	cmp	r2, #1
 80013d6:	d106      	bne.n	80013e6 <HAL_ADC_Init+0x116>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80013d8:	2900      	cmp	r1, #0
 80013da:	d133      	bne.n	8001444 <HAL_ADC_Init+0x174>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80013dc:	2280      	movs	r2, #128	@ 0x80
 80013de:	68d9      	ldr	r1, [r3, #12]
 80013e0:	0252      	lsls	r2, r2, #9
 80013e2:	430a      	orrs	r2, r1
 80013e4:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80013e6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80013e8:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 80013ea:	2901      	cmp	r1, #1
 80013ec:	d132      	bne.n	8001454 <HAL_ADC_Init+0x184>
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80013ee:	4821      	ldr	r0, [pc, #132]	@ (8001474 <HAL_ADC_Init+0x1a4>)
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80013f0:	6c65      	ldr	r5, [r4, #68]	@ 0x44
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80013f2:	4002      	ands	r2, r0
 80013f4:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80013f6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80013f8:	6918      	ldr	r0, [r3, #16]
 80013fa:	432a      	orrs	r2, r5
                              hadc->Init.Oversample.RightBitShift             |
 80013fc:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80013fe:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001400:	4302      	orrs	r2, r0
 8001402:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	4311      	orrs	r1, r2
 8001408:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800140a:	2107      	movs	r1, #7
 800140c:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800140e:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001410:	438a      	bics	r2, r1
 8001412:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001418:	430a      	orrs	r2, r1
 800141a:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 800141c:	2303      	movs	r3, #3
  ADC_CLEAR_ERRORCODE(hadc);
 800141e:	65a0      	str	r0, [r4, #88]	@ 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8001420:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001422:	439a      	bics	r2, r3
 8001424:	3b02      	subs	r3, #2
 8001426:	4313      	orrs	r3, r2
 8001428:	6563      	str	r3, [r4, #84]	@ 0x54
  return HAL_OK;
 800142a:	e76c      	b.n	8001306 <HAL_ADC_Init+0x36>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800142c:	6918      	ldr	r0, [r3, #16]
 800142e:	4d12      	ldr	r5, [pc, #72]	@ (8001478 <HAL_ADC_Init+0x1a8>)
 8001430:	0080      	lsls	r0, r0, #2
 8001432:	0880      	lsrs	r0, r0, #2
 8001434:	6118      	str	r0, [r3, #16]
 8001436:	6810      	ldr	r0, [r2, #0]
 8001438:	4028      	ands	r0, r5
 800143a:	6010      	str	r0, [r2, #0]
 800143c:	6810      	ldr	r0, [r2, #0]
 800143e:	4301      	orrs	r1, r0
 8001440:	6011      	str	r1, [r2, #0]
 8001442:	e783      	b.n	800134c <HAL_ADC_Init+0x7c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001444:	2120      	movs	r1, #32
 8001446:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8001448:	4301      	orrs	r1, r0
 800144a:	6561      	str	r1, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800144e:	430a      	orrs	r2, r1
 8001450:	65a2      	str	r2, [r4, #88]	@ 0x58
 8001452:	e7c8      	b.n	80013e6 <HAL_ADC_Init+0x116>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001454:	2101      	movs	r1, #1
 8001456:	420a      	tst	r2, r1
 8001458:	d0d7      	beq.n	800140a <HAL_ADC_Init+0x13a>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	438a      	bics	r2, r1
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	e7d3      	b.n	800140a <HAL_ADC_Init+0x13a>
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	fffffefd 	.word	0xfffffefd
 8001468:	40012708 	.word	0x40012708
 800146c:	fdffffff 	.word	0xfdffffff
 8001470:	fffe0219 	.word	0xfffe0219
 8001474:	fffffc03 	.word	0xfffffc03
 8001478:	ffc3ffff 	.word	0xffc3ffff

0800147c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800147c:	6803      	ldr	r3, [r0, #0]
{
 800147e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001480:	689b      	ldr	r3, [r3, #8]
{
 8001482:	0004      	movs	r4, r0
    __HAL_LOCK(hadc);
 8001484:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001486:	075b      	lsls	r3, r3, #29
 8001488:	d41a      	bmi.n	80014c0 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800148a:	0025      	movs	r5, r4
 800148c:	3550      	adds	r5, #80	@ 0x50
 800148e:	782b      	ldrb	r3, [r5, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d015      	beq.n	80014c0 <HAL_ADC_Start+0x44>
 8001494:	2301      	movs	r3, #1
 8001496:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001498:	69e3      	ldr	r3, [r4, #28]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d111      	bne.n	80014c2 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800149e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80014a2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80014a4:	401a      	ands	r2, r3
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014ac:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80014ae:	6563      	str	r3, [r4, #84]	@ 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80014b0:	65a0      	str	r0, [r4, #88]	@ 0x58
      __HAL_UNLOCK(hadc);
 80014b2:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80014b8:	6899      	ldr	r1, [r3, #8]
 80014ba:	3a18      	subs	r2, #24
 80014bc:	430a      	orrs	r2, r1
 80014be:	609a      	str	r2, [r3, #8]
}
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80014c2:	0020      	movs	r0, r4
 80014c4:	f7ff fec8 	bl	8001258 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d0e8      	beq.n	800149e <HAL_ADC_Start+0x22>
 80014cc:	e7f8      	b.n	80014c0 <HAL_ADC_Start+0x44>
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	fffff0fe 	.word	0xfffff0fe

080014d4 <HAL_ADC_Stop>:
{
 80014d4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80014d6:	0006      	movs	r6, r0
 80014d8:	3650      	adds	r6, #80	@ 0x50
 80014da:	7833      	ldrb	r3, [r6, #0]
{
 80014dc:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80014de:	2002      	movs	r0, #2
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d012      	beq.n	800150a <HAL_ADC_Stop+0x36>
 80014e4:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 80014e6:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 80014e8:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80014ea:	f7ff fe51 	bl	8001190 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80014ee:	2800      	cmp	r0, #0
 80014f0:	d109      	bne.n	8001506 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 80014f2:	0020      	movs	r0, r4
 80014f4:	f7ff fe79 	bl	80011ea <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80014f8:	2800      	cmp	r0, #0
 80014fa:	d104      	bne.n	8001506 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 80014fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80014fe:	4a03      	ldr	r2, [pc, #12]	@ (800150c <HAL_ADC_Stop+0x38>)
 8001500:	4013      	ands	r3, r2
 8001502:	431d      	orrs	r5, r3
 8001504:	6565      	str	r5, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8001506:	2300      	movs	r3, #0
 8001508:	7033      	strb	r3, [r6, #0]
}
 800150a:	bd70      	pop	{r4, r5, r6, pc}
 800150c:	fffffefe 	.word	0xfffffefe

08001510 <HAL_ADC_PollForConversion>:
{
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001512:	6945      	ldr	r5, [r0, #20]
{
 8001514:	0004      	movs	r4, r0
 8001516:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001518:	2d08      	cmp	r5, #8
 800151a:	d00d      	beq.n	8001538 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800151c:	6803      	ldr	r3, [r0, #0]
 800151e:	2001      	movs	r0, #1
 8001520:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001522:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001524:	4203      	tst	r3, r0
 8001526:	d007      	beq.n	8001538 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001528:	2320      	movs	r3, #32
 800152a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      __HAL_UNLOCK(hadc);
 800152c:	3450      	adds	r4, #80	@ 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152e:	4313      	orrs	r3, r2
 8001530:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8001532:	2300      	movs	r3, #0
 8001534:	7023      	strb	r3, [r4, #0]
}
 8001536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8001538:	f7ff fdfc 	bl	8001134 <HAL_GetTick>
 800153c:	0007      	movs	r7, r0
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4215      	tst	r5, r2
 8001544:	d023      	beq.n	800158e <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001546:	2280      	movs	r2, #128	@ 0x80
 8001548:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	430a      	orrs	r2, r1
 800154e:	6562      	str	r2, [r4, #84]	@ 0x54
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001550:	22c0      	movs	r2, #192	@ 0xc0
 8001552:	68d9      	ldr	r1, [r3, #12]
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	4211      	tst	r1, r2
 8001558:	d114      	bne.n	8001584 <HAL_ADC_PollForConversion+0x74>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800155a:	1c62      	adds	r2, r4, #1
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800155c:	7fd2      	ldrb	r2, [r2, #31]
 800155e:	2a00      	cmp	r2, #0
 8001560:	d110      	bne.n	8001584 <HAL_ADC_PollForConversion+0x74>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	0712      	lsls	r2, r2, #28
 8001566:	d50d      	bpl.n	8001584 <HAL_ADC_PollForConversion+0x74>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	0752      	lsls	r2, r2, #29
 800156c:	d427      	bmi.n	80015be <HAL_ADC_PollForConversion+0xae>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800156e:	210c      	movs	r1, #12
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	438a      	bics	r2, r1
 8001574:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8001576:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8001578:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_ADC_PollForConversion+0xc8>)
 800157a:	4011      	ands	r1, r2
 800157c:	3204      	adds	r2, #4
 800157e:	32ff      	adds	r2, #255	@ 0xff
 8001580:	430a      	orrs	r2, r1
 8001582:	6562      	str	r2, [r4, #84]	@ 0x54
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001584:	69a2      	ldr	r2, [r4, #24]
 8001586:	2a00      	cmp	r2, #0
 8001588:	d022      	beq.n	80015d0 <HAL_ADC_PollForConversion+0xc0>
  return HAL_OK;
 800158a:	2000      	movs	r0, #0
 800158c:	e7d3      	b.n	8001536 <HAL_ADC_PollForConversion+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800158e:	1c72      	adds	r2, r6, #1
 8001590:	d0d6      	beq.n	8001540 <HAL_ADC_PollForConversion+0x30>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001592:	2e00      	cmp	r6, #0
 8001594:	d10d      	bne.n	80015b2 <HAL_ADC_PollForConversion+0xa2>
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001596:	002a      	movs	r2, r5
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	401a      	ands	r2, r3
 800159e:	421d      	tst	r5, r3
 80015a0:	d1cd      	bne.n	800153e <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015a2:	2304      	movs	r3, #4
 80015a4:	6d61      	ldr	r1, [r4, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 80015a6:	3450      	adds	r4, #80	@ 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 80015ac:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80015ae:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 80015b0:	e7c1      	b.n	8001536 <HAL_ADC_PollForConversion+0x26>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015b2:	f7ff fdbf 	bl	8001134 <HAL_GetTick>
 80015b6:	1bc0      	subs	r0, r0, r7
 80015b8:	42b0      	cmp	r0, r6
 80015ba:	d8ec      	bhi.n	8001596 <HAL_ADC_PollForConversion+0x86>
 80015bc:	e7bf      	b.n	800153e <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015be:	2220      	movs	r2, #32
 80015c0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80015c2:	430a      	orrs	r2, r1
 80015c4:	6562      	str	r2, [r4, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c6:	2201      	movs	r2, #1
 80015c8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80015ca:	430a      	orrs	r2, r1
 80015cc:	65a2      	str	r2, [r4, #88]	@ 0x58
 80015ce:	e7d9      	b.n	8001584 <HAL_ADC_PollForConversion+0x74>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015d0:	220c      	movs	r2, #12
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e7d9      	b.n	800158a <HAL_ADC_PollForConversion+0x7a>
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	fffffefe 	.word	0xfffffefe

080015dc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80015dc:	6803      	ldr	r3, [r0, #0]
 80015de:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_ADC_ConfigChannel>:
{
 80015e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80015e6:	0004      	movs	r4, r0
 80015e8:	3450      	adds	r4, #80	@ 0x50
 80015ea:	7822      	ldrb	r2, [r4, #0]
{
 80015ec:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 80015ee:	2002      	movs	r0, #2
 80015f0:	2a01      	cmp	r2, #1
 80015f2:	d00b      	beq.n	800160c <HAL_ADC_ConfigChannel+0x28>
 80015f4:	3801      	subs	r0, #1
 80015f6:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	6895      	ldr	r5, [r2, #8]
 80015fc:	076d      	lsls	r5, r5, #29
 80015fe:	d506      	bpl.n	800160e <HAL_ADC_ConfigChannel+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001600:	2220      	movs	r2, #32
 8001602:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001604:	430a      	orrs	r2, r1
 8001606:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8001608:	2300      	movs	r3, #0
 800160a:	7023      	strb	r3, [r4, #0]
}
 800160c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	2680      	movs	r6, #128	@ 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001612:	680d      	ldr	r5, [r1, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8001614:	4f19      	ldr	r7, [pc, #100]	@ (800167c <HAL_ADC_ConfigChannel+0x98>)
 8001616:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001618:	0368      	lsls	r0, r5, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800161a:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800161c:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800161e:	402b      	ands	r3, r5
 8001620:	02b6      	lsls	r6, r6, #10
  if (sConfig->Rank != ADC_RANK_NONE)
 8001622:	42b9      	cmp	r1, r7
 8001624:	d018      	beq.n	8001658 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001626:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001628:	4301      	orrs	r1, r0
 800162a:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_ADC_ConfigChannel+0x5e>
      ADC->CCR |= ADC_CCR_TSEN;
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	4a13      	ldr	r2, [pc, #76]	@ (8001680 <HAL_ADC_ConfigChannel+0x9c>)
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001638:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;
 800163a:	430b      	orrs	r3, r1
 800163c:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800163e:	f7ff fd91 	bl	8001164 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001642:	4235      	tst	r5, r6
 8001644:	d005      	beq.n	8001652 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;
 8001646:	2380      	movs	r3, #128	@ 0x80
 8001648:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <HAL_ADC_ConfigChannel+0x9c>)
 800164a:	03db      	lsls	r3, r3, #15
 800164c:	6811      	ldr	r1, [r2, #0]
 800164e:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001650:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8001652:	2000      	movs	r0, #0
 8001654:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001656:	e7d9      	b.n	800160c <HAL_ADC_ConfigChannel+0x28>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001658:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800165a:	4381      	bics	r1, r0
 800165c:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001662:	4a07      	ldr	r2, [pc, #28]	@ (8001680 <HAL_ADC_ConfigChannel+0x9c>)
 8001664:	4907      	ldr	r1, [pc, #28]	@ (8001684 <HAL_ADC_ConfigChannel+0xa0>)
 8001666:	6813      	ldr	r3, [r2, #0]
 8001668:	400b      	ands	r3, r1
 800166a:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800166c:	4235      	tst	r5, r6
 800166e:	d0f0      	beq.n	8001652 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001670:	4a03      	ldr	r2, [pc, #12]	@ (8001680 <HAL_ADC_ConfigChannel+0x9c>)
 8001672:	4905      	ldr	r1, [pc, #20]	@ (8001688 <HAL_ADC_ConfigChannel+0xa4>)
 8001674:	6813      	ldr	r3, [r2, #0]
 8001676:	400b      	ands	r3, r1
 8001678:	e7ea      	b.n	8001650 <HAL_ADC_ConfigChannel+0x6c>
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	00001001 	.word	0x00001001
 8001680:	40012708 	.word	0x40012708
 8001684:	ff7fffff 	.word	0xff7fffff
 8001688:	ffbfffff 	.word	0xffbfffff

0800168c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 800168e:	0005      	movs	r5, r0
 8001690:	3550      	adds	r5, #80	@ 0x50
 8001692:	782b      	ldrb	r3, [r5, #0]
{
 8001694:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001696:	2002      	movs	r0, #2
 8001698:	2b01      	cmp	r3, #1
 800169a:	d047      	beq.n	800172c <HAL_ADCEx_Calibration_Start+0xa0>
 800169c:	2301      	movs	r3, #1

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800169e:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 80016a0:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	6898      	ldr	r0, [r3, #8]
 80016a6:	4010      	ands	r0, r2
 80016a8:	2801      	cmp	r0, #1
 80016aa:	d109      	bne.n	80016c0 <HAL_ADCEx_Calibration_Start+0x34>
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4202      	tst	r2, r0
 80016b0:	d006      	beq.n	80016c0 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b2:	2320      	movs	r3, #32
 80016b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80016b6:	4313      	orrs	r3, r2
 80016b8:	6563      	str	r3, [r4, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ba:	2300      	movs	r3, #0
 80016bc:	702b      	strb	r3, [r5, #0]

  /* Return function status */
  return tmp_hal_status;
 80016be:	e035      	b.n	800172c <HAL_ADCEx_Calibration_Start+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 80016c0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80016c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001730 <HAL_ADCEx_Calibration_Start+0xa4>)
 80016c4:	4011      	ands	r1, r2
 80016c6:	3206      	adds	r2, #6
 80016c8:	32ff      	adds	r2, #255	@ 0xff
 80016ca:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80016cc:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80016ce:	6562      	str	r2, [r4, #84]	@ 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80016d0:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	438a      	bics	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80016d8:	2280      	movs	r2, #128	@ 0x80
 80016da:	6899      	ldr	r1, [r3, #8]
 80016dc:	0612      	lsls	r2, r2, #24
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80016e2:	f7ff fd27 	bl	8001134 <HAL_GetTick>
 80016e6:	0007      	movs	r7, r0
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	db0b      	blt.n	8001708 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80016f0:	2103      	movs	r1, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80016f2:	68da      	ldr	r2, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80016f4:	400e      	ands	r6, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80016f6:	4316      	orrs	r6, r2
 80016f8:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80016fa:	2301      	movs	r3, #1
 80016fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fe:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001700:	438a      	bics	r2, r1
 8001702:	4313      	orrs	r3, r2
 8001704:	6563      	str	r3, [r4, #84]	@ 0x54
 8001706:	e7d8      	b.n	80016ba <HAL_ADCEx_Calibration_Start+0x2e>
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001708:	f7ff fd14 	bl	8001134 <HAL_GetTick>
 800170c:	1bc0      	subs	r0, r0, r7
 800170e:	280a      	cmp	r0, #10
 8001710:	d9ea      	bls.n	80016e8 <HAL_ADCEx_Calibration_Start+0x5c>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	dae6      	bge.n	80016e8 <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 800171a:	2312      	movs	r3, #18
 800171c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
          return HAL_ERROR;
 800171e:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 8001720:	439a      	bics	r2, r3
 8001722:	3b02      	subs	r3, #2
 8001724:	4313      	orrs	r3, r2
 8001726:	6563      	str	r3, [r4, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 8001728:	2300      	movs	r3, #0
 800172a:	702b      	strb	r3, [r5, #0]
}
 800172c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	fffffefd 	.word	0xfffffefd

08001734 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001734:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001736:	24ff      	movs	r4, #255	@ 0xff
 8001738:	2203      	movs	r2, #3
 800173a:	000b      	movs	r3, r1
 800173c:	0021      	movs	r1, r4
 800173e:	4002      	ands	r2, r0
 8001740:	00d2      	lsls	r2, r2, #3
 8001742:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001748:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800174a:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 800174c:	2800      	cmp	r0, #0
 800174e:	db0a      	blt.n	8001766 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001750:	24c0      	movs	r4, #192	@ 0xc0
 8001752:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <HAL_NVIC_SetPriority+0x4c>)
 8001754:	0880      	lsrs	r0, r0, #2
 8001756:	0080      	lsls	r0, r0, #2
 8001758:	1880      	adds	r0, r0, r2
 800175a:	00a4      	lsls	r4, r4, #2
 800175c:	5902      	ldr	r2, [r0, r4]
 800175e:	400a      	ands	r2, r1
 8001760:	4313      	orrs	r3, r2
 8001762:	5103      	str	r3, [r0, r4]
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001764:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001766:	220f      	movs	r2, #15
 8001768:	4010      	ands	r0, r2
 800176a:	3808      	subs	r0, #8
 800176c:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <HAL_NVIC_SetPriority+0x50>)
 800176e:	0880      	lsrs	r0, r0, #2
 8001770:	0080      	lsls	r0, r0, #2
 8001772:	1880      	adds	r0, r0, r2
 8001774:	69c2      	ldr	r2, [r0, #28]
 8001776:	4011      	ands	r1, r2
 8001778:	4319      	orrs	r1, r3
 800177a:	61c1      	str	r1, [r0, #28]
 800177c:	e7f2      	b.n	8001764 <HAL_NVIC_SetPriority+0x30>
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	2280      	movs	r2, #128	@ 0x80
 800178a:	1e43      	subs	r3, r0, #1
 800178c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	4293      	cmp	r3, r2
 8001792:	d20d      	bcs.n	80017b0 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001794:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001798:	4807      	ldr	r0, [pc, #28]	@ (80017b8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800179c:	6a03      	ldr	r3, [r0, #32]
 800179e:	0609      	lsls	r1, r1, #24
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	430b      	orrs	r3, r1
 80017a6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017b0:	4770      	bx	lr
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	e000e010 	.word	0xe000e010
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 80017bc:	2300      	movs	r3, #0
{
 80017be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c0:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017c2:	680a      	ldr	r2, [r1, #0]
 80017c4:	0014      	movs	r4, r2
 80017c6:	40dc      	lsrs	r4, r3
 80017c8:	d101      	bne.n	80017ce <HAL_GPIO_Init+0x12>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 80017ca:	b005      	add	sp, #20
 80017cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017ce:	2501      	movs	r5, #1
 80017d0:	0014      	movs	r4, r2
 80017d2:	409d      	lsls	r5, r3
 80017d4:	402c      	ands	r4, r5
 80017d6:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 80017d8:	422a      	tst	r2, r5
 80017da:	d100      	bne.n	80017de <HAL_GPIO_Init+0x22>
 80017dc:	e090      	b.n	8001900 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017de:	684a      	ldr	r2, [r1, #4]
 80017e0:	005f      	lsls	r7, r3, #1
 80017e2:	4694      	mov	ip, r2
 80017e4:	2203      	movs	r2, #3
 80017e6:	4664      	mov	r4, ip
 80017e8:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017ea:	2403      	movs	r4, #3
 80017ec:	40bc      	lsls	r4, r7
 80017ee:	43e4      	mvns	r4, r4
 80017f0:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f2:	1e54      	subs	r4, r2, #1
 80017f4:	2c01      	cmp	r4, #1
 80017f6:	d82e      	bhi.n	8001856 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80017f8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017fa:	9c01      	ldr	r4, [sp, #4]
 80017fc:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fe:	68cc      	ldr	r4, [r1, #12]
 8001800:	40bc      	lsls	r4, r7
 8001802:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001804:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001806:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001808:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180a:	43ac      	bics	r4, r5
 800180c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180e:	4664      	mov	r4, ip
 8001810:	0924      	lsrs	r4, r4, #4
 8001812:	4034      	ands	r4, r6
 8001814:	409c      	lsls	r4, r3
 8001816:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001818:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800181a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800181c:	9c01      	ldr	r4, [sp, #4]
 800181e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001820:	688c      	ldr	r4, [r1, #8]
 8001822:	40bc      	lsls	r4, r7
 8001824:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001826:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001828:	2a02      	cmp	r2, #2
 800182a:	d116      	bne.n	800185a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800182c:	2507      	movs	r5, #7
 800182e:	260f      	movs	r6, #15
 8001830:	401d      	ands	r5, r3
 8001832:	00ad      	lsls	r5, r5, #2
 8001834:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 8001836:	08dc      	lsrs	r4, r3, #3
 8001838:	00a4      	lsls	r4, r4, #2
 800183a:	1904      	adds	r4, r0, r4
 800183c:	9402      	str	r4, [sp, #8]
 800183e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001840:	9603      	str	r6, [sp, #12]
 8001842:	0026      	movs	r6, r4
 8001844:	9c03      	ldr	r4, [sp, #12]
 8001846:	43a6      	bics	r6, r4
 8001848:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800184a:	690e      	ldr	r6, [r1, #16]
 800184c:	40ae      	lsls	r6, r5
 800184e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8001850:	9c02      	ldr	r4, [sp, #8]
 8001852:	6226      	str	r6, [r4, #32]
 8001854:	e001      	b.n	800185a <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001856:	2a03      	cmp	r2, #3
 8001858:	d1df      	bne.n	800181a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800185c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800185e:	9d01      	ldr	r5, [sp, #4]
 8001860:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001862:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001864:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8001866:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001868:	4662      	mov	r2, ip
 800186a:	02a4      	lsls	r4, r4, #10
 800186c:	4222      	tst	r2, r4
 800186e:	d047      	beq.n	8001900 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001870:	2501      	movs	r5, #1
 8001872:	4c24      	ldr	r4, [pc, #144]	@ (8001904 <HAL_GPIO_Init+0x148>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001874:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001878:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	432a      	orrs	r2, r5
 800187c:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800187e:	4a22      	ldr	r2, [pc, #136]	@ (8001908 <HAL_GPIO_Init+0x14c>)
 8001880:	089c      	lsrs	r4, r3, #2
 8001882:	00a4      	lsls	r4, r4, #2
 8001884:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001886:	220f      	movs	r2, #15
 8001888:	3502      	adds	r5, #2
 800188a:	401d      	ands	r5, r3
 800188c:	00ad      	lsls	r5, r5, #2
 800188e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8001890:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001892:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001894:	2200      	movs	r2, #0
 8001896:	42b8      	cmp	r0, r7
 8001898:	d008      	beq.n	80018ac <HAL_GPIO_Init+0xf0>
 800189a:	4f1c      	ldr	r7, [pc, #112]	@ (800190c <HAL_GPIO_Init+0x150>)
 800189c:	3201      	adds	r2, #1
 800189e:	42b8      	cmp	r0, r7
 80018a0:	d004      	beq.n	80018ac <HAL_GPIO_Init+0xf0>
 80018a2:	4f1b      	ldr	r7, [pc, #108]	@ (8001910 <HAL_GPIO_Init+0x154>)
 80018a4:	3205      	adds	r2, #5
 80018a6:	42b8      	cmp	r0, r7
 80018a8:	d100      	bne.n	80018ac <HAL_GPIO_Init+0xf0>
 80018aa:	3a04      	subs	r2, #4
 80018ac:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ae:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018b0:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b2:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80018b4:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <HAL_GPIO_Init+0x158>)
        temp &= ~((uint32_t)iocurrent);
 80018b6:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 80018b8:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80018ba:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80018bc:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80018be:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c0:	02ff      	lsls	r7, r7, #11
 80018c2:	d401      	bmi.n	80018c8 <HAL_GPIO_Init+0x10c>
        temp &= ~((uint32_t)iocurrent);
 80018c4:	0035      	movs	r5, r6
 80018c6:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c8:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80018ca:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80018cc:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80018ce:	9d00      	ldr	r5, [sp, #0]
 80018d0:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d2:	02bf      	lsls	r7, r7, #10
 80018d4:	d401      	bmi.n	80018da <HAL_GPIO_Init+0x11e>
        temp &= ~((uint32_t)iocurrent);
 80018d6:	0035      	movs	r5, r6
 80018d8:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018da:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80018dc:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80018de:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80018e0:	9d00      	ldr	r5, [sp, #0]
 80018e2:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e4:	03bf      	lsls	r7, r7, #14
 80018e6:	d401      	bmi.n	80018ec <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 80018e8:	0035      	movs	r5, r6
 80018ea:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ec:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80018ee:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80018f0:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80018f2:	9e00      	ldr	r6, [sp, #0]
 80018f4:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f6:	03ff      	lsls	r7, r7, #15
 80018f8:	d401      	bmi.n	80018fe <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 80018fa:	4025      	ands	r5, r4
 80018fc:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80018fe:	6016      	str	r6, [r2, #0]
    position++;
 8001900:	3301      	adds	r3, #1
 8001902:	e75e      	b.n	80017c2 <HAL_GPIO_Init+0x6>
 8001904:	40021000 	.word	0x40021000
 8001908:	40010000 	.word	0x40010000
 800190c:	50000400 	.word	0x50000400
 8001910:	50000800 	.word	0x50000800
 8001914:	40010400 	.word	0x40010400

08001918 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001918:	2a00      	cmp	r2, #0
 800191a:	d001      	beq.n	8001920 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800191e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001920:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8001922:	e7fc      	b.n	800191e <HAL_GPIO_WritePin+0x6>

08001924 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001924:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8001928:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 800192a:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800192c:	400a      	ands	r2, r1
 800192e:	2a08      	cmp	r2, #8
 8001930:	d02c      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x68>
 8001932:	2a0c      	cmp	r2, #12
 8001934:	d00c      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x2c>
 8001936:	2a04      	cmp	r2, #4
 8001938:	d120      	bne.n	800197c <HAL_RCC_GetSysClockFreq+0x58>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	2310      	movs	r3, #16
 800193e:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001940:	4243      	negs	r3, r0
 8001942:	4158      	adcs	r0, r3
 8001944:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x70>)
 8001946:	4240      	negs	r0, r0
 8001948:	4018      	ands	r0, r3
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x74>)
 800194c:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800194e:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001950:	4812      	ldr	r0, [pc, #72]	@ (800199c <HAL_RCC_GetSysClockFreq+0x78>)
 8001952:	028a      	lsls	r2, r1, #10
 8001954:	0f12      	lsrs	r2, r2, #28
 8001956:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001958:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195a:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800195c:	0f89      	lsrs	r1, r1, #30
 800195e:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001960:	03c0      	lsls	r0, r0, #15
 8001962:	d504      	bpl.n	800196e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001964:	480e      	ldr	r0, [pc, #56]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x7c>)
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001966:	4350      	muls	r0, r2
 8001968:	f7fe fbe0 	bl	800012c <__udivsi3>
 800196c:	e7ef      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	06db      	lsls	r3, r3, #27
 8001972:	d501      	bpl.n	8001978 <HAL_RCC_GetSysClockFreq+0x54>
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001974:	4808      	ldr	r0, [pc, #32]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x74>)
 8001976:	e7f6      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x42>
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001978:	480a      	ldr	r0, [pc, #40]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x80>)
 800197a:	e7f4      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800197c:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800197e:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001980:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001986:	3301      	adds	r3, #1
 8001988:	4098      	lsls	r0, r3
      break;
 800198a:	e7e0      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 800198c:	4804      	ldr	r0, [pc, #16]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800198e:	e7de      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x2a>
 8001990:	40021000 	.word	0x40021000
 8001994:	00b71b00 	.word	0x00b71b00
 8001998:	003d0900 	.word	0x003d0900
 800199c:	0800377f 	.word	0x0800377f
 80019a0:	007a1200 	.word	0x007a1200
 80019a4:	00f42400 	.word	0x00f42400

080019a8 <HAL_RCC_OscConfig>:
{
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	0005      	movs	r5, r0
 80019ac:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d055      	beq.n	8001a5e <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b2:	230c      	movs	r3, #12
 80019b4:	4cc0      	ldr	r4, [pc, #768]	@ (8001cb8 <HAL_RCC_OscConfig+0x310>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b6:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b8:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ba:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019bc:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	025b      	lsls	r3, r3, #9
 80019c2:	0019      	movs	r1, r3
 80019c4:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c6:	07d2      	lsls	r2, r2, #31
 80019c8:	d43d      	bmi.n	8001a46 <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	682b      	ldr	r3, [r5, #0]
 80019cc:	079b      	lsls	r3, r3, #30
 80019ce:	d500      	bpl.n	80019d2 <HAL_RCC_OscConfig+0x2a>
 80019d0:	e086      	b.n	8001ae0 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019d2:	682b      	ldr	r3, [r5, #0]
 80019d4:	06db      	lsls	r3, r3, #27
 80019d6:	d528      	bpl.n	8001a2a <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019d8:	2e00      	cmp	r6, #0
 80019da:	d000      	beq.n	80019de <HAL_RCC_OscConfig+0x36>
 80019dc:	e0df      	b.n	8001b9e <HAL_RCC_OscConfig+0x1f6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	059b      	lsls	r3, r3, #22
 80019e2:	d502      	bpl.n	80019ea <HAL_RCC_OscConfig+0x42>
 80019e4:	69ab      	ldr	r3, [r5, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d039      	beq.n	8001a5e <HAL_RCC_OscConfig+0xb6>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80019ea:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ec:	6862      	ldr	r2, [r4, #4]
 80019ee:	49b3      	ldr	r1, [pc, #716]	@ (8001cbc <HAL_RCC_OscConfig+0x314>)
 80019f0:	6a2b      	ldr	r3, [r5, #32]
 80019f2:	400a      	ands	r2, r1
 80019f4:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80019f6:	0b5b      	lsrs	r3, r3, #13
 80019f8:	3301      	adds	r3, #1
 80019fa:	023f      	lsls	r7, r7, #8
 80019fc:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019fe:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a00:	6861      	ldr	r1, [r4, #4]
 8001a02:	69ea      	ldr	r2, [r5, #28]
 8001a04:	0209      	lsls	r1, r1, #8
 8001a06:	0a09      	lsrs	r1, r1, #8
 8001a08:	0612      	lsls	r2, r2, #24
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a0e:	68e1      	ldr	r1, [r4, #12]
 8001a10:	48ab      	ldr	r0, [pc, #684]	@ (8001cc0 <HAL_RCC_OscConfig+0x318>)
 8001a12:	060b      	lsls	r3, r1, #24
 8001a14:	0f1b      	lsrs	r3, r3, #28
 8001a16:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a18:	4aaa      	ldr	r2, [pc, #680]	@ (8001cc4 <HAL_RCC_OscConfig+0x31c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a1a:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8001a1c:	4baa      	ldr	r3, [pc, #680]	@ (8001cc8 <HAL_RCC_OscConfig+0x320>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a1e:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	f7ff fb43 	bl	80010ac <HAL_InitTick>
        if(status != HAL_OK)
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d130      	bne.n	8001a8c <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	682b      	ldr	r3, [r5, #0]
 8001a2c:	071b      	lsls	r3, r3, #28
 8001a2e:	d500      	bpl.n	8001a32 <HAL_RCC_OscConfig+0x8a>
 8001a30:	e0ec      	b.n	8001c0c <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a32:	682b      	ldr	r3, [r5, #0]
 8001a34:	075b      	lsls	r3, r3, #29
 8001a36:	d500      	bpl.n	8001a3a <HAL_RCC_OscConfig+0x92>
 8001a38:	e10e      	b.n	8001c58 <HAL_RCC_OscConfig+0x2b0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d000      	beq.n	8001a42 <HAL_RCC_OscConfig+0x9a>
 8001a40:	e193      	b.n	8001d6a <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8001a42:	2000      	movs	r0, #0
 8001a44:	e022      	b.n	8001a8c <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a46:	2e08      	cmp	r6, #8
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a4a:	2e0c      	cmp	r6, #12
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_OscConfig+0xba>
 8001a4e:	2f00      	cmp	r7, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	039b      	lsls	r3, r3, #14
 8001a56:	d5b8      	bpl.n	80019ca <HAL_RCC_OscConfig+0x22>
 8001a58:	686b      	ldr	r3, [r5, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1b5      	bne.n	80019ca <HAL_RCC_OscConfig+0x22>
    return HAL_ERROR;
 8001a5e:	2001      	movs	r0, #1
 8001a60:	e014      	b.n	8001a8c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a62:	686a      	ldr	r2, [r5, #4]
 8001a64:	428a      	cmp	r2, r1
 8001a66:	d113      	bne.n	8001a90 <HAL_RCC_OscConfig+0xe8>
 8001a68:	6822      	ldr	r2, [r4, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fb61 	bl	8001134 <HAL_GetTick>
 8001a72:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a74:	2280      	movs	r2, #128	@ 0x80
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	0292      	lsls	r2, r2, #10
 8001a7a:	4213      	tst	r3, r2
 8001a7c:	d1a5      	bne.n	80019ca <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fb59 	bl	8001134 <HAL_GetTick>
 8001a82:	9b00      	ldr	r3, [sp, #0]
 8001a84:	1ac0      	subs	r0, r0, r3
 8001a86:	2864      	cmp	r0, #100	@ 0x64
 8001a88:	d9f4      	bls.n	8001a74 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001a8a:	2003      	movs	r0, #3
}
 8001a8c:	b005      	add	sp, #20
 8001a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a90:	21a0      	movs	r1, #160	@ 0xa0
 8001a92:	02c9      	lsls	r1, r1, #11
 8001a94:	428a      	cmp	r2, r1
 8001a96:	d105      	bne.n	8001aa4 <HAL_RCC_OscConfig+0xfc>
 8001a98:	2280      	movs	r2, #128	@ 0x80
 8001a9a:	6821      	ldr	r1, [r4, #0]
 8001a9c:	02d2      	lsls	r2, r2, #11
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	6022      	str	r2, [r4, #0]
 8001aa2:	e7e1      	b.n	8001a68 <HAL_RCC_OscConfig+0xc0>
 8001aa4:	6821      	ldr	r1, [r4, #0]
 8001aa6:	4889      	ldr	r0, [pc, #548]	@ (8001ccc <HAL_RCC_OscConfig+0x324>)
 8001aa8:	4001      	ands	r1, r0
 8001aaa:	6021      	str	r1, [r4, #0]
 8001aac:	6821      	ldr	r1, [r4, #0]
 8001aae:	400b      	ands	r3, r1
 8001ab0:	9303      	str	r3, [sp, #12]
 8001ab2:	9b03      	ldr	r3, [sp, #12]
 8001ab4:	4986      	ldr	r1, [pc, #536]	@ (8001cd0 <HAL_RCC_OscConfig+0x328>)
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	400b      	ands	r3, r1
 8001aba:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001abc:	2a00      	cmp	r2, #0
 8001abe:	d1d6      	bne.n	8001a6e <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fb38 	bl	8001134 <HAL_GetTick>
 8001ac4:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ac6:	2280      	movs	r2, #128	@ 0x80
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	0292      	lsls	r2, r2, #10
 8001acc:	4213      	tst	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12a>
 8001ad0:	e77b      	b.n	80019ca <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad2:	f7ff fb2f 	bl	8001134 <HAL_GetTick>
 8001ad6:	9b00      	ldr	r3, [sp, #0]
 8001ad8:	1ac0      	subs	r0, r0, r3
 8001ada:	2864      	cmp	r0, #100	@ 0x64
 8001adc:	d9f3      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x11e>
 8001ade:	e7d4      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ae0:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8001ae2:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ae4:	4213      	tst	r3, r2
 8001ae6:	d003      	beq.n	8001af0 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001ae8:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001aea:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001aec:	4311      	orrs	r1, r2
 8001aee:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af0:	2e04      	cmp	r6, #4
 8001af2:	d003      	beq.n	8001afc <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001af4:	2e0c      	cmp	r6, #12
 8001af6:	d124      	bne.n	8001b42 <HAL_RCC_OscConfig+0x19a>
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d122      	bne.n	8001b42 <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001afc:	6822      	ldr	r2, [r4, #0]
 8001afe:	0752      	lsls	r2, r2, #29
 8001b00:	d501      	bpl.n	8001b06 <HAL_RCC_OscConfig+0x15e>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ab      	beq.n	8001a5e <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b06:	6861      	ldr	r1, [r4, #4]
 8001b08:	692a      	ldr	r2, [r5, #16]
 8001b0a:	4872      	ldr	r0, [pc, #456]	@ (8001cd4 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	0212      	lsls	r2, r2, #8
 8001b0e:	4001      	ands	r1, r0
 8001b10:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b12:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b16:	6822      	ldr	r2, [r4, #0]
 8001b18:	438a      	bics	r2, r1
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b1e:	f7ff ff01 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 8001b22:	68e3      	ldr	r3, [r4, #12]
 8001b24:	4a66      	ldr	r2, [pc, #408]	@ (8001cc0 <HAL_RCC_OscConfig+0x318>)
 8001b26:	061b      	lsls	r3, r3, #24
 8001b28:	0f1b      	lsrs	r3, r3, #28
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	4965      	ldr	r1, [pc, #404]	@ (8001cc4 <HAL_RCC_OscConfig+0x31c>)
 8001b2e:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8001b30:	4b65      	ldr	r3, [pc, #404]	@ (8001cc8 <HAL_RCC_OscConfig+0x320>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b32:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	f7ff fab9 	bl	80010ac <HAL_InitTick>
      if(status != HAL_OK)
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d100      	bne.n	8001b40 <HAL_RCC_OscConfig+0x198>
 8001b3e:	e748      	b.n	80019d2 <HAL_RCC_OscConfig+0x2a>
 8001b40:	e7a4      	b.n	8001a8c <HAL_RCC_OscConfig+0xe4>
      if(hsi_state != RCC_HSI_OFF)
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d019      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b46:	2109      	movs	r1, #9
 8001b48:	6822      	ldr	r2, [r4, #0]
 8001b4a:	438a      	bics	r2, r1
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b50:	f7ff faf0 	bl	8001134 <HAL_GetTick>
 8001b54:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b56:	2204      	movs	r2, #4
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	4213      	tst	r3, r2
 8001b5c:	d007      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	6862      	ldr	r2, [r4, #4]
 8001b60:	692b      	ldr	r3, [r5, #16]
 8001b62:	495c      	ldr	r1, [pc, #368]	@ (8001cd4 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	400a      	ands	r2, r1
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	6063      	str	r3, [r4, #4]
 8001b6c:	e731      	b.n	80019d2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fae1 	bl	8001134 <HAL_GetTick>
 8001b72:	1bc0      	subs	r0, r0, r7
 8001b74:	2802      	cmp	r0, #2
 8001b76:	d9ee      	bls.n	8001b56 <HAL_RCC_OscConfig+0x1ae>
 8001b78:	e787      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	4393      	bics	r3, r2
 8001b80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b82:	f7ff fad7 	bl	8001134 <HAL_GetTick>
 8001b86:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b88:	2204      	movs	r2, #4
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	4213      	tst	r3, r2
 8001b8e:	d100      	bne.n	8001b92 <HAL_RCC_OscConfig+0x1ea>
 8001b90:	e71f      	b.n	80019d2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b92:	f7ff facf 	bl	8001134 <HAL_GetTick>
 8001b96:	1bc0      	subs	r0, r0, r7
 8001b98:	2802      	cmp	r0, #2
 8001b9a:	d9f5      	bls.n	8001b88 <HAL_RCC_OscConfig+0x1e0>
 8001b9c:	e775      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b9e:	69ab      	ldr	r3, [r5, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d020      	beq.n	8001be6 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_MSI_ENABLE();
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	6822      	ldr	r2, [r4, #0]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4313      	orrs	r3, r2
 8001bac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bae:	f7ff fac1 	bl	8001134 <HAL_GetTick>
 8001bb2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	0092      	lsls	r2, r2, #2
 8001bba:	4213      	tst	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bbe:	6863      	ldr	r3, [r4, #4]
 8001bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8001cbc <HAL_RCC_OscConfig+0x314>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	6a2a      	ldr	r2, [r5, #32]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bca:	6862      	ldr	r2, [r4, #4]
 8001bcc:	69eb      	ldr	r3, [r5, #28]
 8001bce:	0212      	lsls	r2, r2, #8
 8001bd0:	061b      	lsls	r3, r3, #24
 8001bd2:	0a12      	lsrs	r2, r2, #8
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	6063      	str	r3, [r4, #4]
 8001bd8:	e727      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bda:	f7ff faab 	bl	8001134 <HAL_GetTick>
 8001bde:	1bc0      	subs	r0, r0, r7
 8001be0:	2802      	cmp	r0, #2
 8001be2:	d9e7      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x20c>
 8001be4:	e751      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bee:	f7ff faa1 	bl	8001134 <HAL_GetTick>
 8001bf2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001bf4:	2280      	movs	r2, #128	@ 0x80
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	0092      	lsls	r2, r2, #2
 8001bfa:	4213      	tst	r3, r2
 8001bfc:	d100      	bne.n	8001c00 <HAL_RCC_OscConfig+0x258>
 8001bfe:	e714      	b.n	8001a2a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c00:	f7ff fa98 	bl	8001134 <HAL_GetTick>
 8001c04:	1bc0      	subs	r0, r0, r7
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d9f4      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x24c>
 8001c0a:	e73e      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0c:	696a      	ldr	r2, [r5, #20]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	2a00      	cmp	r2, #0
 8001c12:	d010      	beq.n	8001c36 <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSI_ENABLE();
 8001c14:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001c16:	4313      	orrs	r3, r2
 8001c18:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fa8b 	bl	8001134 <HAL_GetTick>
 8001c1e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c20:	2202      	movs	r2, #2
 8001c22:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001c24:	4213      	tst	r3, r2
 8001c26:	d000      	beq.n	8001c2a <HAL_RCC_OscConfig+0x282>
 8001c28:	e703      	b.n	8001a32 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fa83 	bl	8001134 <HAL_GetTick>
 8001c2e:	1bc0      	subs	r0, r0, r7
 8001c30:	2802      	cmp	r0, #2
 8001c32:	d9f5      	bls.n	8001c20 <HAL_RCC_OscConfig+0x278>
 8001c34:	e729      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 8001c36:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001c38:	439a      	bics	r2, r3
 8001c3a:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fa7a 	bl	8001134 <HAL_GetTick>
 8001c40:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c42:	2202      	movs	r2, #2
 8001c44:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001c46:	4213      	tst	r3, r2
 8001c48:	d100      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2a4>
 8001c4a:	e6f2      	b.n	8001a32 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fa72 	bl	8001134 <HAL_GetTick>
 8001c50:	1bc0      	subs	r0, r0, r7
 8001c52:	2802      	cmp	r0, #2
 8001c54:	d9f5      	bls.n	8001c42 <HAL_RCC_OscConfig+0x29a>
 8001c56:	e718      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c58:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001c5a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001c5e:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001c60:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c62:	421a      	tst	r2, r3
 8001c64:	d104      	bne.n	8001c70 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	2280      	movs	r2, #128	@ 0x80
 8001c72:	4f1a      	ldr	r7, [pc, #104]	@ (8001cdc <HAL_RCC_OscConfig+0x334>)
 8001c74:	0052      	lsls	r2, r2, #1
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	4213      	tst	r3, r2
 8001c7a:	d008      	beq.n	8001c8e <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	2280      	movs	r2, #128	@ 0x80
 8001c7e:	68ab      	ldr	r3, [r5, #8]
 8001c80:	0052      	lsls	r2, r2, #1
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x338>
 8001c86:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	6523      	str	r3, [r4, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c8c:	e04d      	b.n	8001d2a <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8e:	2280      	movs	r2, #128	@ 0x80
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	0052      	lsls	r2, r2, #1
 8001c94:	4313      	orrs	r3, r2
 8001c96:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001c98:	f7ff fa4c 	bl	8001134 <HAL_GetTick>
 8001c9c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	2280      	movs	r2, #128	@ 0x80
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	0052      	lsls	r2, r2, #1
 8001ca4:	4213      	tst	r3, r2
 8001ca6:	d1e9      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca8:	f7ff fa44 	bl	8001134 <HAL_GetTick>
 8001cac:	9b01      	ldr	r3, [sp, #4]
 8001cae:	1ac0      	subs	r0, r0, r3
 8001cb0:	2864      	cmp	r0, #100	@ 0x64
 8001cb2:	d9f4      	bls.n	8001c9e <HAL_RCC_OscConfig+0x2f6>
 8001cb4:	e6e9      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	ffff1fff 	.word	0xffff1fff
 8001cc0:	08003790 	.word	0x08003790
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	fffeffff 	.word	0xfffeffff
 8001cd0:	fffbffff 	.word	0xfffbffff
 8001cd4:	ffffe0ff 	.word	0xffffe0ff
 8001cd8:	fffffeff 	.word	0xfffffeff
 8001cdc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d116      	bne.n	8001d12 <HAL_RCC_OscConfig+0x36a>
 8001ce4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001ce6:	4a51      	ldr	r2, [pc, #324]	@ (8001e2c <HAL_RCC_OscConfig+0x484>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	6523      	str	r3, [r4, #80]	@ 0x50
 8001cec:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001cee:	4a50      	ldr	r2, [pc, #320]	@ (8001e30 <HAL_RCC_OscConfig+0x488>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fa1e 	bl	8001134 <HAL_GetTick>
 8001cf8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cfa:	2280      	movs	r2, #128	@ 0x80
 8001cfc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	4213      	tst	r3, r2
 8001d02:	d01a      	beq.n	8001d3a <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d04:	f7ff fa16 	bl	8001134 <HAL_GetTick>
 8001d08:	4b4a      	ldr	r3, [pc, #296]	@ (8001e34 <HAL_RCC_OscConfig+0x48c>)
 8001d0a:	1bc0      	subs	r0, r0, r7
 8001d0c:	4298      	cmp	r0, r3
 8001d0e:	d9f4      	bls.n	8001cfa <HAL_RCC_OscConfig+0x352>
 8001d10:	e6bb      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d12:	21a0      	movs	r1, #160	@ 0xa0
 8001d14:	00c9      	lsls	r1, r1, #3
 8001d16:	428b      	cmp	r3, r1
 8001d18:	d118      	bne.n	8001d4c <HAL_RCC_OscConfig+0x3a4>
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	430b      	orrs	r3, r1
 8001d22:	6523      	str	r3, [r4, #80]	@ 0x50
 8001d24:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001d26:	431a      	orrs	r2, r3
 8001d28:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fa03 	bl	8001134 <HAL_GetTick>
 8001d2e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d30:	2280      	movs	r2, #128	@ 0x80
 8001d32:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001d34:	0092      	lsls	r2, r2, #2
 8001d36:	4213      	tst	r3, r2
 8001d38:	d010      	beq.n	8001d5c <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 8001d3a:	9b00      	ldr	r3, [sp, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d000      	beq.n	8001d42 <HAL_RCC_OscConfig+0x39a>
 8001d40:	e67b      	b.n	8001a3a <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d42:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001d44:	4a3c      	ldr	r2, [pc, #240]	@ (8001e38 <HAL_RCC_OscConfig+0x490>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001d4a:	e676      	b.n	8001a3a <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001d4e:	4a37      	ldr	r2, [pc, #220]	@ (8001e2c <HAL_RCC_OscConfig+0x484>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	6523      	str	r3, [r4, #80]	@ 0x50
 8001d54:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001d56:	4a36      	ldr	r2, [pc, #216]	@ (8001e30 <HAL_RCC_OscConfig+0x488>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	e796      	b.n	8001c8a <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f9ea 	bl	8001134 <HAL_GetTick>
 8001d60:	4b34      	ldr	r3, [pc, #208]	@ (8001e34 <HAL_RCC_OscConfig+0x48c>)
 8001d62:	1bc0      	subs	r0, r0, r7
 8001d64:	4298      	cmp	r0, r3
 8001d66:	d9e3      	bls.n	8001d30 <HAL_RCC_OscConfig+0x388>
 8001d68:	e68f      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6a:	2e0c      	cmp	r6, #12
 8001d6c:	d043      	beq.n	8001df6 <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6e:	4a33      	ldr	r2, [pc, #204]	@ (8001e3c <HAL_RCC_OscConfig+0x494>)
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d12e      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 8001d74:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d76:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4013      	ands	r3, r2
 8001d7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f9da 	bl	8001134 <HAL_GetTick>
 8001d80:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d82:	04bf      	lsls	r7, r7, #18
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	423b      	tst	r3, r7
 8001d88:	d11d      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d8a:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8001d8c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001d8e:	68e2      	ldr	r2, [r4, #12]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	492b      	ldr	r1, [pc, #172]	@ (8001e40 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d94:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d96:	400a      	ands	r2, r1
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d9c:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001da2:	2380      	movs	r3, #128	@ 0x80
 8001da4:	6822      	ldr	r2, [r4, #0]
 8001da6:	045b      	lsls	r3, r3, #17
 8001da8:	4313      	orrs	r3, r2
 8001daa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dac:	f7ff f9c2 	bl	8001134 <HAL_GetTick>
 8001db0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	4233      	tst	r3, r6
 8001db6:	d000      	beq.n	8001dba <HAL_RCC_OscConfig+0x412>
 8001db8:	e643      	b.n	8001a42 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff f9bb 	bl	8001134 <HAL_GetTick>
 8001dbe:	1b40      	subs	r0, r0, r5
 8001dc0:	2802      	cmp	r0, #2
 8001dc2:	d9f6      	bls.n	8001db2 <HAL_RCC_OscConfig+0x40a>
 8001dc4:	e661      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7ff f9b5 	bl	8001134 <HAL_GetTick>
 8001dca:	1b80      	subs	r0, r0, r6
 8001dcc:	2802      	cmp	r0, #2
 8001dce:	d9d9      	bls.n	8001d84 <HAL_RCC_OscConfig+0x3dc>
 8001dd0:	e65b      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dd4:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dda:	f7ff f9ab 	bl	8001134 <HAL_GetTick>
 8001dde:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001de0:	04b6      	lsls	r6, r6, #18
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	4233      	tst	r3, r6
 8001de6:	d100      	bne.n	8001dea <HAL_RCC_OscConfig+0x442>
 8001de8:	e62b      	b.n	8001a42 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff f9a3 	bl	8001134 <HAL_GetTick>
 8001dee:	1b40      	subs	r0, r0, r5
 8001df0:	2802      	cmp	r0, #2
 8001df2:	d9f6      	bls.n	8001de2 <HAL_RCC_OscConfig+0x43a>
 8001df4:	e649      	b.n	8001a8a <HAL_RCC_OscConfig+0xe2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d100      	bne.n	8001dfc <HAL_RCC_OscConfig+0x454>
 8001dfa:	e630      	b.n	8001a5e <HAL_RCC_OscConfig+0xb6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfc:	2380      	movs	r3, #128	@ 0x80
        pll_config = RCC->CFGR;
 8001dfe:	68e0      	ldr	r0, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e00:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	4003      	ands	r3, r0
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d000      	beq.n	8001e0c <HAL_RCC_OscConfig+0x464>
 8001e0a:	e628      	b.n	8001a5e <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e0c:	23f0      	movs	r3, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e10:	039b      	lsls	r3, r3, #14
 8001e12:	4003      	ands	r3, r0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d000      	beq.n	8001e1a <HAL_RCC_OscConfig+0x472>
 8001e18:	e621      	b.n	8001a5e <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e1a:	23c0      	movs	r3, #192	@ 0xc0
 8001e1c:	041b      	lsls	r3, r3, #16
 8001e1e:	4018      	ands	r0, r3
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e20:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001e22:	1ac0      	subs	r0, r0, r3
 8001e24:	1e43      	subs	r3, r0, #1
 8001e26:	4198      	sbcs	r0, r3
 8001e28:	b2c0      	uxtb	r0, r0
 8001e2a:	e62f      	b.n	8001a8c <HAL_RCC_OscConfig+0xe4>
 8001e2c:	fffffeff 	.word	0xfffffeff
 8001e30:	fffffbff 	.word	0xfffffbff
 8001e34:	00001388 	.word	0x00001388
 8001e38:	efffffff 	.word	0xefffffff
 8001e3c:	feffffff 	.word	0xfeffffff
 8001e40:	ff02ffff 	.word	0xff02ffff

08001e44 <HAL_RCC_ClockConfig>:
{
 8001e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e46:	1e04      	subs	r4, r0, #0
 8001e48:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001e4c:	2001      	movs	r0, #1
}
 8001e4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	2501      	movs	r5, #1
 8001e52:	4e5b      	ldr	r6, [pc, #364]	@ (8001fc0 <HAL_RCC_ClockConfig+0x17c>)
 8001e54:	9a01      	ldr	r2, [sp, #4]
 8001e56:	6833      	ldr	r3, [r6, #0]
 8001e58:	402b      	ands	r3, r5
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d331      	bcc.n	8001ec2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5e:	6822      	ldr	r2, [r4, #0]
 8001e60:	0793      	lsls	r3, r2, #30
 8001e62:	d443      	bmi.n	8001eec <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e64:	07d2      	lsls	r2, r2, #31
 8001e66:	d449      	bmi.n	8001efc <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e68:	2501      	movs	r5, #1
 8001e6a:	6833      	ldr	r3, [r6, #0]
 8001e6c:	9a01      	ldr	r2, [sp, #4]
 8001e6e:	402b      	ands	r3, r5
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d909      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e74:	6833      	ldr	r3, [r6, #0]
 8001e76:	43ab      	bics	r3, r5
 8001e78:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001e7a:	f7ff f95b 	bl	8001134 <HAL_GetTick>
 8001e7e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e80:	6833      	ldr	r3, [r6, #0]
 8001e82:	422b      	tst	r3, r5
 8001e84:	d000      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x44>
 8001e86:	e08c      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	4d4e      	ldr	r5, [pc, #312]	@ (8001fc4 <HAL_RCC_ClockConfig+0x180>)
 8001e8c:	0753      	lsls	r3, r2, #29
 8001e8e:	d500      	bpl.n	8001e92 <HAL_RCC_ClockConfig+0x4e>
 8001e90:	e08f      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e92:	0712      	lsls	r2, r2, #28
 8001e94:	d506      	bpl.n	8001ea4 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e96:	68ea      	ldr	r2, [r5, #12]
 8001e98:	6923      	ldr	r3, [r4, #16]
 8001e9a:	494b      	ldr	r1, [pc, #300]	@ (8001fc8 <HAL_RCC_ClockConfig+0x184>)
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ea4:	f7ff fd3e 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 8001ea8:	68eb      	ldr	r3, [r5, #12]
 8001eaa:	4a48      	ldr	r2, [pc, #288]	@ (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	0f1b      	lsrs	r3, r3, #28
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	4947      	ldr	r1, [pc, #284]	@ (8001fd0 <HAL_RCC_ClockConfig+0x18c>)
 8001eb4:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8001eb6:	4b47      	ldr	r3, [pc, #284]	@ (8001fd4 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eb8:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	f7ff f8f6 	bl	80010ac <HAL_InitTick>
  if(status != HAL_OK)
 8001ec0:	e7c5      	b.n	8001e4e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	6833      	ldr	r3, [r6, #0]
 8001ec4:	9a01      	ldr	r2, [sp, #4]
 8001ec6:	43ab      	bics	r3, r5
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001ecc:	f7ff f932 	bl	8001134 <HAL_GetTick>
 8001ed0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	6833      	ldr	r3, [r6, #0]
 8001ed4:	9a01      	ldr	r2, [sp, #4]
 8001ed6:	402b      	ands	r3, r5
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d0c0      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7ff f92a 	bl	8001134 <HAL_GetTick>
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd8 <HAL_RCC_ClockConfig+0x194>)
 8001ee2:	1bc0      	subs	r0, r0, r7
 8001ee4:	4298      	cmp	r0, r3
 8001ee6:	d9f4      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8001ee8:	2003      	movs	r0, #3
 8001eea:	e7b0      	b.n	8001e4e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	20f0      	movs	r0, #240	@ 0xf0
 8001eee:	4935      	ldr	r1, [pc, #212]	@ (8001fc4 <HAL_RCC_ClockConfig+0x180>)
 8001ef0:	68cb      	ldr	r3, [r1, #12]
 8001ef2:	4383      	bics	r3, r0
 8001ef4:	68a0      	ldr	r0, [r4, #8]
 8001ef6:	4303      	orrs	r3, r0
 8001ef8:	60cb      	str	r3, [r1, #12]
 8001efa:	e7b3      	b.n	8001e64 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efc:	4d31      	ldr	r5, [pc, #196]	@ (8001fc4 <HAL_RCC_ClockConfig+0x180>)
 8001efe:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f00:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	2a02      	cmp	r2, #2
 8001f04:	d118      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f06:	039b      	lsls	r3, r3, #14
 8001f08:	d5a0      	bpl.n	8001e4c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0a:	2103      	movs	r1, #3
 8001f0c:	68eb      	ldr	r3, [r5, #12]
 8001f0e:	438b      	bics	r3, r1
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001f14:	f7ff f90e 	bl	8001134 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f18:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001f1a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d118      	bne.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f20:	220c      	movs	r2, #12
 8001f22:	68eb      	ldr	r3, [r5, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d09e      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2a:	f7ff f903 	bl	8001134 <HAL_GetTick>
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd8 <HAL_RCC_ClockConfig+0x194>)
 8001f30:	1bc0      	subs	r0, r0, r7
 8001f32:	4298      	cmp	r0, r3
 8001f34:	d9f4      	bls.n	8001f20 <HAL_RCC_ClockConfig+0xdc>
 8001f36:	e7d7      	b.n	8001ee8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f38:	2a03      	cmp	r2, #3
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f3c:	019b      	lsls	r3, r3, #6
 8001f3e:	d4e4      	bmi.n	8001f0a <HAL_RCC_ClockConfig+0xc6>
 8001f40:	e784      	b.n	8001e4c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f42:	2a01      	cmp	r2, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f46:	075b      	lsls	r3, r3, #29
 8001f48:	d4df      	bmi.n	8001f0a <HAL_RCC_ClockConfig+0xc6>
 8001f4a:	e77f      	b.n	8001e4c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f4c:	059b      	lsls	r3, r3, #22
 8001f4e:	d4dc      	bmi.n	8001f0a <HAL_RCC_ClockConfig+0xc6>
 8001f50:	e77c      	b.n	8001e4c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d10b      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f56:	220c      	movs	r2, #12
 8001f58:	68eb      	ldr	r3, [r5, #12]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d083      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7ff f8e8 	bl	8001134 <HAL_GetTick>
 8001f64:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <HAL_RCC_ClockConfig+0x194>)
 8001f66:	1bc0      	subs	r0, r0, r7
 8001f68:	4298      	cmp	r0, r3
 8001f6a:	d9f4      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x112>
 8001f6c:	e7bc      	b.n	8001ee8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d011      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f72:	220c      	movs	r2, #12
 8001f74:	68eb      	ldr	r3, [r5, #12]
 8001f76:	4213      	tst	r3, r2
 8001f78:	d100      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x138>
 8001f7a:	e775      	b.n	8001e68 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7ff f8da 	bl	8001134 <HAL_GetTick>
 8001f80:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <HAL_RCC_ClockConfig+0x194>)
 8001f82:	1bc0      	subs	r0, r0, r7
 8001f84:	4298      	cmp	r0, r3
 8001f86:	d9f4      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x12e>
 8001f88:	e7ae      	b.n	8001ee8 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8a:	f7ff f8d3 	bl	8001134 <HAL_GetTick>
 8001f8e:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_RCC_ClockConfig+0x194>)
 8001f90:	1bc0      	subs	r0, r0, r7
 8001f92:	4298      	cmp	r0, r3
 8001f94:	d8a8      	bhi.n	8001ee8 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f96:	220c      	movs	r2, #12
 8001f98:	68eb      	ldr	r3, [r5, #12]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d1f4      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x146>
 8001fa0:	e762      	b.n	8001e68 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa2:	f7ff f8c7 	bl	8001134 <HAL_GetTick>
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <HAL_RCC_ClockConfig+0x194>)
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4298      	cmp	r0, r3
 8001fac:	d800      	bhi.n	8001fb0 <HAL_RCC_ClockConfig+0x16c>
 8001fae:	e767      	b.n	8001e80 <HAL_RCC_ClockConfig+0x3c>
 8001fb0:	e79a      	b.n	8001ee8 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb2:	68eb      	ldr	r3, [r5, #12]
 8001fb4:	4909      	ldr	r1, [pc, #36]	@ (8001fdc <HAL_RCC_ClockConfig+0x198>)
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	68e1      	ldr	r1, [r4, #12]
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	60eb      	str	r3, [r5, #12]
 8001fbe:	e768      	b.n	8001e92 <HAL_RCC_ClockConfig+0x4e>
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	ffffc7ff 	.word	0xffffc7ff
 8001fcc:	08003790 	.word	0x08003790
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	00001388 	.word	0x00001388
 8001fdc:	fffff8ff 	.word	0xfffff8ff

08001fe0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001fe2:	4a05      	ldr	r2, [pc, #20]	@ (8001ff8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	4905      	ldr	r1, [pc, #20]	@ (8001ffc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001fe8:	055b      	lsls	r3, r3, #21
 8001fea:	0f5b      	lsrs	r3, r3, #29
 8001fec:	5ccb      	ldrb	r3, [r1, r3]
 8001fee:	6810      	ldr	r0, [r2, #0]
 8001ff0:	40d8      	lsrs	r0, r3
}
 8001ff2:	4770      	bx	lr
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	08003788 	.word	0x08003788

08002000 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002002:	001f      	movs	r7, r3
 8002004:	b085      	sub	sp, #20
 8002006:	000e      	movs	r6, r1
 8002008:	9201      	str	r2, [sp, #4]
 800200a:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800200c:	f7ff f892 	bl	8001134 <HAL_GetTick>
 8002010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002012:	19dd      	adds	r5, r3, r7
 8002014:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8002016:	f7ff f88d 	bl	8001134 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800201a:	4b27      	ldr	r3, [pc, #156]	@ (80020b8 <SPI_WaitFlagStateUntilTimeout+0xb8>)
  tmp_tickstart = HAL_GetTick();
 800201c:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	015b      	lsls	r3, r3, #5
 8002022:	0d1b      	lsrs	r3, r3, #20
 8002024:	436b      	muls	r3, r5
      {
        tmp_timeout = 0U;
      }
      else
      {
        count--;
 8002026:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002028:	6822      	ldr	r2, [r4, #0]
 800202a:	6893      	ldr	r3, [r2, #8]
 800202c:	4033      	ands	r3, r6
 800202e:	1b9b      	subs	r3, r3, r6
 8002030:	4259      	negs	r1, r3
 8002032:	414b      	adcs	r3, r1
 8002034:	9901      	ldr	r1, [sp, #4]
 8002036:	428b      	cmp	r3, r1
 8002038:	d101      	bne.n	800203e <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
    }
  }

  return HAL_OK;
 800203a:	2000      	movs	r0, #0
 800203c:	e032      	b.n	80020a4 <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 800203e:	1c7b      	adds	r3, r7, #1
 8002040:	d0f3      	beq.n	800202a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002042:	f7ff f877 	bl	8001134 <HAL_GetTick>
 8002046:	9b00      	ldr	r3, [sp, #0]
 8002048:	1ac0      	subs	r0, r0, r3
 800204a:	42a8      	cmp	r0, r5
 800204c:	d32c      	bcc.n	80020a8 <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800204e:	21e0      	movs	r1, #224	@ 0xe0
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	438a      	bics	r2, r1
 8002056:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002058:	2282      	movs	r2, #130	@ 0x82
 800205a:	6861      	ldr	r1, [r4, #4]
 800205c:	0052      	lsls	r2, r2, #1
 800205e:	4291      	cmp	r1, r2
 8002060:	d10c      	bne.n	800207c <SPI_WaitFlagStateUntilTimeout+0x7c>
 8002062:	2180      	movs	r1, #128	@ 0x80
 8002064:	68a2      	ldr	r2, [r4, #8]
 8002066:	0209      	lsls	r1, r1, #8
 8002068:	428a      	cmp	r2, r1
 800206a:	d003      	beq.n	8002074 <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800206c:	2180      	movs	r1, #128	@ 0x80
 800206e:	00c9      	lsls	r1, r1, #3
 8002070:	428a      	cmp	r2, r1
 8002072:	d103      	bne.n	800207c <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8002074:	2140      	movs	r1, #64	@ 0x40
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	438a      	bics	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800207c:	2180      	movs	r1, #128	@ 0x80
 800207e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002080:	0189      	lsls	r1, r1, #6
 8002082:	428a      	cmp	r2, r1
 8002084:	d106      	bne.n	8002094 <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	480c      	ldr	r0, [pc, #48]	@ (80020bc <SPI_WaitFlagStateUntilTimeout+0xbc>)
 800208a:	4001      	ands	r1, r0
 800208c:	6019      	str	r1, [r3, #0]
 800208e:	6819      	ldr	r1, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002094:	0023      	movs	r3, r4
 8002096:	2201      	movs	r2, #1
 8002098:	3351      	adds	r3, #81	@ 0x51
 800209a:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800209c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800209e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80020a0:	3450      	adds	r4, #80	@ 0x50
 80020a2:	7023      	strb	r3, [r4, #0]
}
 80020a4:	b005      	add	sp, #20
 80020a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80020a8:	9b03      	ldr	r3, [sp, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <SPI_WaitFlagStateUntilTimeout+0xb4>
        count--;
 80020ae:	9b03      	ldr	r3, [sp, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	e7b8      	b.n	8002026 <SPI_WaitFlagStateUntilTimeout+0x26>
        tmp_timeout = 0U;
 80020b4:	001d      	movs	r5, r3
 80020b6:	e7b7      	b.n	8002028 <SPI_WaitFlagStateUntilTimeout+0x28>
 80020b8:	20000000 	.word	0x20000000
 80020bc:	ffffdfff 	.word	0xffffdfff

080020c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	b085      	sub	sp, #20
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80020c4:	000b      	movs	r3, r1
 80020c6:	9200      	str	r2, [sp, #0]
{
 80020c8:	000e      	movs	r6, r1
 80020ca:	0017      	movs	r7, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80020cc:	2102      	movs	r1, #2
 80020ce:	2201      	movs	r2, #1
{
 80020d0:	0004      	movs	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80020d2:	f7ff ff95 	bl	8002000 <SPI_WaitFlagStateUntilTimeout>
 80020d6:	1e05      	subs	r5, r0, #0
 80020d8:	d005      	beq.n	80020e6 <SPI_EndRxTxTransaction+0x26>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020da:	2320      	movs	r3, #32
 80020dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80020de:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020e0:	4313      	orrs	r3, r2
 80020e2:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80020e4:	e017      	b.n	8002116 <SPI_EndRxTxTransaction+0x56>
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80020e6:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <SPI_EndRxTxTransaction+0x74>)
 80020e8:	4913      	ldr	r1, [pc, #76]	@ (8002138 <SPI_EndRxTxTransaction+0x78>)
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	f7fe f81e 	bl	800012c <__udivsi3>
 80020f0:	23fa      	movs	r3, #250	@ 0xfa
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4343      	muls	r3, r0
 80020f6:	9303      	str	r3, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020f8:	2382      	movs	r3, #130	@ 0x82
 80020fa:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80020fc:	2280      	movs	r2, #128	@ 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4299      	cmp	r1, r3
 8002102:	d10b      	bne.n	800211c <SPI_EndRxTxTransaction+0x5c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002104:	0033      	movs	r3, r6
 8002106:	002a      	movs	r2, r5
 8002108:	2180      	movs	r1, #128	@ 0x80
 800210a:	0020      	movs	r0, r4
 800210c:	9700      	str	r7, [sp, #0]
 800210e:	f7ff ff77 	bl	8002000 <SPI_WaitFlagStateUntilTimeout>
 8002112:	2800      	cmp	r0, #0
 8002114:	d1e1      	bne.n	80020da <SPI_EndRxTxTransaction+0x1a>
  }

  return HAL_OK;
}
 8002116:	0028      	movs	r0, r5
 8002118:	b005      	add	sp, #20
 800211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 800211c:	9b03      	ldr	r3, [sp, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f9      	beq.n	8002116 <SPI_EndRxTxTransaction+0x56>
      count--;
 8002122:	9b03      	ldr	r3, [sp, #12]
 8002124:	3b01      	subs	r3, #1
 8002126:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4213      	tst	r3, r2
 800212e:	d1f5      	bne.n	800211c <SPI_EndRxTxTransaction+0x5c>
 8002130:	e7f1      	b.n	8002116 <SPI_EndRxTxTransaction+0x56>
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	20000000 	.word	0x20000000
 8002138:	016e3600 	.word	0x016e3600

0800213c <SPI_EndRxTransaction>:
{
 800213c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800213e:	000b      	movs	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002140:	2182      	movs	r1, #130	@ 0x82
{
 8002142:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002144:	6840      	ldr	r0, [r0, #4]
 8002146:	0049      	lsls	r1, r1, #1
 8002148:	4288      	cmp	r0, r1
 800214a:	d00a      	beq.n	8002162 <SPI_EndRxTransaction+0x26>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800214c:	9200      	str	r2, [sp, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	3904      	subs	r1, #4
 8002152:	39ff      	subs	r1, #255	@ 0xff
 8002154:	0020      	movs	r0, r4
 8002156:	f7ff ff53 	bl	8002000 <SPI_WaitFlagStateUntilTimeout>
 800215a:	2800      	cmp	r0, #0
 800215c:	d119      	bne.n	8002192 <SPI_EndRxTransaction+0x56>
  return HAL_OK;
 800215e:	2000      	movs	r0, #0
}
 8002160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002162:	2080      	movs	r0, #128	@ 0x80
 8002164:	2580      	movs	r5, #128	@ 0x80
 8002166:	68a1      	ldr	r1, [r4, #8]
 8002168:	0200      	lsls	r0, r0, #8
 800216a:	00ed      	lsls	r5, r5, #3
 800216c:	4281      	cmp	r1, r0
 800216e:	d001      	beq.n	8002174 <SPI_EndRxTransaction+0x38>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002170:	42a9      	cmp	r1, r5
 8002172:	d106      	bne.n	8002182 <SPI_EndRxTransaction+0x46>
    __HAL_SPI_DISABLE(hspi);
 8002174:	2740      	movs	r7, #64	@ 0x40
 8002176:	6826      	ldr	r6, [r4, #0]
 8002178:	6830      	ldr	r0, [r6, #0]
 800217a:	43b8      	bics	r0, r7
 800217c:	6030      	str	r0, [r6, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800217e:	42a9      	cmp	r1, r5
 8002180:	d003      	beq.n	800218a <SPI_EndRxTransaction+0x4e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002182:	9200      	str	r2, [sp, #0]
 8002184:	2180      	movs	r1, #128	@ 0x80
 8002186:	2200      	movs	r2, #0
 8002188:	e7e4      	b.n	8002154 <SPI_EndRxTransaction+0x18>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800218a:	9200      	str	r2, [sp, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	2200      	movs	r2, #0
 8002190:	e7e0      	b.n	8002154 <SPI_EndRxTransaction+0x18>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002192:	2320      	movs	r3, #32
 8002194:	6d62      	ldr	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002196:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002198:	4313      	orrs	r3, r2
 800219a:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 800219c:	e7e0      	b.n	8002160 <SPI_EndRxTransaction+0x24>

0800219e <HAL_SPI_Init>:
{
 800219e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a0:	0004      	movs	r4, r0
    return HAL_ERROR;
 80021a2:	2001      	movs	r0, #1
  if (hspi == NULL)
 80021a4:	2c00      	cmp	r4, #0
 80021a6:	d050      	beq.n	800224a <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d14e      	bne.n	800224c <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ae:	2282      	movs	r2, #130	@ 0x82
 80021b0:	6861      	ldr	r1, [r4, #4]
 80021b2:	0052      	lsls	r2, r2, #1
 80021b4:	4291      	cmp	r1, r2
 80021b6:	d000      	beq.n	80021ba <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021b8:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ba:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80021bc:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021be:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80021c0:	3551      	adds	r5, #81	@ 0x51
 80021c2:	782b      	ldrb	r3, [r5, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80021ca:	0023      	movs	r3, r4
 80021cc:	3350      	adds	r3, #80	@ 0x50
    HAL_SPI_MspInit(hspi);
 80021ce:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80021d0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80021d2:	f7fe fea5 	bl	8000f20 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80021d6:	2602      	movs	r6, #2
  __HAL_SPI_DISABLE(hspi);
 80021d8:	2240      	movs	r2, #64	@ 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021da:	2082      	movs	r0, #130	@ 0x82
 80021dc:	2784      	movs	r7, #132	@ 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 80021de:	702e      	strb	r6, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80021e0:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021e2:	0040      	lsls	r0, r0, #1
  __HAL_SPI_DISABLE(hspi);
 80021e4:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021e6:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 80021e8:	4393      	bics	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021ec:	6863      	ldr	r3, [r4, #4]
 80021ee:	69a2      	ldr	r2, [r4, #24]
 80021f0:	4003      	ands	r3, r0
 80021f2:	68a0      	ldr	r0, [r4, #8]
 80021f4:	4038      	ands	r0, r7
 80021f6:	2780      	movs	r7, #128	@ 0x80
 80021f8:	4303      	orrs	r3, r0
 80021fa:	68e0      	ldr	r0, [r4, #12]
 80021fc:	013f      	lsls	r7, r7, #4
 80021fe:	4038      	ands	r0, r7
 8002200:	4303      	orrs	r3, r0
 8002202:	6920      	ldr	r0, [r4, #16]
 8002204:	2738      	movs	r7, #56	@ 0x38
 8002206:	4030      	ands	r0, r6
 8002208:	4303      	orrs	r3, r0
 800220a:	6960      	ldr	r0, [r4, #20]
 800220c:	3e01      	subs	r6, #1
 800220e:	4030      	ands	r0, r6
 8002210:	4303      	orrs	r3, r0
 8002212:	2080      	movs	r0, #128	@ 0x80
 8002214:	0080      	lsls	r0, r0, #2
 8002216:	4010      	ands	r0, r2
 8002218:	4303      	orrs	r3, r0
 800221a:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800221c:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800221e:	4038      	ands	r0, r7
 8002220:	4303      	orrs	r3, r0
 8002222:	6a20      	ldr	r0, [r4, #32]
 8002224:	3748      	adds	r7, #72	@ 0x48
 8002226:	4038      	ands	r0, r7
 8002228:	2780      	movs	r7, #128	@ 0x80
 800222a:	4303      	orrs	r3, r0
 800222c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800222e:	01bf      	lsls	r7, r7, #6
 8002230:	4038      	ands	r0, r7
 8002232:	4303      	orrs	r3, r0
 8002234:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002236:	2304      	movs	r3, #4
 8002238:	2010      	movs	r0, #16
 800223a:	401a      	ands	r2, r3
 800223c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800223e:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002240:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002242:	431a      	orrs	r2, r3
 8002244:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002246:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002248:	702e      	strb	r6, [r5, #0]
}
 800224a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002250:	6163      	str	r3, [r4, #20]
 8002252:	e7b2      	b.n	80021ba <HAL_SPI_Init+0x1c>

08002254 <HAL_SPI_Transmit>:
{
 8002254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002256:	0004      	movs	r4, r0
 8002258:	b085      	sub	sp, #20
 800225a:	001e      	movs	r6, r3
 800225c:	000d      	movs	r5, r1
 800225e:	0017      	movs	r7, r2
  tickstart = HAL_GetTick();
 8002260:	f7fe ff68 	bl	8001134 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002264:	0023      	movs	r3, r4
 8002266:	3351      	adds	r3, #81	@ 0x51
  tickstart = HAL_GetTick();
 8002268:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b2d8      	uxtb	r0, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d000      	beq.n	8002276 <HAL_SPI_Transmit+0x22>
 8002274:	e0ae      	b.n	80023d4 <HAL_SPI_Transmit+0x180>
  if ((pData == NULL) || (Size == 0U))
 8002276:	2d00      	cmp	r5, #0
 8002278:	d100      	bne.n	800227c <HAL_SPI_Transmit+0x28>
 800227a:	e07c      	b.n	8002376 <HAL_SPI_Transmit+0x122>
 800227c:	2f00      	cmp	r7, #0
 800227e:	d07a      	beq.n	8002376 <HAL_SPI_Transmit+0x122>
  __HAL_LOCK(hspi);
 8002280:	0023      	movs	r3, r4
 8002282:	3350      	adds	r3, #80	@ 0x50
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	2a01      	cmp	r2, #1
 8002288:	d100      	bne.n	800228c <HAL_SPI_Transmit+0x38>
 800228a:	e0a3      	b.n	80023d4 <HAL_SPI_Transmit+0x180>
 800228c:	7018      	strb	r0, [r3, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800228e:	2303      	movs	r3, #3
 8002290:	9a01      	ldr	r2, [sp, #4]
 8002292:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002294:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002296:	2280      	movs	r2, #128	@ 0x80
 8002298:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800229c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800229e:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->RxXferSize  = 0U;
 80022a0:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80022a2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80022a4:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80022a6:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80022a8:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_DISABLE(hspi);
 80022aa:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 80022ac:	86a7      	strh	r7, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022ae:	0212      	lsls	r2, r2, #8
 80022b0:	4291      	cmp	r1, r2
 80022b2:	d108      	bne.n	80022c6 <HAL_SPI_Transmit+0x72>
    __HAL_SPI_DISABLE(hspi);
 80022b4:	2140      	movs	r1, #64	@ 0x40
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	438a      	bics	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022bc:	2280      	movs	r2, #128	@ 0x80
 80022be:	6819      	ldr	r1, [r3, #0]
 80022c0:	01d2      	lsls	r2, r2, #7
 80022c2:	430a      	orrs	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022c6:	2240      	movs	r2, #64	@ 0x40
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	4211      	tst	r1, r2
 80022cc:	d102      	bne.n	80022d4 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 80022ce:	6819      	ldr	r1, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022d4:	2180      	movs	r1, #128	@ 0x80
 80022d6:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d8:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022da:	0109      	lsls	r1, r1, #4
 80022dc:	4288      	cmp	r0, r1
 80022de:	d14c      	bne.n	800237a <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022e0:	2a00      	cmp	r2, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_SPI_Transmit+0x94>
 80022e4:	2f01      	cmp	r7, #1
 80022e6:	d107      	bne.n	80022f8 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022e8:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ea:	3502      	adds	r5, #2
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022ec:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80022ee:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f0:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	86e3      	strh	r3, [r4, #54]	@ 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022f8:	2502      	movs	r5, #2
 80022fa:	e00c      	b.n	8002316 <HAL_SPI_Transmit+0xc2>
 80022fc:	6822      	ldr	r2, [r4, #0]
 80022fe:	6893      	ldr	r3, [r2, #8]
 8002300:	422b      	tst	r3, r5
 8002302:	d028      	beq.n	8002356 <HAL_SPI_Transmit+0x102>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002304:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002306:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002308:	3302      	adds	r3, #2
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800230a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800230c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800230e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002310:	3b01      	subs	r3, #1
 8002312:	b29b      	uxth	r3, r3
 8002314:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8002316:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ef      	bne.n	80022fc <HAL_SPI_Transmit+0xa8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800231c:	0031      	movs	r1, r6
 800231e:	0020      	movs	r0, r4
 8002320:	9a00      	ldr	r2, [sp, #0]
 8002322:	f7ff fecd 	bl	80020c0 <SPI_EndRxTxTransaction>
 8002326:	2800      	cmp	r0, #0
 8002328:	d151      	bne.n	80023ce <HAL_SPI_Transmit+0x17a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800232a:	68a3      	ldr	r3, [r4, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <HAL_SPI_Transmit+0xea>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002330:	9303      	str	r3, [sp, #12]
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	9203      	str	r2, [sp, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	9303      	str	r3, [sp, #12]
 800233c:	9b03      	ldr	r3, [sp, #12]
  hspi->State = HAL_SPI_STATE_READY;
 800233e:	2301      	movs	r3, #1
 8002340:	9a01      	ldr	r2, [sp, #4]
 8002342:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8002344:	0023      	movs	r3, r4
 8002346:	2200      	movs	r2, #0
 8002348:	3350      	adds	r3, #80	@ 0x50
 800234a:	701a      	strb	r2, [r3, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800234c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800234e:	1e43      	subs	r3, r0, #1
 8002350:	4198      	sbcs	r0, r3
 8002352:	b2c0      	uxtb	r0, r0
 8002354:	e00f      	b.n	8002376 <HAL_SPI_Transmit+0x122>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002356:	f7fe feed 	bl	8001134 <HAL_GetTick>
 800235a:	9b00      	ldr	r3, [sp, #0]
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	42b0      	cmp	r0, r6
 8002360:	d3d9      	bcc.n	8002316 <HAL_SPI_Transmit+0xc2>
 8002362:	1c73      	adds	r3, r6, #1
 8002364:	d0d7      	beq.n	8002316 <HAL_SPI_Transmit+0xc2>
          hspi->State = HAL_SPI_STATE_READY;
 8002366:	0023      	movs	r3, r4
 8002368:	2201      	movs	r2, #1
 800236a:	3351      	adds	r3, #81	@ 0x51
 800236c:	701a      	strb	r2, [r3, #0]
          __HAL_UNLOCK(hspi);
 800236e:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002370:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 8002372:	3450      	adds	r4, #80	@ 0x50
 8002374:	7023      	strb	r3, [r4, #0]
}
 8002376:	b005      	add	sp, #20
 8002378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800237a:	2a00      	cmp	r2, #0
 800237c:	d001      	beq.n	8002382 <HAL_SPI_Transmit+0x12e>
 800237e:	2f01      	cmp	r7, #1
 8002380:	d108      	bne.n	8002394 <HAL_SPI_Transmit+0x140>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002382:	782a      	ldrb	r2, [r5, #0]
 8002384:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002386:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002388:	3301      	adds	r3, #1
 800238a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800238c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800238e:	3b01      	subs	r3, #1
 8002390:	b29b      	uxth	r3, r3
 8002392:	86e3      	strh	r3, [r4, #54]	@ 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002394:	2502      	movs	r5, #2
 8002396:	e00d      	b.n	80023b4 <HAL_SPI_Transmit+0x160>
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	422a      	tst	r2, r5
 800239e:	d00d      	beq.n	80023bc <HAL_SPI_Transmit+0x168>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023a0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80023a2:	7812      	ldrb	r2, [r2, #0]
 80023a4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023a8:	3301      	adds	r3, #1
 80023aa:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80023ac:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80023b4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ee      	bne.n	8002398 <HAL_SPI_Transmit+0x144>
 80023ba:	e7af      	b.n	800231c <HAL_SPI_Transmit+0xc8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023bc:	f7fe feba 	bl	8001134 <HAL_GetTick>
 80023c0:	9b00      	ldr	r3, [sp, #0]
 80023c2:	1ac0      	subs	r0, r0, r3
 80023c4:	42b0      	cmp	r0, r6
 80023c6:	d3f5      	bcc.n	80023b4 <HAL_SPI_Transmit+0x160>
 80023c8:	1c73      	adds	r3, r6, #1
 80023ca:	d0f3      	beq.n	80023b4 <HAL_SPI_Transmit+0x160>
 80023cc:	e7cb      	b.n	8002366 <HAL_SPI_Transmit+0x112>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023ce:	2320      	movs	r3, #32
 80023d0:	6563      	str	r3, [r4, #84]	@ 0x54
 80023d2:	e7aa      	b.n	800232a <HAL_SPI_Transmit+0xd6>
    return HAL_BUSY;
 80023d4:	2002      	movs	r0, #2
 80023d6:	e7ce      	b.n	8002376 <HAL_SPI_Transmit+0x122>

080023d8 <HAL_SPI_TransmitReceive>:
{
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023da:	0004      	movs	r4, r0
 80023dc:	b085      	sub	sp, #20
 80023de:	000d      	movs	r5, r1
 80023e0:	0017      	movs	r7, r2
 80023e2:	001e      	movs	r6, r3
  tickstart = HAL_GetTick();
 80023e4:	f7fe fea6 	bl	8001134 <HAL_GetTick>
  tmp_state           = hspi->State;
 80023e8:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80023ea:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 80023ec:	3351      	adds	r3, #81	@ 0x51
 80023ee:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80023f0:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80023f2:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d00c      	beq.n	8002412 <HAL_SPI_TransmitReceive+0x3a>
 80023f8:	2382      	movs	r3, #130	@ 0x82
    return HAL_BUSY;
 80023fa:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4299      	cmp	r1, r3
 8002400:	d000      	beq.n	8002404 <HAL_SPI_TransmitReceive+0x2c>
 8002402:	e091      	b.n	8002528 <HAL_SPI_TransmitReceive+0x150>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002404:	68a3      	ldr	r3, [r4, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d000      	beq.n	800240c <HAL_SPI_TransmitReceive+0x34>
 800240a:	e08d      	b.n	8002528 <HAL_SPI_TransmitReceive+0x150>
 800240c:	2a04      	cmp	r2, #4
 800240e:	d000      	beq.n	8002412 <HAL_SPI_TransmitReceive+0x3a>
 8002410:	e08a      	b.n	8002528 <HAL_SPI_TransmitReceive+0x150>
    return HAL_ERROR;
 8002412:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002414:	2d00      	cmp	r5, #0
 8002416:	d100      	bne.n	800241a <HAL_SPI_TransmitReceive+0x42>
 8002418:	e086      	b.n	8002528 <HAL_SPI_TransmitReceive+0x150>
 800241a:	2f00      	cmp	r7, #0
 800241c:	d100      	bne.n	8002420 <HAL_SPI_TransmitReceive+0x48>
 800241e:	e083      	b.n	8002528 <HAL_SPI_TransmitReceive+0x150>
 8002420:	2e00      	cmp	r6, #0
 8002422:	d100      	bne.n	8002426 <HAL_SPI_TransmitReceive+0x4e>
 8002424:	e080      	b.n	8002528 <HAL_SPI_TransmitReceive+0x150>
  __HAL_LOCK(hspi);
 8002426:	0023      	movs	r3, r4
 8002428:	3350      	adds	r3, #80	@ 0x50
 800242a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800242c:	1800      	adds	r0, r0, r0
  __HAL_LOCK(hspi);
 800242e:	2a01      	cmp	r2, #1
 8002430:	d100      	bne.n	8002434 <HAL_SPI_TransmitReceive+0x5c>
 8002432:	e079      	b.n	8002528 <HAL_SPI_TransmitReceive+0x150>
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002438:	785a      	ldrb	r2, [r3, #1]
 800243a:	3301      	adds	r3, #1
 800243c:	2a04      	cmp	r2, #4
 800243e:	d001      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002440:	2205      	movs	r2, #5
 8002442:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002444:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002446:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002448:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxXferCount = Size;
 800244a:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 800244c:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800244e:	6810      	ldr	r0, [r2, #0]
  hspi->RxISR       = NULL;
 8002450:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002452:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002454:	3340      	adds	r3, #64	@ 0x40
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002456:	63a7      	str	r7, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002458:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800245a:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800245c:	86a6      	strh	r6, [r4, #52]	@ 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800245e:	4218      	tst	r0, r3
 8002460:	d102      	bne.n	8002468 <HAL_SPI_TransmitReceive+0x90>
    __HAL_SPI_ENABLE(hspi);
 8002462:	6810      	ldr	r0, [r2, #0]
 8002464:	4303      	orrs	r3, r0
 8002466:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	68e0      	ldr	r0, [r4, #12]
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	4298      	cmp	r0, r3
 8002470:	d15c      	bne.n	800252c <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002472:	2900      	cmp	r1, #0
 8002474:	d001      	beq.n	800247a <HAL_SPI_TransmitReceive+0xa2>
 8002476:	2e01      	cmp	r6, #1
 8002478:	d107      	bne.n	800248a <HAL_SPI_TransmitReceive+0xb2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800247a:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800247c:	3502      	adds	r5, #2
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800247e:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8002480:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002482:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8002484:	3b01      	subs	r3, #1
 8002486:	b29b      	uxth	r3, r3
 8002488:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800248a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800248c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800248e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002490:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002492:	2b00      	cmp	r3, #0
 8002494:	d112      	bne.n	80024bc <HAL_SPI_TransmitReceive+0xe4>
 8002496:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10f      	bne.n	80024bc <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800249c:	0020      	movs	r0, r4
 800249e:	9a01      	ldr	r2, [sp, #4]
 80024a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80024a2:	f7ff fe0d 	bl	80020c0 <SPI_EndRxTxTransaction>
 80024a6:	0023      	movs	r3, r4
 80024a8:	3350      	adds	r3, #80	@ 0x50
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d100      	bne.n	80024b0 <HAL_SPI_TransmitReceive+0xd8>
 80024ae:	e086      	b.n	80025be <HAL_SPI_TransmitReceive+0x1e6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024b0:	2220      	movs	r2, #32
 80024b2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80024b4:	2200      	movs	r2, #0
    return HAL_ERROR;
 80024b6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 80024b8:	701a      	strb	r2, [r3, #0]
    return HAL_ERROR;
 80024ba:	e035      	b.n	8002528 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024bc:	6821      	ldr	r1, [r4, #0]
 80024be:	688b      	ldr	r3, [r1, #8]
 80024c0:	423b      	tst	r3, r7
 80024c2:	d00e      	beq.n	80024e2 <HAL_SPI_TransmitReceive+0x10a>
 80024c4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_SPI_TransmitReceive+0x10a>
 80024ca:	2d01      	cmp	r5, #1
 80024cc:	d108      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80024d0:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d2:	3302      	adds	r3, #2
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024d4:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d6:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80024d8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29b      	uxth	r3, r3
 80024de:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 80024e0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024e2:	688b      	ldr	r3, [r1, #8]
 80024e4:	001a      	movs	r2, r3
 80024e6:	4032      	ands	r2, r6
 80024e8:	4233      	tst	r3, r6
 80024ea:	d00c      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x12e>
 80024ec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x12e>
        txallowed = 1U;
 80024f2:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024f4:	68c9      	ldr	r1, [r1, #12]
 80024f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80024f8:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024fa:	3302      	adds	r3, #2
 80024fc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80024fe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002500:	3b01      	subs	r3, #1
 8002502:	b29b      	uxth	r3, r3
 8002504:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002506:	f7fe fe15 	bl	8001134 <HAL_GetTick>
 800250a:	9b01      	ldr	r3, [sp, #4]
 800250c:	1ac0      	subs	r0, r0, r3
 800250e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002510:	4298      	cmp	r0, r3
 8002512:	d3bd      	bcc.n	8002490 <HAL_SPI_TransmitReceive+0xb8>
 8002514:	3301      	adds	r3, #1
 8002516:	d0bb      	beq.n	8002490 <HAL_SPI_TransmitReceive+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8002518:	0023      	movs	r3, r4
 800251a:	2201      	movs	r2, #1
 800251c:	3351      	adds	r3, #81	@ 0x51
 800251e:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8002520:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002522:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002524:	3450      	adds	r4, #80	@ 0x50
 8002526:	7023      	strb	r3, [r4, #0]
}
 8002528:	b005      	add	sp, #20
 800252a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800252c:	2900      	cmp	r1, #0
 800252e:	d001      	beq.n	8002534 <HAL_SPI_TransmitReceive+0x15c>
 8002530:	2e01      	cmp	r6, #1
 8002532:	d108      	bne.n	8002546 <HAL_SPI_TransmitReceive+0x16e>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002534:	782b      	ldrb	r3, [r5, #0]
 8002536:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002538:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800253a:	3301      	adds	r3, #1
 800253c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800253e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002540:	3b01      	subs	r3, #1
 8002542:	b29b      	uxth	r3, r3
 8002544:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8002546:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002548:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800254a:	002e      	movs	r6, r5
 800254c:	e030      	b.n	80025b0 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	423a      	tst	r2, r7
 8002554:	d00f      	beq.n	8002576 <HAL_SPI_TransmitReceive+0x19e>
 8002556:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8002558:	2a00      	cmp	r2, #0
 800255a:	d00c      	beq.n	8002576 <HAL_SPI_TransmitReceive+0x19e>
 800255c:	2d01      	cmp	r5, #1
 800255e:	d109      	bne.n	8002574 <HAL_SPI_TransmitReceive+0x19c>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002560:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002562:	7812      	ldrb	r2, [r2, #0]
 8002564:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002566:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002568:	3301      	adds	r3, #1
 800256a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800256c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800256e:	3b01      	subs	r3, #1
 8002570:	b29b      	uxth	r3, r3
 8002572:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8002574:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	6899      	ldr	r1, [r3, #8]
 800257a:	000a      	movs	r2, r1
 800257c:	4032      	ands	r2, r6
 800257e:	4231      	tst	r1, r6
 8002580:	d00d      	beq.n	800259e <HAL_SPI_TransmitReceive+0x1c6>
 8002582:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8002584:	2900      	cmp	r1, #0
 8002586:	d00a      	beq.n	800259e <HAL_SPI_TransmitReceive+0x1c6>
        txallowed = 1U;
 8002588:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800258a:	68d9      	ldr	r1, [r3, #12]
 800258c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800258e:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 8002590:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002592:	3301      	adds	r3, #1
 8002594:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8002596:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002598:	3b01      	subs	r3, #1
 800259a:	b29b      	uxth	r3, r3
 800259c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800259e:	f7fe fdc9 	bl	8001134 <HAL_GetTick>
 80025a2:	9b01      	ldr	r3, [sp, #4]
 80025a4:	1ac0      	subs	r0, r0, r3
 80025a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80025a8:	4298      	cmp	r0, r3
 80025aa:	d301      	bcc.n	80025b0 <HAL_SPI_TransmitReceive+0x1d8>
 80025ac:	3301      	adds	r3, #1
 80025ae:	d1b3      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x140>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1cb      	bne.n	800254e <HAL_SPI_TransmitReceive+0x176>
 80025b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1c8      	bne.n	800254e <HAL_SPI_TransmitReceive+0x176>
 80025bc:	e76e      	b.n	800249c <HAL_SPI_TransmitReceive+0xc4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025be:	68a2      	ldr	r2, [r4, #8]
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	d106      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x1fa>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025c4:	9203      	str	r2, [sp, #12]
 80025c6:	6822      	ldr	r2, [r4, #0]
 80025c8:	68d1      	ldr	r1, [r2, #12]
 80025ca:	9103      	str	r1, [sp, #12]
 80025cc:	6892      	ldr	r2, [r2, #8]
 80025ce:	9203      	str	r2, [sp, #12]
 80025d0:	9a03      	ldr	r2, [sp, #12]
  hspi->State = HAL_SPI_STATE_READY;
 80025d2:	0022      	movs	r2, r4
 80025d4:	2101      	movs	r1, #1
 80025d6:	3251      	adds	r2, #81	@ 0x51
 80025d8:	7011      	strb	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025de:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80025e0:	1e43      	subs	r3, r0, #1
 80025e2:	4198      	sbcs	r0, r3
 80025e4:	b2c0      	uxtb	r0, r0
 80025e6:	e79f      	b.n	8002528 <HAL_SPI_TransmitReceive+0x150>

080025e8 <HAL_SPI_Receive>:
{
 80025e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 80025ea:	0006      	movs	r6, r0
{
 80025ec:	b087      	sub	sp, #28
 80025ee:	9103      	str	r1, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 80025f0:	3651      	adds	r6, #81	@ 0x51
{
 80025f2:	001d      	movs	r5, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 80025f4:	7833      	ldrb	r3, [r6, #0]
{
 80025f6:	0004      	movs	r4, r0
 80025f8:	0017      	movs	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 80025fa:	b2d8      	uxtb	r0, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d002      	beq.n	8002606 <HAL_SPI_Receive+0x1e>
    return HAL_BUSY;
 8002600:	2002      	movs	r0, #2
}
 8002602:	b007      	add	sp, #28
 8002604:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8002606:	9b03      	ldr	r3, [sp, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0fa      	beq.n	8002602 <HAL_SPI_Receive+0x1a>
 800260c:	2a00      	cmp	r2, #0
 800260e:	d0f8      	beq.n	8002602 <HAL_SPI_Receive+0x1a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002610:	2382      	movs	r3, #130	@ 0x82
 8002612:	6862      	ldr	r2, [r4, #4]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	429a      	cmp	r2, r3
 8002618:	d10c      	bne.n	8002634 <HAL_SPI_Receive+0x4c>
 800261a:	68a3      	ldr	r3, [r4, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <HAL_SPI_Receive+0x4c>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002620:	9a03      	ldr	r2, [sp, #12]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002622:	3304      	adds	r3, #4
 8002624:	7033      	strb	r3, [r6, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002626:	0011      	movs	r1, r2
 8002628:	003b      	movs	r3, r7
 800262a:	0020      	movs	r0, r4
 800262c:	9500      	str	r5, [sp, #0]
 800262e:	f7ff fed3 	bl	80023d8 <HAL_SPI_TransmitReceive>
 8002632:	e7e6      	b.n	8002602 <HAL_SPI_Receive+0x1a>
  tickstart = HAL_GetTick();
 8002634:	f7fe fd7e 	bl	8001134 <HAL_GetTick>
  __HAL_LOCK(hspi);
 8002638:	0023      	movs	r3, r4
 800263a:	3350      	adds	r3, #80	@ 0x50
  tickstart = HAL_GetTick();
 800263c:	9005      	str	r0, [sp, #20]
  __HAL_LOCK(hspi);
 800263e:	9304      	str	r3, [sp, #16]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d0dc      	beq.n	8002600 <HAL_SPI_Receive+0x18>
 8002646:	2301      	movs	r3, #1
 8002648:	9a04      	ldr	r2, [sp, #16]
 800264a:	7013      	strb	r3, [r2, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800264c:	9a03      	ldr	r2, [sp, #12]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800264e:	3303      	adds	r3, #3
 8002650:	7033      	strb	r3, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002652:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002654:	63a2      	str	r2, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002656:	2280      	movs	r2, #128	@ 0x80
 8002658:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800265a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800265c:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->RxXferCount = Size;
 800265e:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = 0U;
 8002660:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002662:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002664:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002666:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxXferSize  = Size;
 8002668:	87a7      	strh	r7, [r4, #60]	@ 0x3c
    __HAL_SPI_DISABLE(hspi);
 800266a:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800266c:	0212      	lsls	r2, r2, #8
 800266e:	4291      	cmp	r1, r2
 8002670:	d107      	bne.n	8002682 <HAL_SPI_Receive+0x9a>
    __HAL_SPI_DISABLE(hspi);
 8002672:	2140      	movs	r1, #64	@ 0x40
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	438a      	bics	r2, r1
 8002678:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	492d      	ldr	r1, [pc, #180]	@ (8002734 <HAL_SPI_Receive+0x14c>)
 800267e:	400a      	ands	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002682:	2240      	movs	r2, #64	@ 0x40
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	4211      	tst	r1, r2
 8002688:	d102      	bne.n	8002690 <HAL_SPI_Receive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 800268a:	6819      	ldr	r1, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002690:	68e3      	ldr	r3, [r4, #12]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002692:	2701      	movs	r7, #1
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002694:	2b00      	cmp	r3, #0
 8002696:	d13d      	bne.n	8002714 <HAL_SPI_Receive+0x12c>
    while (hspi->RxXferCount > 0U)
 8002698:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800269a:	2b00      	cmp	r3, #0
 800269c:	d110      	bne.n	80026c0 <HAL_SPI_Receive+0xd8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800269e:	0029      	movs	r1, r5
 80026a0:	0020      	movs	r0, r4
 80026a2:	9a05      	ldr	r2, [sp, #20]
 80026a4:	f7ff fd4a 	bl	800213c <SPI_EndRxTransaction>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d140      	bne.n	800272e <HAL_SPI_Receive+0x146>
  hspi->State = HAL_SPI_STATE_READY;
 80026ac:	2301      	movs	r3, #1
 80026ae:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(hspi);
 80026b0:	2300      	movs	r3, #0
 80026b2:	9a04      	ldr	r2, [sp, #16]
 80026b4:	7013      	strb	r3, [r2, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026b6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80026b8:	1e43      	subs	r3, r0, #1
 80026ba:	4198      	sbcs	r0, r3
 80026bc:	b2c0      	uxtb	r0, r0
 80026be:	e7a0      	b.n	8002602 <HAL_SPI_Receive+0x1a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	423a      	tst	r2, r7
 80026c6:	d00a      	beq.n	80026de <HAL_SPI_Receive+0xf6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026c8:	7b1b      	ldrb	r3, [r3, #12]
 80026ca:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80026cc:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80026d0:	3301      	adds	r3, #1
 80026d2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80026d4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29b      	uxth	r3, r3
 80026da:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80026dc:	e7dc      	b.n	8002698 <HAL_SPI_Receive+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026de:	f7fe fd29 	bl	8001134 <HAL_GetTick>
 80026e2:	9b05      	ldr	r3, [sp, #20]
 80026e4:	1ac0      	subs	r0, r0, r3
 80026e6:	42a8      	cmp	r0, r5
 80026e8:	d3d6      	bcc.n	8002698 <HAL_SPI_Receive+0xb0>
 80026ea:	1c6b      	adds	r3, r5, #1
 80026ec:	d0d4      	beq.n	8002698 <HAL_SPI_Receive+0xb0>
          __HAL_UNLOCK(hspi);
 80026ee:	2300      	movs	r3, #0
          hspi->State = HAL_SPI_STATE_READY;
 80026f0:	7037      	strb	r7, [r6, #0]
          __HAL_UNLOCK(hspi);
 80026f2:	9a04      	ldr	r2, [sp, #16]
          return HAL_TIMEOUT;
 80026f4:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 80026f6:	7013      	strb	r3, [r2, #0]
 80026f8:	e783      	b.n	8002602 <HAL_SPI_Receive+0x1a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	423a      	tst	r2, r7
 8002700:	d00c      	beq.n	800271c <HAL_SPI_Receive+0x134>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002706:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002708:	3302      	adds	r3, #2
 800270a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800270c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800270e:	3b01      	subs	r3, #1
 8002710:	b29b      	uxth	r3, r3
 8002712:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8002714:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ef      	bne.n	80026fa <HAL_SPI_Receive+0x112>
 800271a:	e7c0      	b.n	800269e <HAL_SPI_Receive+0xb6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800271c:	f7fe fd0a 	bl	8001134 <HAL_GetTick>
 8002720:	9b05      	ldr	r3, [sp, #20]
 8002722:	1ac0      	subs	r0, r0, r3
 8002724:	42a8      	cmp	r0, r5
 8002726:	d3f5      	bcc.n	8002714 <HAL_SPI_Receive+0x12c>
 8002728:	1c6b      	adds	r3, r5, #1
 800272a:	d0f3      	beq.n	8002714 <HAL_SPI_Receive+0x12c>
 800272c:	e7df      	b.n	80026ee <HAL_SPI_Receive+0x106>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800272e:	2320      	movs	r3, #32
 8002730:	6563      	str	r3, [r4, #84]	@ 0x54
 8002732:	e7bb      	b.n	80026ac <HAL_SPI_Receive+0xc4>
 8002734:	ffffbfff 	.word	0xffffbfff

08002738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002738:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800273a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273e:	2201      	movs	r2, #1
 8002740:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002744:	6801      	ldr	r1, [r0, #0]
 8002746:	4d12      	ldr	r5, [pc, #72]	@ (8002790 <UART_EndRxTransfer+0x58>)
 8002748:	680b      	ldr	r3, [r1, #0]
 800274a:	402b      	ands	r3, r5
 800274c:	600b      	str	r3, [r1, #0]
 800274e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002752:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002756:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275a:	6801      	ldr	r1, [r0, #0]
 800275c:	688b      	ldr	r3, [r1, #8]
 800275e:	4393      	bics	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
 8002762:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002766:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002768:	4293      	cmp	r3, r2
 800276a:	d10a      	bne.n	8002782 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002770:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002774:	2410      	movs	r4, #16
 8002776:	6802      	ldr	r2, [r0, #0]
 8002778:	6813      	ldr	r3, [r2, #0]
 800277a:	43a3      	bics	r3, r4
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002782:	2220      	movs	r2, #32
 8002784:	1d03      	adds	r3, r0, #4
 8002786:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002788:	2300      	movs	r3, #0
 800278a:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800278c:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800278e:	bd30      	pop	{r4, r5, pc}
 8002790:	fffffedf 	.word	0xfffffedf

08002794 <UART_SetConfig>:
{
 8002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002796:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002798:	6925      	ldr	r5, [r4, #16]
 800279a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800279c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800279e:	4329      	orrs	r1, r5
 80027a0:	6965      	ldr	r5, [r4, #20]
 80027a2:	69c3      	ldr	r3, [r0, #28]
 80027a4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027a6:	6810      	ldr	r0, [r2, #0]
 80027a8:	4d5c      	ldr	r5, [pc, #368]	@ (800291c <UART_SetConfig+0x188>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027aa:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027ac:	4028      	ands	r0, r5
 80027ae:	4301      	orrs	r1, r0
 80027b0:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b2:	6851      	ldr	r1, [r2, #4]
 80027b4:	485a      	ldr	r0, [pc, #360]	@ (8002920 <UART_SetConfig+0x18c>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027b6:	4d5b      	ldr	r5, [pc, #364]	@ (8002924 <UART_SetConfig+0x190>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b8:	4001      	ands	r1, r0
 80027ba:	68e0      	ldr	r0, [r4, #12]
 80027bc:	4301      	orrs	r1, r0
 80027be:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027c0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027c2:	42aa      	cmp	r2, r5
 80027c4:	d001      	beq.n	80027ca <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80027c6:	6a21      	ldr	r1, [r4, #32]
 80027c8:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ca:	6891      	ldr	r1, [r2, #8]
 80027cc:	4e56      	ldr	r6, [pc, #344]	@ (8002928 <UART_SetConfig+0x194>)
 80027ce:	4031      	ands	r1, r6
 80027d0:	4301      	orrs	r1, r0
 80027d2:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027d4:	4955      	ldr	r1, [pc, #340]	@ (800292c <UART_SetConfig+0x198>)
 80027d6:	428a      	cmp	r2, r1
 80027d8:	d118      	bne.n	800280c <UART_SetConfig+0x78>
 80027da:	200c      	movs	r0, #12
 80027dc:	4954      	ldr	r1, [pc, #336]	@ (8002930 <UART_SetConfig+0x19c>)
 80027de:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80027e0:	4002      	ands	r2, r0
 80027e2:	2a08      	cmp	r2, #8
 80027e4:	d100      	bne.n	80027e8 <UART_SetConfig+0x54>
 80027e6:	e082      	b.n	80028ee <UART_SetConfig+0x15a>
 80027e8:	d80b      	bhi.n	8002802 <UART_SetConfig+0x6e>
 80027ea:	2180      	movs	r1, #128	@ 0x80
 80027ec:	0209      	lsls	r1, r1, #8
 80027ee:	2a00      	cmp	r2, #0
 80027f0:	d000      	beq.n	80027f4 <UART_SetConfig+0x60>
 80027f2:	e072      	b.n	80028da <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f4:	428b      	cmp	r3, r1
 80027f6:	d04a      	beq.n	800288e <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetPCLK1Freq();
 80027f8:	f7ff fbf2 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80027fc:	2800      	cmp	r0, #0
 80027fe:	d017      	beq.n	8002830 <UART_SetConfig+0x9c>
 8002800:	e083      	b.n	800290a <UART_SetConfig+0x176>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002802:	2a0c      	cmp	r2, #12
 8002804:	d100      	bne.n	8002808 <UART_SetConfig+0x74>
 8002806:	e06d      	b.n	80028e4 <UART_SetConfig+0x150>
          pclk = (uint32_t) HSI_VALUE;
 8002808:	2001      	movs	r0, #1
 800280a:	e012      	b.n	8002832 <UART_SetConfig+0x9e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800280c:	42aa      	cmp	r2, r5
 800280e:	d1fb      	bne.n	8002808 <UART_SetConfig+0x74>
 8002810:	21c0      	movs	r1, #192	@ 0xc0
 8002812:	2080      	movs	r0, #128	@ 0x80
 8002814:	4a46      	ldr	r2, [pc, #280]	@ (8002930 <UART_SetConfig+0x19c>)
 8002816:	0109      	lsls	r1, r1, #4
 8002818:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800281a:	0100      	lsls	r0, r0, #4
 800281c:	400b      	ands	r3, r1
 800281e:	4283      	cmp	r3, r0
 8002820:	d010      	beq.n	8002844 <UART_SetConfig+0xb0>
 8002822:	d80a      	bhi.n	800283a <UART_SetConfig+0xa6>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d12f      	bne.n	8002888 <UART_SetConfig+0xf4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002828:	f7ff fbda 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800282c:	2800      	cmp	r0, #0
 800282e:	d110      	bne.n	8002852 <UART_SetConfig+0xbe>
          pclk = (uint32_t) HSI_VALUE;
 8002830:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8002836:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8002838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800283a:	428b      	cmp	r3, r1
 800283c:	d1e4      	bne.n	8002808 <UART_SetConfig+0x74>
 800283e:	2080      	movs	r0, #128	@ 0x80
 8002840:	0200      	lsls	r0, r0, #8
 8002842:	e006      	b.n	8002852 <UART_SetConfig+0xbe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002844:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 8002846:	4b3b      	ldr	r3, [pc, #236]	@ (8002934 <UART_SetConfig+0x1a0>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002848:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 800284a:	17c0      	asrs	r0, r0, #31
 800284c:	4018      	ands	r0, r3
 800284e:	4b3a      	ldr	r3, [pc, #232]	@ (8002938 <UART_SetConfig+0x1a4>)
 8002850:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002852:	2303      	movs	r3, #3
 8002854:	6862      	ldr	r2, [r4, #4]
 8002856:	4353      	muls	r3, r2
 8002858:	4283      	cmp	r3, r0
 800285a:	d8d5      	bhi.n	8002808 <UART_SetConfig+0x74>
          (pclk > (4096U * huart->Init.BaudRate)))
 800285c:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800285e:	4283      	cmp	r3, r0
 8002860:	d3d2      	bcc.n	8002808 <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002862:	2100      	movs	r1, #0
 8002864:	0e07      	lsrs	r7, r0, #24
 8002866:	0206      	lsls	r6, r0, #8
 8002868:	0850      	lsrs	r0, r2, #1
 800286a:	1836      	adds	r6, r6, r0
 800286c:	414f      	adcs	r7, r1
 800286e:	000b      	movs	r3, r1
 8002870:	0030      	movs	r0, r6
 8002872:	0039      	movs	r1, r7
 8002874:	f7fd fdd0 	bl	8000418 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002878:	4b30      	ldr	r3, [pc, #192]	@ (800293c <UART_SetConfig+0x1a8>)
 800287a:	18c2      	adds	r2, r0, r3
 800287c:	4b30      	ldr	r3, [pc, #192]	@ (8002940 <UART_SetConfig+0x1ac>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800287e:	429a      	cmp	r2, r3
 8002880:	d8c2      	bhi.n	8002808 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	60d8      	str	r0, [r3, #12]
 8002886:	e7d3      	b.n	8002830 <UART_SetConfig+0x9c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002888:	f7ff f84c 	bl	8001924 <HAL_RCC_GetSysClockFreq>
        break;
 800288c:	e7ce      	b.n	800282c <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 800288e:	f7ff fba7 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002892:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002894:	d0cc      	beq.n	8002830 <UART_SetConfig+0x9c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002896:	6861      	ldr	r1, [r4, #4]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	0848      	lsrs	r0, r1, #1
 800289c:	1818      	adds	r0, r3, r0
 800289e:	f7fd fc45 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028a2:	0002      	movs	r2, r0
 80028a4:	4b27      	ldr	r3, [pc, #156]	@ (8002944 <UART_SetConfig+0x1b0>)
 80028a6:	3a10      	subs	r2, #16
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d8ad      	bhi.n	8002808 <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ac:	230f      	movs	r3, #15
 80028ae:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028b0:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028b2:	439a      	bics	r2, r3
 80028b4:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028b6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80028b8:	6822      	ldr	r2, [r4, #0]
 80028ba:	4303      	orrs	r3, r0
 80028bc:	60d3      	str	r3, [r2, #12]
 80028be:	e7b7      	b.n	8002830 <UART_SetConfig+0x9c>
        pclk = HAL_RCC_GetSysClockFreq();
 80028c0:	f7ff f830 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80028c4:	e7e5      	b.n	8002892 <UART_SetConfig+0xfe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028c6:	680b      	ldr	r3, [r1, #0]
 80028c8:	4013      	ands	r3, r2
          pclk = (uint32_t) HSI_VALUE;
 80028ca:	1e5a      	subs	r2, r3, #1
 80028cc:	4193      	sbcs	r3, r2
 80028ce:	4a19      	ldr	r2, [pc, #100]	@ (8002934 <UART_SetConfig+0x1a0>)
 80028d0:	425b      	negs	r3, r3
 80028d2:	4013      	ands	r3, r2
 80028d4:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <UART_SetConfig+0x1a4>)
 80028d6:	189b      	adds	r3, r3, r2
 80028d8:	e7dd      	b.n	8002896 <UART_SetConfig+0x102>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028da:	428b      	cmp	r3, r1
 80028dc:	d0f0      	beq.n	80028c0 <UART_SetConfig+0x12c>
        pclk = HAL_RCC_GetSysClockFreq();
 80028de:	f7ff f821 	bl	8001924 <HAL_RCC_GetSysClockFreq>
        break;
 80028e2:	e78b      	b.n	80027fc <UART_SetConfig+0x68>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028e4:	2080      	movs	r0, #128	@ 0x80
 80028e6:	0200      	lsls	r0, r0, #8
 80028e8:	4283      	cmp	r3, r0
 80028ea:	d0d4      	beq.n	8002896 <UART_SetConfig+0x102>
 80028ec:	e00d      	b.n	800290a <UART_SetConfig+0x176>
 80028ee:	2080      	movs	r0, #128	@ 0x80
 80028f0:	2210      	movs	r2, #16
 80028f2:	0200      	lsls	r0, r0, #8
 80028f4:	4283      	cmp	r3, r0
 80028f6:	d0e6      	beq.n	80028c6 <UART_SetConfig+0x132>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028f8:	6808      	ldr	r0, [r1, #0]
 80028fa:	4010      	ands	r0, r2
          pclk = (uint32_t) HSI_VALUE;
 80028fc:	1e43      	subs	r3, r0, #1
 80028fe:	4198      	sbcs	r0, r3
 8002900:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <UART_SetConfig+0x1a0>)
 8002902:	4240      	negs	r0, r0
 8002904:	4018      	ands	r0, r3
 8002906:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <UART_SetConfig+0x1a4>)
 8002908:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800290a:	6861      	ldr	r1, [r4, #4]
 800290c:	084b      	lsrs	r3, r1, #1
 800290e:	1818      	adds	r0, r3, r0
 8002910:	f7fd fc0c 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002914:	0002      	movs	r2, r0
 8002916:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <UART_SetConfig+0x1b0>)
 8002918:	3a10      	subs	r2, #16
 800291a:	e7b0      	b.n	800287e <UART_SetConfig+0xea>
 800291c:	efff69f3 	.word	0xefff69f3
 8002920:	ffffcfff 	.word	0xffffcfff
 8002924:	40004800 	.word	0x40004800
 8002928:	fffff4ff 	.word	0xfffff4ff
 800292c:	40004400 	.word	0x40004400
 8002930:	40021000 	.word	0x40021000
 8002934:	ff48e500 	.word	0xff48e500
 8002938:	00f42400 	.word	0x00f42400
 800293c:	fffffd00 	.word	0xfffffd00
 8002940:	000ffcff 	.word	0x000ffcff
 8002944:	0000ffef 	.word	0x0000ffef

08002948 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002948:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800294a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800294c:	071a      	lsls	r2, r3, #28
 800294e:	d506      	bpl.n	800295e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002950:	6801      	ldr	r1, [r0, #0]
 8002952:	4c28      	ldr	r4, [pc, #160]	@ (80029f4 <UART_AdvFeatureConfig+0xac>)
 8002954:	684a      	ldr	r2, [r1, #4]
 8002956:	4022      	ands	r2, r4
 8002958:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800295a:	4322      	orrs	r2, r4
 800295c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800295e:	07da      	lsls	r2, r3, #31
 8002960:	d506      	bpl.n	8002970 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002962:	6801      	ldr	r1, [r0, #0]
 8002964:	4c24      	ldr	r4, [pc, #144]	@ (80029f8 <UART_AdvFeatureConfig+0xb0>)
 8002966:	684a      	ldr	r2, [r1, #4]
 8002968:	4022      	ands	r2, r4
 800296a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800296c:	4322      	orrs	r2, r4
 800296e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002970:	079a      	lsls	r2, r3, #30
 8002972:	d506      	bpl.n	8002982 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002974:	6801      	ldr	r1, [r0, #0]
 8002976:	4c21      	ldr	r4, [pc, #132]	@ (80029fc <UART_AdvFeatureConfig+0xb4>)
 8002978:	684a      	ldr	r2, [r1, #4]
 800297a:	4022      	ands	r2, r4
 800297c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800297e:	4322      	orrs	r2, r4
 8002980:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002982:	075a      	lsls	r2, r3, #29
 8002984:	d506      	bpl.n	8002994 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002986:	6801      	ldr	r1, [r0, #0]
 8002988:	4c1d      	ldr	r4, [pc, #116]	@ (8002a00 <UART_AdvFeatureConfig+0xb8>)
 800298a:	684a      	ldr	r2, [r1, #4]
 800298c:	4022      	ands	r2, r4
 800298e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002990:	4322      	orrs	r2, r4
 8002992:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002994:	06da      	lsls	r2, r3, #27
 8002996:	d506      	bpl.n	80029a6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002998:	6801      	ldr	r1, [r0, #0]
 800299a:	4c1a      	ldr	r4, [pc, #104]	@ (8002a04 <UART_AdvFeatureConfig+0xbc>)
 800299c:	688a      	ldr	r2, [r1, #8]
 800299e:	4022      	ands	r2, r4
 80029a0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80029a2:	4322      	orrs	r2, r4
 80029a4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029a6:	069a      	lsls	r2, r3, #26
 80029a8:	d506      	bpl.n	80029b8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029aa:	6801      	ldr	r1, [r0, #0]
 80029ac:	4c16      	ldr	r4, [pc, #88]	@ (8002a08 <UART_AdvFeatureConfig+0xc0>)
 80029ae:	688a      	ldr	r2, [r1, #8]
 80029b0:	4022      	ands	r2, r4
 80029b2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80029b4:	4322      	orrs	r2, r4
 80029b6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029b8:	065a      	lsls	r2, r3, #25
 80029ba:	d510      	bpl.n	80029de <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029bc:	6801      	ldr	r1, [r0, #0]
 80029be:	4d13      	ldr	r5, [pc, #76]	@ (8002a0c <UART_AdvFeatureConfig+0xc4>)
 80029c0:	684a      	ldr	r2, [r1, #4]
 80029c2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80029c4:	402a      	ands	r2, r5
 80029c6:	4322      	orrs	r2, r4
 80029c8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029ca:	2280      	movs	r2, #128	@ 0x80
 80029cc:	0352      	lsls	r2, r2, #13
 80029ce:	4294      	cmp	r4, r2
 80029d0:	d105      	bne.n	80029de <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029d2:	684a      	ldr	r2, [r1, #4]
 80029d4:	4c0e      	ldr	r4, [pc, #56]	@ (8002a10 <UART_AdvFeatureConfig+0xc8>)
 80029d6:	4022      	ands	r2, r4
 80029d8:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80029da:	4322      	orrs	r2, r4
 80029dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	d506      	bpl.n	80029f0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029e2:	6802      	ldr	r2, [r0, #0]
 80029e4:	490b      	ldr	r1, [pc, #44]	@ (8002a14 <UART_AdvFeatureConfig+0xcc>)
 80029e6:	6853      	ldr	r3, [r2, #4]
 80029e8:	400b      	ands	r3, r1
 80029ea:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6053      	str	r3, [r2, #4]
}
 80029f0:	bd30      	pop	{r4, r5, pc}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	ffff7fff 	.word	0xffff7fff
 80029f8:	fffdffff 	.word	0xfffdffff
 80029fc:	fffeffff 	.word	0xfffeffff
 8002a00:	fffbffff 	.word	0xfffbffff
 8002a04:	ffffefff 	.word	0xffffefff
 8002a08:	ffffdfff 	.word	0xffffdfff
 8002a0c:	ffefffff 	.word	0xffefffff
 8002a10:	ff9fffff 	.word	0xff9fffff
 8002a14:	fff7ffff 	.word	0xfff7ffff

08002a18 <UART_WaitOnFlagUntilTimeout>:
{
 8002a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a1a:	0004      	movs	r4, r0
 8002a1c:	000d      	movs	r5, r1
 8002a1e:	0017      	movs	r7, r2
 8002a20:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	69d3      	ldr	r3, [r2, #28]
 8002a26:	402b      	ands	r3, r5
 8002a28:	1b5b      	subs	r3, r3, r5
 8002a2a:	4259      	negs	r1, r3
 8002a2c:	414b      	adcs	r3, r1
 8002a2e:	42bb      	cmp	r3, r7
 8002a30:	d001      	beq.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002a32:	2000      	movs	r0, #0
 8002a34:	e025      	b.n	8002a82 <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002a36:	9b08      	ldr	r3, [sp, #32]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	d0f3      	beq.n	8002a24 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3c:	f7fe fb7a 	bl	8001134 <HAL_GetTick>
 8002a40:	9b00      	ldr	r3, [sp, #0]
 8002a42:	1ac0      	subs	r0, r0, r3
 8002a44:	9b08      	ldr	r3, [sp, #32]
 8002a46:	4298      	cmp	r0, r3
 8002a48:	d82c      	bhi.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0x8c>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d02a      	beq.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	0752      	lsls	r2, r2, #29
 8002a54:	d5e5      	bpl.n	8002a22 <UART_WaitOnFlagUntilTimeout+0xa>
 8002a56:	002a      	movs	r2, r5
 8002a58:	2140      	movs	r1, #64	@ 0x40
 8002a5a:	3a40      	subs	r2, #64	@ 0x40
 8002a5c:	438a      	bics	r2, r1
 8002a5e:	d0e0      	beq.n	8002a22 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	2608      	movs	r6, #8
 8002a64:	0011      	movs	r1, r2
 8002a66:	4031      	ands	r1, r6
 8002a68:	9101      	str	r1, [sp, #4]
 8002a6a:	4232      	tst	r2, r6
 8002a6c:	d00a      	beq.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 8002a6e:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a70:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8002a72:	f7ff fe61 	bl	8002738 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a76:	19a3      	adds	r3, r4, r6
 8002a78:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002a7a:	2300      	movs	r3, #0
          return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8002a7e:	3478      	adds	r4, #120	@ 0x78
 8002a80:	7023      	strb	r3, [r4, #0]
}
 8002a82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a84:	2280      	movs	r2, #128	@ 0x80
 8002a86:	69d9      	ldr	r1, [r3, #28]
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	4211      	tst	r1, r2
 8002a8c:	d0c9      	beq.n	8002a22 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a8e:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002a90:	0020      	movs	r0, r4
 8002a92:	f7ff fe51 	bl	8002738 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a96:	0023      	movs	r3, r4
 8002a98:	2220      	movs	r2, #32
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002a9e:	9b01      	ldr	r3, [sp, #4]
 8002aa0:	3478      	adds	r4, #120	@ 0x78
 8002aa2:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	e7ec      	b.n	8002a82 <UART_WaitOnFlagUntilTimeout+0x6a>

08002aa8 <HAL_UART_Transmit>:
{
 8002aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002aae:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8002ab0:	0004      	movs	r4, r0
 8002ab2:	000d      	movs	r5, r1
 8002ab4:	0017      	movs	r7, r2
    return HAL_BUSY;
 8002ab6:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d138      	bne.n	8002b2e <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 8002abc:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002abe:	2900      	cmp	r1, #0
 8002ac0:	d035      	beq.n	8002b2e <HAL_UART_Transmit+0x86>
 8002ac2:	2a00      	cmp	r2, #0
 8002ac4:	d033      	beq.n	8002b2e <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac6:	2380      	movs	r3, #128	@ 0x80
 8002ac8:	68a2      	ldr	r2, [r4, #8]
 8002aca:	015b      	lsls	r3, r3, #5
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d104      	bne.n	8002ada <HAL_UART_Transmit+0x32>
 8002ad0:	6923      	ldr	r3, [r4, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ad6:	4201      	tst	r1, r0
 8002ad8:	d129      	bne.n	8002b2e <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ada:	0023      	movs	r3, r4
 8002adc:	2600      	movs	r6, #0
 8002ade:	3308      	adds	r3, #8
 8002ae0:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae2:	2321      	movs	r3, #33	@ 0x21
 8002ae4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8002ae6:	f7fe fb25 	bl	8001134 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002aea:	0023      	movs	r3, r4
 8002aec:	3350      	adds	r3, #80	@ 0x50
 8002aee:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8002af0:	3302      	adds	r3, #2
 8002af2:	9303      	str	r3, [sp, #12]
 8002af4:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002afa:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002afc:	015b      	lsls	r3, r3, #5
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d104      	bne.n	8002b0c <HAL_UART_Transmit+0x64>
 8002b02:	6923      	ldr	r3, [r4, #16]
 8002b04:	42b3      	cmp	r3, r6
 8002b06:	d101      	bne.n	8002b0c <HAL_UART_Transmit+0x64>
      pdata16bits = (const uint16_t *) pData;
 8002b08:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8002b0a:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8002b0c:	0023      	movs	r3, r4
 8002b0e:	3352      	adds	r3, #82	@ 0x52
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10c      	bne.n	8002b32 <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b18:	9b05      	ldr	r3, [sp, #20]
 8002b1a:	2140      	movs	r1, #64	@ 0x40
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	0020      	movs	r0, r4
 8002b20:	9b04      	ldr	r3, [sp, #16]
 8002b22:	f7ff ff79 	bl	8002a18 <UART_WaitOnFlagUntilTimeout>
 8002b26:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8002b28:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	d10d      	bne.n	8002b4a <HAL_UART_Transmit+0xa2>
}
 8002b2e:	b007      	add	sp, #28
 8002b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b32:	9b05      	ldr	r3, [sp, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2180      	movs	r1, #128	@ 0x80
 8002b3a:	0020      	movs	r0, r4
 8002b3c:	9b04      	ldr	r3, [sp, #16]
 8002b3e:	f7ff ff6b 	bl	8002a18 <UART_WaitOnFlagUntilTimeout>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8002b46:	2320      	movs	r3, #32
 8002b48:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8002b4a:	2003      	movs	r0, #3
 8002b4c:	e7ef      	b.n	8002b2e <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b4e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002b50:	2d00      	cmp	r5, #0
 8002b52:	d10b      	bne.n	8002b6c <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b54:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002b56:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b58:	05db      	lsls	r3, r3, #23
 8002b5a:	0ddb      	lsrs	r3, r3, #23
 8002b5c:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8002b5e:	9b03      	ldr	r3, [sp, #12]
 8002b60:	9a03      	ldr	r2, [sp, #12]
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	8013      	strh	r3, [r2, #0]
 8002b6a:	e7cf      	b.n	8002b0c <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b6c:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8002b6e:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b70:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 8002b72:	e7f4      	b.n	8002b5e <HAL_UART_Transmit+0xb6>

08002b74 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b74:	0003      	movs	r3, r0
{
 8002b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b78:	2500      	movs	r5, #0
{
 8002b7a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7c:	3308      	adds	r3, #8
 8002b7e:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 8002b80:	f7fe fad8 	bl	8001134 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b84:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002b86:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	071b      	lsls	r3, r3, #28
 8002b8c:	d51d      	bpl.n	8002bca <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b8e:	2180      	movs	r1, #128	@ 0x80
 8002b90:	4b26      	ldr	r3, [pc, #152]	@ (8002c2c <UART_CheckIdleState+0xb8>)
 8002b92:	002a      	movs	r2, r5
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	0389      	lsls	r1, r1, #14
 8002b98:	0003      	movs	r3, r0
 8002b9a:	0020      	movs	r0, r4
 8002b9c:	f7ff ff3c 	bl	8002a18 <UART_WaitOnFlagUntilTimeout>
 8002ba0:	42a8      	cmp	r0, r5
 8002ba2:	d012      	beq.n	8002bca <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002bae:	2080      	movs	r0, #128	@ 0x80
 8002bb0:	6822      	ldr	r2, [r4, #0]
 8002bb2:	6813      	ldr	r3, [r2, #0]
 8002bb4:	4383      	bics	r3, r0
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002bc0:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	3478      	adds	r4, #120	@ 0x78
 8002bc6:	7023      	strb	r3, [r4, #0]
}
 8002bc8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bca:	0025      	movs	r5, r4
 8002bcc:	cd08      	ldmia	r5!, {r3}
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	075b      	lsls	r3, r3, #29
 8002bd2:	d523      	bpl.n	8002c1c <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bd4:	2180      	movs	r1, #128	@ 0x80
 8002bd6:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <UART_CheckIdleState+0xb8>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	0020      	movs	r0, r4
 8002bde:	0033      	movs	r3, r6
 8002be0:	03c9      	lsls	r1, r1, #15
 8002be2:	f7ff ff19 	bl	8002a18 <UART_WaitOnFlagUntilTimeout>
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d018      	beq.n	8002c1c <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bea:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf4:	6821      	ldr	r1, [r4, #0]
 8002bf6:	4e0e      	ldr	r6, [pc, #56]	@ (8002c30 <UART_CheckIdleState+0xbc>)
 8002bf8:	680b      	ldr	r3, [r1, #0]
 8002bfa:	4033      	ands	r3, r6
 8002bfc:	600b      	str	r3, [r1, #0]
 8002bfe:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c02:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c06:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0a:	6821      	ldr	r1, [r4, #0]
 8002c0c:	688b      	ldr	r3, [r1, #8]
 8002c0e:	4393      	bics	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
 8002c12:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002c16:	2320      	movs	r3, #32
 8002c18:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002c1a:	e7d1      	b.n	8002bc0 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002c1c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002c20:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c22:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c24:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c26:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8002c28:	e7cb      	b.n	8002bc2 <UART_CheckIdleState+0x4e>
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	01ffffff 	.word	0x01ffffff
 8002c30:	fffffedf 	.word	0xfffffedf

08002c34 <HAL_UART_Init>:
{
 8002c34:	b510      	push	{r4, lr}
 8002c36:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002c3a:	2001      	movs	r0, #1
}
 8002c3c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002c44:	0002      	movs	r2, r0
 8002c46:	3278      	adds	r2, #120	@ 0x78
 8002c48:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002c4a:	f7fe f995 	bl	8000f78 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c4e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8002c50:	2101      	movs	r1, #1
 8002c52:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c54:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	438b      	bics	r3, r1
 8002c5a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c5c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002c62:	0020      	movs	r0, r4
 8002c64:	f7ff fe70 	bl	8002948 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c68:	0020      	movs	r0, r4
 8002c6a:	f7ff fd93 	bl	8002794 <UART_SetConfig>
 8002c6e:	2801      	cmp	r0, #1
 8002c70:	d0e3      	beq.n	8002c3a <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	4907      	ldr	r1, [pc, #28]	@ (8002c94 <HAL_UART_Init+0x60>)
 8002c76:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002c78:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c7c:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	438a      	bics	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c86:	2201      	movs	r2, #1
 8002c88:	6819      	ldr	r1, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002c8e:	f7ff ff71 	bl	8002b74 <UART_CheckIdleState>
 8002c92:	e7d3      	b.n	8002c3c <HAL_UART_Init+0x8>
 8002c94:	ffffb7ff 	.word	0xffffb7ff

08002c98 <sniprintf>:
 8002c98:	b40c      	push	{r2, r3}
 8002c9a:	b530      	push	{r4, r5, lr}
 8002c9c:	4b18      	ldr	r3, [pc, #96]	@ (8002d00 <sniprintf+0x68>)
 8002c9e:	000c      	movs	r4, r1
 8002ca0:	681d      	ldr	r5, [r3, #0]
 8002ca2:	b09d      	sub	sp, #116	@ 0x74
 8002ca4:	2900      	cmp	r1, #0
 8002ca6:	da08      	bge.n	8002cba <sniprintf+0x22>
 8002ca8:	238b      	movs	r3, #139	@ 0x8b
 8002caa:	2001      	movs	r0, #1
 8002cac:	602b      	str	r3, [r5, #0]
 8002cae:	4240      	negs	r0, r0
 8002cb0:	b01d      	add	sp, #116	@ 0x74
 8002cb2:	bc30      	pop	{r4, r5}
 8002cb4:	bc08      	pop	{r3}
 8002cb6:	b002      	add	sp, #8
 8002cb8:	4718      	bx	r3
 8002cba:	2382      	movs	r3, #130	@ 0x82
 8002cbc:	466a      	mov	r2, sp
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	8293      	strh	r3, [r2, #20]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9002      	str	r0, [sp, #8]
 8002cc6:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002cc8:	9006      	str	r0, [sp, #24]
 8002cca:	4299      	cmp	r1, r3
 8002ccc:	d000      	beq.n	8002cd0 <sniprintf+0x38>
 8002cce:	1e4b      	subs	r3, r1, #1
 8002cd0:	9304      	str	r3, [sp, #16]
 8002cd2:	9307      	str	r3, [sp, #28]
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	466a      	mov	r2, sp
 8002cd8:	425b      	negs	r3, r3
 8002cda:	82d3      	strh	r3, [r2, #22]
 8002cdc:	0028      	movs	r0, r5
 8002cde:	ab21      	add	r3, sp, #132	@ 0x84
 8002ce0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002ce2:	a902      	add	r1, sp, #8
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	f000 f99d 	bl	8003024 <_svfiprintf_r>
 8002cea:	1c43      	adds	r3, r0, #1
 8002cec:	da01      	bge.n	8002cf2 <sniprintf+0x5a>
 8002cee:	238b      	movs	r3, #139	@ 0x8b
 8002cf0:	602b      	str	r3, [r5, #0]
 8002cf2:	2c00      	cmp	r4, #0
 8002cf4:	d0dc      	beq.n	8002cb0 <sniprintf+0x18>
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	9b02      	ldr	r3, [sp, #8]
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	e7d8      	b.n	8002cb0 <sniprintf+0x18>
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	2000000c 	.word	0x2000000c

08002d04 <memset>:
 8002d04:	0003      	movs	r3, r0
 8002d06:	1882      	adds	r2, r0, r2
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <memset+0xa>
 8002d0c:	4770      	bx	lr
 8002d0e:	7019      	strb	r1, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	e7f9      	b.n	8002d08 <memset+0x4>

08002d14 <__errno>:
 8002d14:	4b01      	ldr	r3, [pc, #4]	@ (8002d1c <__errno+0x8>)
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	4770      	bx	lr
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	2000000c 	.word	0x2000000c

08002d20 <__libc_init_array>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	2600      	movs	r6, #0
 8002d24:	4c0c      	ldr	r4, [pc, #48]	@ (8002d58 <__libc_init_array+0x38>)
 8002d26:	4d0d      	ldr	r5, [pc, #52]	@ (8002d5c <__libc_init_array+0x3c>)
 8002d28:	1b64      	subs	r4, r4, r5
 8002d2a:	10a4      	asrs	r4, r4, #2
 8002d2c:	42a6      	cmp	r6, r4
 8002d2e:	d109      	bne.n	8002d44 <__libc_init_array+0x24>
 8002d30:	2600      	movs	r6, #0
 8002d32:	f000 fc61 	bl	80035f8 <_init>
 8002d36:	4c0a      	ldr	r4, [pc, #40]	@ (8002d60 <__libc_init_array+0x40>)
 8002d38:	4d0a      	ldr	r5, [pc, #40]	@ (8002d64 <__libc_init_array+0x44>)
 8002d3a:	1b64      	subs	r4, r4, r5
 8002d3c:	10a4      	asrs	r4, r4, #2
 8002d3e:	42a6      	cmp	r6, r4
 8002d40:	d105      	bne.n	8002d4e <__libc_init_array+0x2e>
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
 8002d44:	00b3      	lsls	r3, r6, #2
 8002d46:	58eb      	ldr	r3, [r5, r3]
 8002d48:	4798      	blx	r3
 8002d4a:	3601      	adds	r6, #1
 8002d4c:	e7ee      	b.n	8002d2c <__libc_init_array+0xc>
 8002d4e:	00b3      	lsls	r3, r6, #2
 8002d50:	58eb      	ldr	r3, [r5, r3]
 8002d52:	4798      	blx	r3
 8002d54:	3601      	adds	r6, #1
 8002d56:	e7f2      	b.n	8002d3e <__libc_init_array+0x1e>
 8002d58:	080037a8 	.word	0x080037a8
 8002d5c:	080037a8 	.word	0x080037a8
 8002d60:	080037ac 	.word	0x080037ac
 8002d64:	080037a8 	.word	0x080037a8

08002d68 <__retarget_lock_acquire_recursive>:
 8002d68:	4770      	bx	lr

08002d6a <__retarget_lock_release_recursive>:
 8002d6a:	4770      	bx	lr

08002d6c <_free_r>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	0005      	movs	r5, r0
 8002d70:	1e0c      	subs	r4, r1, #0
 8002d72:	d010      	beq.n	8002d96 <_free_r+0x2a>
 8002d74:	3c04      	subs	r4, #4
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da00      	bge.n	8002d7e <_free_r+0x12>
 8002d7c:	18e4      	adds	r4, r4, r3
 8002d7e:	0028      	movs	r0, r5
 8002d80:	f000 f8e0 	bl	8002f44 <__malloc_lock>
 8002d84:	4a1d      	ldr	r2, [pc, #116]	@ (8002dfc <_free_r+0x90>)
 8002d86:	6813      	ldr	r3, [r2, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <_free_r+0x2c>
 8002d8c:	6063      	str	r3, [r4, #4]
 8002d8e:	6014      	str	r4, [r2, #0]
 8002d90:	0028      	movs	r0, r5
 8002d92:	f000 f8df 	bl	8002f54 <__malloc_unlock>
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	42a3      	cmp	r3, r4
 8002d9a:	d908      	bls.n	8002dae <_free_r+0x42>
 8002d9c:	6820      	ldr	r0, [r4, #0]
 8002d9e:	1821      	adds	r1, r4, r0
 8002da0:	428b      	cmp	r3, r1
 8002da2:	d1f3      	bne.n	8002d8c <_free_r+0x20>
 8002da4:	6819      	ldr	r1, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	1809      	adds	r1, r1, r0
 8002daa:	6021      	str	r1, [r4, #0]
 8002dac:	e7ee      	b.n	8002d8c <_free_r+0x20>
 8002dae:	001a      	movs	r2, r3
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <_free_r+0x4e>
 8002db6:	42a3      	cmp	r3, r4
 8002db8:	d9f9      	bls.n	8002dae <_free_r+0x42>
 8002dba:	6811      	ldr	r1, [r2, #0]
 8002dbc:	1850      	adds	r0, r2, r1
 8002dbe:	42a0      	cmp	r0, r4
 8002dc0:	d10b      	bne.n	8002dda <_free_r+0x6e>
 8002dc2:	6820      	ldr	r0, [r4, #0]
 8002dc4:	1809      	adds	r1, r1, r0
 8002dc6:	1850      	adds	r0, r2, r1
 8002dc8:	6011      	str	r1, [r2, #0]
 8002dca:	4283      	cmp	r3, r0
 8002dcc:	d1e0      	bne.n	8002d90 <_free_r+0x24>
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	1841      	adds	r1, r0, r1
 8002dd4:	6011      	str	r1, [r2, #0]
 8002dd6:	6053      	str	r3, [r2, #4]
 8002dd8:	e7da      	b.n	8002d90 <_free_r+0x24>
 8002dda:	42a0      	cmp	r0, r4
 8002ddc:	d902      	bls.n	8002de4 <_free_r+0x78>
 8002dde:	230c      	movs	r3, #12
 8002de0:	602b      	str	r3, [r5, #0]
 8002de2:	e7d5      	b.n	8002d90 <_free_r+0x24>
 8002de4:	6820      	ldr	r0, [r4, #0]
 8002de6:	1821      	adds	r1, r4, r0
 8002de8:	428b      	cmp	r3, r1
 8002dea:	d103      	bne.n	8002df4 <_free_r+0x88>
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	1809      	adds	r1, r1, r0
 8002df2:	6021      	str	r1, [r4, #0]
 8002df4:	6063      	str	r3, [r4, #4]
 8002df6:	6054      	str	r4, [r2, #4]
 8002df8:	e7ca      	b.n	8002d90 <_free_r+0x24>
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	20000380 	.word	0x20000380

08002e00 <sbrk_aligned>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	4e0f      	ldr	r6, [pc, #60]	@ (8002e40 <sbrk_aligned+0x40>)
 8002e04:	000d      	movs	r5, r1
 8002e06:	6831      	ldr	r1, [r6, #0]
 8002e08:	0004      	movs	r4, r0
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	d102      	bne.n	8002e14 <sbrk_aligned+0x14>
 8002e0e:	f000 fb95 	bl	800353c <_sbrk_r>
 8002e12:	6030      	str	r0, [r6, #0]
 8002e14:	0029      	movs	r1, r5
 8002e16:	0020      	movs	r0, r4
 8002e18:	f000 fb90 	bl	800353c <_sbrk_r>
 8002e1c:	1c43      	adds	r3, r0, #1
 8002e1e:	d103      	bne.n	8002e28 <sbrk_aligned+0x28>
 8002e20:	2501      	movs	r5, #1
 8002e22:	426d      	negs	r5, r5
 8002e24:	0028      	movs	r0, r5
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
 8002e28:	2303      	movs	r3, #3
 8002e2a:	1cc5      	adds	r5, r0, #3
 8002e2c:	439d      	bics	r5, r3
 8002e2e:	42a8      	cmp	r0, r5
 8002e30:	d0f8      	beq.n	8002e24 <sbrk_aligned+0x24>
 8002e32:	1a29      	subs	r1, r5, r0
 8002e34:	0020      	movs	r0, r4
 8002e36:	f000 fb81 	bl	800353c <_sbrk_r>
 8002e3a:	3001      	adds	r0, #1
 8002e3c:	d1f2      	bne.n	8002e24 <sbrk_aligned+0x24>
 8002e3e:	e7ef      	b.n	8002e20 <sbrk_aligned+0x20>
 8002e40:	2000037c 	.word	0x2000037c

08002e44 <_malloc_r>:
 8002e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e46:	2203      	movs	r2, #3
 8002e48:	1ccb      	adds	r3, r1, #3
 8002e4a:	4393      	bics	r3, r2
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	0005      	movs	r5, r0
 8002e50:	001f      	movs	r7, r3
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d234      	bcs.n	8002ec0 <_malloc_r+0x7c>
 8002e56:	270c      	movs	r7, #12
 8002e58:	42b9      	cmp	r1, r7
 8002e5a:	d833      	bhi.n	8002ec4 <_malloc_r+0x80>
 8002e5c:	0028      	movs	r0, r5
 8002e5e:	f000 f871 	bl	8002f44 <__malloc_lock>
 8002e62:	4e37      	ldr	r6, [pc, #220]	@ (8002f40 <_malloc_r+0xfc>)
 8002e64:	6833      	ldr	r3, [r6, #0]
 8002e66:	001c      	movs	r4, r3
 8002e68:	2c00      	cmp	r4, #0
 8002e6a:	d12f      	bne.n	8002ecc <_malloc_r+0x88>
 8002e6c:	0039      	movs	r1, r7
 8002e6e:	0028      	movs	r0, r5
 8002e70:	f7ff ffc6 	bl	8002e00 <sbrk_aligned>
 8002e74:	0004      	movs	r4, r0
 8002e76:	1c43      	adds	r3, r0, #1
 8002e78:	d15f      	bne.n	8002f3a <_malloc_r+0xf6>
 8002e7a:	6834      	ldr	r4, [r6, #0]
 8002e7c:	9400      	str	r4, [sp, #0]
 8002e7e:	9b00      	ldr	r3, [sp, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d14a      	bne.n	8002f1a <_malloc_r+0xd6>
 8002e84:	2c00      	cmp	r4, #0
 8002e86:	d052      	beq.n	8002f2e <_malloc_r+0xea>
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	0028      	movs	r0, r5
 8002e8c:	18e3      	adds	r3, r4, r3
 8002e8e:	9900      	ldr	r1, [sp, #0]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	f000 fb53 	bl	800353c <_sbrk_r>
 8002e96:	9b01      	ldr	r3, [sp, #4]
 8002e98:	4283      	cmp	r3, r0
 8002e9a:	d148      	bne.n	8002f2e <_malloc_r+0xea>
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	0028      	movs	r0, r5
 8002ea0:	1aff      	subs	r7, r7, r3
 8002ea2:	0039      	movs	r1, r7
 8002ea4:	f7ff ffac 	bl	8002e00 <sbrk_aligned>
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	d040      	beq.n	8002f2e <_malloc_r+0xea>
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	19db      	adds	r3, r3, r7
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	6833      	ldr	r3, [r6, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	2a00      	cmp	r2, #0
 8002eb8:	d133      	bne.n	8002f22 <_malloc_r+0xde>
 8002eba:	9b00      	ldr	r3, [sp, #0]
 8002ebc:	6033      	str	r3, [r6, #0]
 8002ebe:	e019      	b.n	8002ef4 <_malloc_r+0xb0>
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	dac9      	bge.n	8002e58 <_malloc_r+0x14>
 8002ec4:	230c      	movs	r3, #12
 8002ec6:	602b      	str	r3, [r5, #0]
 8002ec8:	2000      	movs	r0, #0
 8002eca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ecc:	6821      	ldr	r1, [r4, #0]
 8002ece:	1bc9      	subs	r1, r1, r7
 8002ed0:	d420      	bmi.n	8002f14 <_malloc_r+0xd0>
 8002ed2:	290b      	cmp	r1, #11
 8002ed4:	d90a      	bls.n	8002eec <_malloc_r+0xa8>
 8002ed6:	19e2      	adds	r2, r4, r7
 8002ed8:	6027      	str	r7, [r4, #0]
 8002eda:	42a3      	cmp	r3, r4
 8002edc:	d104      	bne.n	8002ee8 <_malloc_r+0xa4>
 8002ede:	6032      	str	r2, [r6, #0]
 8002ee0:	6863      	ldr	r3, [r4, #4]
 8002ee2:	6011      	str	r1, [r2, #0]
 8002ee4:	6053      	str	r3, [r2, #4]
 8002ee6:	e005      	b.n	8002ef4 <_malloc_r+0xb0>
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	e7f9      	b.n	8002ee0 <_malloc_r+0x9c>
 8002eec:	6862      	ldr	r2, [r4, #4]
 8002eee:	42a3      	cmp	r3, r4
 8002ef0:	d10e      	bne.n	8002f10 <_malloc_r+0xcc>
 8002ef2:	6032      	str	r2, [r6, #0]
 8002ef4:	0028      	movs	r0, r5
 8002ef6:	f000 f82d 	bl	8002f54 <__malloc_unlock>
 8002efa:	0020      	movs	r0, r4
 8002efc:	2207      	movs	r2, #7
 8002efe:	300b      	adds	r0, #11
 8002f00:	1d23      	adds	r3, r4, #4
 8002f02:	4390      	bics	r0, r2
 8002f04:	1ac2      	subs	r2, r0, r3
 8002f06:	4298      	cmp	r0, r3
 8002f08:	d0df      	beq.n	8002eca <_malloc_r+0x86>
 8002f0a:	1a1b      	subs	r3, r3, r0
 8002f0c:	50a3      	str	r3, [r4, r2]
 8002f0e:	e7dc      	b.n	8002eca <_malloc_r+0x86>
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	e7ef      	b.n	8002ef4 <_malloc_r+0xb0>
 8002f14:	0023      	movs	r3, r4
 8002f16:	6864      	ldr	r4, [r4, #4]
 8002f18:	e7a6      	b.n	8002e68 <_malloc_r+0x24>
 8002f1a:	9c00      	ldr	r4, [sp, #0]
 8002f1c:	6863      	ldr	r3, [r4, #4]
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	e7ad      	b.n	8002e7e <_malloc_r+0x3a>
 8002f22:	001a      	movs	r2, r3
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	42a3      	cmp	r3, r4
 8002f28:	d1fb      	bne.n	8002f22 <_malloc_r+0xde>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e7da      	b.n	8002ee4 <_malloc_r+0xa0>
 8002f2e:	230c      	movs	r3, #12
 8002f30:	0028      	movs	r0, r5
 8002f32:	602b      	str	r3, [r5, #0]
 8002f34:	f000 f80e 	bl	8002f54 <__malloc_unlock>
 8002f38:	e7c6      	b.n	8002ec8 <_malloc_r+0x84>
 8002f3a:	6007      	str	r7, [r0, #0]
 8002f3c:	e7da      	b.n	8002ef4 <_malloc_r+0xb0>
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	20000380 	.word	0x20000380

08002f44 <__malloc_lock>:
 8002f44:	b510      	push	{r4, lr}
 8002f46:	4802      	ldr	r0, [pc, #8]	@ (8002f50 <__malloc_lock+0xc>)
 8002f48:	f7ff ff0e 	bl	8002d68 <__retarget_lock_acquire_recursive>
 8002f4c:	bd10      	pop	{r4, pc}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	20000378 	.word	0x20000378

08002f54 <__malloc_unlock>:
 8002f54:	b510      	push	{r4, lr}
 8002f56:	4802      	ldr	r0, [pc, #8]	@ (8002f60 <__malloc_unlock+0xc>)
 8002f58:	f7ff ff07 	bl	8002d6a <__retarget_lock_release_recursive>
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	20000378 	.word	0x20000378

08002f64 <__ssputs_r>:
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f66:	688e      	ldr	r6, [r1, #8]
 8002f68:	b085      	sub	sp, #20
 8002f6a:	001f      	movs	r7, r3
 8002f6c:	000c      	movs	r4, r1
 8002f6e:	680b      	ldr	r3, [r1, #0]
 8002f70:	9002      	str	r0, [sp, #8]
 8002f72:	9203      	str	r2, [sp, #12]
 8002f74:	42be      	cmp	r6, r7
 8002f76:	d830      	bhi.n	8002fda <__ssputs_r+0x76>
 8002f78:	210c      	movs	r1, #12
 8002f7a:	5e62      	ldrsh	r2, [r4, r1]
 8002f7c:	2190      	movs	r1, #144	@ 0x90
 8002f7e:	00c9      	lsls	r1, r1, #3
 8002f80:	420a      	tst	r2, r1
 8002f82:	d028      	beq.n	8002fd6 <__ssputs_r+0x72>
 8002f84:	2003      	movs	r0, #3
 8002f86:	6921      	ldr	r1, [r4, #16]
 8002f88:	1a5b      	subs	r3, r3, r1
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	6963      	ldr	r3, [r4, #20]
 8002f8e:	4343      	muls	r3, r0
 8002f90:	9801      	ldr	r0, [sp, #4]
 8002f92:	0fdd      	lsrs	r5, r3, #31
 8002f94:	18ed      	adds	r5, r5, r3
 8002f96:	1c7b      	adds	r3, r7, #1
 8002f98:	181b      	adds	r3, r3, r0
 8002f9a:	106d      	asrs	r5, r5, #1
 8002f9c:	42ab      	cmp	r3, r5
 8002f9e:	d900      	bls.n	8002fa2 <__ssputs_r+0x3e>
 8002fa0:	001d      	movs	r5, r3
 8002fa2:	0552      	lsls	r2, r2, #21
 8002fa4:	d528      	bpl.n	8002ff8 <__ssputs_r+0x94>
 8002fa6:	0029      	movs	r1, r5
 8002fa8:	9802      	ldr	r0, [sp, #8]
 8002faa:	f7ff ff4b 	bl	8002e44 <_malloc_r>
 8002fae:	1e06      	subs	r6, r0, #0
 8002fb0:	d02c      	beq.n	800300c <__ssputs_r+0xa8>
 8002fb2:	9a01      	ldr	r2, [sp, #4]
 8002fb4:	6921      	ldr	r1, [r4, #16]
 8002fb6:	f000 fade 	bl	8003576 <memcpy>
 8002fba:	89a2      	ldrh	r2, [r4, #12]
 8002fbc:	4b18      	ldr	r3, [pc, #96]	@ (8003020 <__ssputs_r+0xbc>)
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	2380      	movs	r3, #128	@ 0x80
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	81a3      	strh	r3, [r4, #12]
 8002fc6:	9b01      	ldr	r3, [sp, #4]
 8002fc8:	6126      	str	r6, [r4, #16]
 8002fca:	18f6      	adds	r6, r6, r3
 8002fcc:	6026      	str	r6, [r4, #0]
 8002fce:	003e      	movs	r6, r7
 8002fd0:	6165      	str	r5, [r4, #20]
 8002fd2:	1aed      	subs	r5, r5, r3
 8002fd4:	60a5      	str	r5, [r4, #8]
 8002fd6:	42be      	cmp	r6, r7
 8002fd8:	d900      	bls.n	8002fdc <__ssputs_r+0x78>
 8002fda:	003e      	movs	r6, r7
 8002fdc:	0032      	movs	r2, r6
 8002fde:	9903      	ldr	r1, [sp, #12]
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	f000 fa99 	bl	8003518 <memmove>
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	68a3      	ldr	r3, [r4, #8]
 8002fea:	1b9b      	subs	r3, r3, r6
 8002fec:	60a3      	str	r3, [r4, #8]
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	199b      	adds	r3, r3, r6
 8002ff2:	6023      	str	r3, [r4, #0]
 8002ff4:	b005      	add	sp, #20
 8002ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff8:	002a      	movs	r2, r5
 8002ffa:	9802      	ldr	r0, [sp, #8]
 8002ffc:	f000 fac4 	bl	8003588 <_realloc_r>
 8003000:	1e06      	subs	r6, r0, #0
 8003002:	d1e0      	bne.n	8002fc6 <__ssputs_r+0x62>
 8003004:	6921      	ldr	r1, [r4, #16]
 8003006:	9802      	ldr	r0, [sp, #8]
 8003008:	f7ff feb0 	bl	8002d6c <_free_r>
 800300c:	230c      	movs	r3, #12
 800300e:	2001      	movs	r0, #1
 8003010:	9a02      	ldr	r2, [sp, #8]
 8003012:	4240      	negs	r0, r0
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	89a2      	ldrh	r2, [r4, #12]
 8003018:	3334      	adds	r3, #52	@ 0x34
 800301a:	4313      	orrs	r3, r2
 800301c:	81a3      	strh	r3, [r4, #12]
 800301e:	e7e9      	b.n	8002ff4 <__ssputs_r+0x90>
 8003020:	fffffb7f 	.word	0xfffffb7f

08003024 <_svfiprintf_r>:
 8003024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003026:	b0a1      	sub	sp, #132	@ 0x84
 8003028:	9003      	str	r0, [sp, #12]
 800302a:	001d      	movs	r5, r3
 800302c:	898b      	ldrh	r3, [r1, #12]
 800302e:	000f      	movs	r7, r1
 8003030:	0016      	movs	r6, r2
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	d511      	bpl.n	800305a <_svfiprintf_r+0x36>
 8003036:	690b      	ldr	r3, [r1, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10e      	bne.n	800305a <_svfiprintf_r+0x36>
 800303c:	2140      	movs	r1, #64	@ 0x40
 800303e:	f7ff ff01 	bl	8002e44 <_malloc_r>
 8003042:	6038      	str	r0, [r7, #0]
 8003044:	6138      	str	r0, [r7, #16]
 8003046:	2800      	cmp	r0, #0
 8003048:	d105      	bne.n	8003056 <_svfiprintf_r+0x32>
 800304a:	230c      	movs	r3, #12
 800304c:	9a03      	ldr	r2, [sp, #12]
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	2001      	movs	r0, #1
 8003052:	4240      	negs	r0, r0
 8003054:	e0cf      	b.n	80031f6 <_svfiprintf_r+0x1d2>
 8003056:	2340      	movs	r3, #64	@ 0x40
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	2300      	movs	r3, #0
 800305c:	ac08      	add	r4, sp, #32
 800305e:	6163      	str	r3, [r4, #20]
 8003060:	3320      	adds	r3, #32
 8003062:	7663      	strb	r3, [r4, #25]
 8003064:	3310      	adds	r3, #16
 8003066:	76a3      	strb	r3, [r4, #26]
 8003068:	9507      	str	r5, [sp, #28]
 800306a:	0035      	movs	r5, r6
 800306c:	782b      	ldrb	r3, [r5, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <_svfiprintf_r+0x52>
 8003072:	2b25      	cmp	r3, #37	@ 0x25
 8003074:	d148      	bne.n	8003108 <_svfiprintf_r+0xe4>
 8003076:	1bab      	subs	r3, r5, r6
 8003078:	9305      	str	r3, [sp, #20]
 800307a:	42b5      	cmp	r5, r6
 800307c:	d00b      	beq.n	8003096 <_svfiprintf_r+0x72>
 800307e:	0032      	movs	r2, r6
 8003080:	0039      	movs	r1, r7
 8003082:	9803      	ldr	r0, [sp, #12]
 8003084:	f7ff ff6e 	bl	8002f64 <__ssputs_r>
 8003088:	3001      	adds	r0, #1
 800308a:	d100      	bne.n	800308e <_svfiprintf_r+0x6a>
 800308c:	e0ae      	b.n	80031ec <_svfiprintf_r+0x1c8>
 800308e:	6963      	ldr	r3, [r4, #20]
 8003090:	9a05      	ldr	r2, [sp, #20]
 8003092:	189b      	adds	r3, r3, r2
 8003094:	6163      	str	r3, [r4, #20]
 8003096:	782b      	ldrb	r3, [r5, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d100      	bne.n	800309e <_svfiprintf_r+0x7a>
 800309c:	e0a6      	b.n	80031ec <_svfiprintf_r+0x1c8>
 800309e:	2201      	movs	r2, #1
 80030a0:	2300      	movs	r3, #0
 80030a2:	4252      	negs	r2, r2
 80030a4:	6062      	str	r2, [r4, #4]
 80030a6:	a904      	add	r1, sp, #16
 80030a8:	3254      	adds	r2, #84	@ 0x54
 80030aa:	1852      	adds	r2, r2, r1
 80030ac:	1c6e      	adds	r6, r5, #1
 80030ae:	6023      	str	r3, [r4, #0]
 80030b0:	60e3      	str	r3, [r4, #12]
 80030b2:	60a3      	str	r3, [r4, #8]
 80030b4:	7013      	strb	r3, [r2, #0]
 80030b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80030b8:	4b54      	ldr	r3, [pc, #336]	@ (800320c <_svfiprintf_r+0x1e8>)
 80030ba:	2205      	movs	r2, #5
 80030bc:	0018      	movs	r0, r3
 80030be:	7831      	ldrb	r1, [r6, #0]
 80030c0:	9305      	str	r3, [sp, #20]
 80030c2:	f000 fa4d 	bl	8003560 <memchr>
 80030c6:	1c75      	adds	r5, r6, #1
 80030c8:	2800      	cmp	r0, #0
 80030ca:	d11f      	bne.n	800310c <_svfiprintf_r+0xe8>
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	06d3      	lsls	r3, r2, #27
 80030d0:	d504      	bpl.n	80030dc <_svfiprintf_r+0xb8>
 80030d2:	2353      	movs	r3, #83	@ 0x53
 80030d4:	a904      	add	r1, sp, #16
 80030d6:	185b      	adds	r3, r3, r1
 80030d8:	2120      	movs	r1, #32
 80030da:	7019      	strb	r1, [r3, #0]
 80030dc:	0713      	lsls	r3, r2, #28
 80030de:	d504      	bpl.n	80030ea <_svfiprintf_r+0xc6>
 80030e0:	2353      	movs	r3, #83	@ 0x53
 80030e2:	a904      	add	r1, sp, #16
 80030e4:	185b      	adds	r3, r3, r1
 80030e6:	212b      	movs	r1, #43	@ 0x2b
 80030e8:	7019      	strb	r1, [r3, #0]
 80030ea:	7833      	ldrb	r3, [r6, #0]
 80030ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80030ee:	d016      	beq.n	800311e <_svfiprintf_r+0xfa>
 80030f0:	0035      	movs	r5, r6
 80030f2:	2100      	movs	r1, #0
 80030f4:	200a      	movs	r0, #10
 80030f6:	68e3      	ldr	r3, [r4, #12]
 80030f8:	782a      	ldrb	r2, [r5, #0]
 80030fa:	1c6e      	adds	r6, r5, #1
 80030fc:	3a30      	subs	r2, #48	@ 0x30
 80030fe:	2a09      	cmp	r2, #9
 8003100:	d950      	bls.n	80031a4 <_svfiprintf_r+0x180>
 8003102:	2900      	cmp	r1, #0
 8003104:	d111      	bne.n	800312a <_svfiprintf_r+0x106>
 8003106:	e017      	b.n	8003138 <_svfiprintf_r+0x114>
 8003108:	3501      	adds	r5, #1
 800310a:	e7af      	b.n	800306c <_svfiprintf_r+0x48>
 800310c:	9b05      	ldr	r3, [sp, #20]
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	1ac0      	subs	r0, r0, r3
 8003112:	2301      	movs	r3, #1
 8003114:	4083      	lsls	r3, r0
 8003116:	4313      	orrs	r3, r2
 8003118:	002e      	movs	r6, r5
 800311a:	6023      	str	r3, [r4, #0]
 800311c:	e7cc      	b.n	80030b8 <_svfiprintf_r+0x94>
 800311e:	9b07      	ldr	r3, [sp, #28]
 8003120:	1d19      	adds	r1, r3, #4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	9107      	str	r1, [sp, #28]
 8003126:	2b00      	cmp	r3, #0
 8003128:	db01      	blt.n	800312e <_svfiprintf_r+0x10a>
 800312a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800312c:	e004      	b.n	8003138 <_svfiprintf_r+0x114>
 800312e:	425b      	negs	r3, r3
 8003130:	60e3      	str	r3, [r4, #12]
 8003132:	2302      	movs	r3, #2
 8003134:	4313      	orrs	r3, r2
 8003136:	6023      	str	r3, [r4, #0]
 8003138:	782b      	ldrb	r3, [r5, #0]
 800313a:	2b2e      	cmp	r3, #46	@ 0x2e
 800313c:	d10c      	bne.n	8003158 <_svfiprintf_r+0x134>
 800313e:	786b      	ldrb	r3, [r5, #1]
 8003140:	2b2a      	cmp	r3, #42	@ 0x2a
 8003142:	d134      	bne.n	80031ae <_svfiprintf_r+0x18a>
 8003144:	9b07      	ldr	r3, [sp, #28]
 8003146:	3502      	adds	r5, #2
 8003148:	1d1a      	adds	r2, r3, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	9207      	str	r2, [sp, #28]
 800314e:	2b00      	cmp	r3, #0
 8003150:	da01      	bge.n	8003156 <_svfiprintf_r+0x132>
 8003152:	2301      	movs	r3, #1
 8003154:	425b      	negs	r3, r3
 8003156:	9309      	str	r3, [sp, #36]	@ 0x24
 8003158:	4e2d      	ldr	r6, [pc, #180]	@ (8003210 <_svfiprintf_r+0x1ec>)
 800315a:	2203      	movs	r2, #3
 800315c:	0030      	movs	r0, r6
 800315e:	7829      	ldrb	r1, [r5, #0]
 8003160:	f000 f9fe 	bl	8003560 <memchr>
 8003164:	2800      	cmp	r0, #0
 8003166:	d006      	beq.n	8003176 <_svfiprintf_r+0x152>
 8003168:	2340      	movs	r3, #64	@ 0x40
 800316a:	1b80      	subs	r0, r0, r6
 800316c:	4083      	lsls	r3, r0
 800316e:	6822      	ldr	r2, [r4, #0]
 8003170:	3501      	adds	r5, #1
 8003172:	4313      	orrs	r3, r2
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	7829      	ldrb	r1, [r5, #0]
 8003178:	2206      	movs	r2, #6
 800317a:	4826      	ldr	r0, [pc, #152]	@ (8003214 <_svfiprintf_r+0x1f0>)
 800317c:	1c6e      	adds	r6, r5, #1
 800317e:	7621      	strb	r1, [r4, #24]
 8003180:	f000 f9ee 	bl	8003560 <memchr>
 8003184:	2800      	cmp	r0, #0
 8003186:	d038      	beq.n	80031fa <_svfiprintf_r+0x1d6>
 8003188:	4b23      	ldr	r3, [pc, #140]	@ (8003218 <_svfiprintf_r+0x1f4>)
 800318a:	2b00      	cmp	r3, #0
 800318c:	d122      	bne.n	80031d4 <_svfiprintf_r+0x1b0>
 800318e:	2207      	movs	r2, #7
 8003190:	9b07      	ldr	r3, [sp, #28]
 8003192:	3307      	adds	r3, #7
 8003194:	4393      	bics	r3, r2
 8003196:	3308      	adds	r3, #8
 8003198:	9307      	str	r3, [sp, #28]
 800319a:	6963      	ldr	r3, [r4, #20]
 800319c:	9a04      	ldr	r2, [sp, #16]
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	6163      	str	r3, [r4, #20]
 80031a2:	e762      	b.n	800306a <_svfiprintf_r+0x46>
 80031a4:	4343      	muls	r3, r0
 80031a6:	0035      	movs	r5, r6
 80031a8:	2101      	movs	r1, #1
 80031aa:	189b      	adds	r3, r3, r2
 80031ac:	e7a4      	b.n	80030f8 <_svfiprintf_r+0xd4>
 80031ae:	2300      	movs	r3, #0
 80031b0:	200a      	movs	r0, #10
 80031b2:	0019      	movs	r1, r3
 80031b4:	3501      	adds	r5, #1
 80031b6:	6063      	str	r3, [r4, #4]
 80031b8:	782a      	ldrb	r2, [r5, #0]
 80031ba:	1c6e      	adds	r6, r5, #1
 80031bc:	3a30      	subs	r2, #48	@ 0x30
 80031be:	2a09      	cmp	r2, #9
 80031c0:	d903      	bls.n	80031ca <_svfiprintf_r+0x1a6>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0c8      	beq.n	8003158 <_svfiprintf_r+0x134>
 80031c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80031c8:	e7c6      	b.n	8003158 <_svfiprintf_r+0x134>
 80031ca:	4341      	muls	r1, r0
 80031cc:	0035      	movs	r5, r6
 80031ce:	2301      	movs	r3, #1
 80031d0:	1889      	adds	r1, r1, r2
 80031d2:	e7f1      	b.n	80031b8 <_svfiprintf_r+0x194>
 80031d4:	aa07      	add	r2, sp, #28
 80031d6:	9200      	str	r2, [sp, #0]
 80031d8:	0021      	movs	r1, r4
 80031da:	003a      	movs	r2, r7
 80031dc:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <_svfiprintf_r+0x1f8>)
 80031de:	9803      	ldr	r0, [sp, #12]
 80031e0:	e000      	b.n	80031e4 <_svfiprintf_r+0x1c0>
 80031e2:	bf00      	nop
 80031e4:	9004      	str	r0, [sp, #16]
 80031e6:	9b04      	ldr	r3, [sp, #16]
 80031e8:	3301      	adds	r3, #1
 80031ea:	d1d6      	bne.n	800319a <_svfiprintf_r+0x176>
 80031ec:	89bb      	ldrh	r3, [r7, #12]
 80031ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80031f0:	065b      	lsls	r3, r3, #25
 80031f2:	d500      	bpl.n	80031f6 <_svfiprintf_r+0x1d2>
 80031f4:	e72c      	b.n	8003050 <_svfiprintf_r+0x2c>
 80031f6:	b021      	add	sp, #132	@ 0x84
 80031f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031fa:	aa07      	add	r2, sp, #28
 80031fc:	9200      	str	r2, [sp, #0]
 80031fe:	0021      	movs	r1, r4
 8003200:	003a      	movs	r2, r7
 8003202:	4b06      	ldr	r3, [pc, #24]	@ (800321c <_svfiprintf_r+0x1f8>)
 8003204:	9803      	ldr	r0, [sp, #12]
 8003206:	f000 f87b 	bl	8003300 <_printf_i>
 800320a:	e7eb      	b.n	80031e4 <_svfiprintf_r+0x1c0>
 800320c:	0800373a 	.word	0x0800373a
 8003210:	08003740 	.word	0x08003740
 8003214:	08003744 	.word	0x08003744
 8003218:	00000000 	.word	0x00000000
 800321c:	08002f65 	.word	0x08002f65

08003220 <_printf_common>:
 8003220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003222:	0016      	movs	r6, r2
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	688a      	ldr	r2, [r1, #8]
 8003228:	690b      	ldr	r3, [r1, #16]
 800322a:	000c      	movs	r4, r1
 800322c:	9000      	str	r0, [sp, #0]
 800322e:	4293      	cmp	r3, r2
 8003230:	da00      	bge.n	8003234 <_printf_common+0x14>
 8003232:	0013      	movs	r3, r2
 8003234:	0022      	movs	r2, r4
 8003236:	6033      	str	r3, [r6, #0]
 8003238:	3243      	adds	r2, #67	@ 0x43
 800323a:	7812      	ldrb	r2, [r2, #0]
 800323c:	2a00      	cmp	r2, #0
 800323e:	d001      	beq.n	8003244 <_printf_common+0x24>
 8003240:	3301      	adds	r3, #1
 8003242:	6033      	str	r3, [r6, #0]
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	069b      	lsls	r3, r3, #26
 8003248:	d502      	bpl.n	8003250 <_printf_common+0x30>
 800324a:	6833      	ldr	r3, [r6, #0]
 800324c:	3302      	adds	r3, #2
 800324e:	6033      	str	r3, [r6, #0]
 8003250:	6822      	ldr	r2, [r4, #0]
 8003252:	2306      	movs	r3, #6
 8003254:	0015      	movs	r5, r2
 8003256:	401d      	ands	r5, r3
 8003258:	421a      	tst	r2, r3
 800325a:	d027      	beq.n	80032ac <_printf_common+0x8c>
 800325c:	0023      	movs	r3, r4
 800325e:	3343      	adds	r3, #67	@ 0x43
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	1e5a      	subs	r2, r3, #1
 8003264:	4193      	sbcs	r3, r2
 8003266:	6822      	ldr	r2, [r4, #0]
 8003268:	0692      	lsls	r2, r2, #26
 800326a:	d430      	bmi.n	80032ce <_printf_common+0xae>
 800326c:	0022      	movs	r2, r4
 800326e:	9901      	ldr	r1, [sp, #4]
 8003270:	9800      	ldr	r0, [sp, #0]
 8003272:	9d08      	ldr	r5, [sp, #32]
 8003274:	3243      	adds	r2, #67	@ 0x43
 8003276:	47a8      	blx	r5
 8003278:	3001      	adds	r0, #1
 800327a:	d025      	beq.n	80032c8 <_printf_common+0xa8>
 800327c:	2206      	movs	r2, #6
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	2500      	movs	r5, #0
 8003282:	4013      	ands	r3, r2
 8003284:	2b04      	cmp	r3, #4
 8003286:	d105      	bne.n	8003294 <_printf_common+0x74>
 8003288:	6833      	ldr	r3, [r6, #0]
 800328a:	68e5      	ldr	r5, [r4, #12]
 800328c:	1aed      	subs	r5, r5, r3
 800328e:	43eb      	mvns	r3, r5
 8003290:	17db      	asrs	r3, r3, #31
 8003292:	401d      	ands	r5, r3
 8003294:	68a3      	ldr	r3, [r4, #8]
 8003296:	6922      	ldr	r2, [r4, #16]
 8003298:	4293      	cmp	r3, r2
 800329a:	dd01      	ble.n	80032a0 <_printf_common+0x80>
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	18ed      	adds	r5, r5, r3
 80032a0:	2600      	movs	r6, #0
 80032a2:	42b5      	cmp	r5, r6
 80032a4:	d120      	bne.n	80032e8 <_printf_common+0xc8>
 80032a6:	2000      	movs	r0, #0
 80032a8:	e010      	b.n	80032cc <_printf_common+0xac>
 80032aa:	3501      	adds	r5, #1
 80032ac:	68e3      	ldr	r3, [r4, #12]
 80032ae:	6832      	ldr	r2, [r6, #0]
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	42ab      	cmp	r3, r5
 80032b4:	ddd2      	ble.n	800325c <_printf_common+0x3c>
 80032b6:	0022      	movs	r2, r4
 80032b8:	2301      	movs	r3, #1
 80032ba:	9901      	ldr	r1, [sp, #4]
 80032bc:	9800      	ldr	r0, [sp, #0]
 80032be:	9f08      	ldr	r7, [sp, #32]
 80032c0:	3219      	adds	r2, #25
 80032c2:	47b8      	blx	r7
 80032c4:	3001      	adds	r0, #1
 80032c6:	d1f0      	bne.n	80032aa <_printf_common+0x8a>
 80032c8:	2001      	movs	r0, #1
 80032ca:	4240      	negs	r0, r0
 80032cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032ce:	2030      	movs	r0, #48	@ 0x30
 80032d0:	18e1      	adds	r1, r4, r3
 80032d2:	3143      	adds	r1, #67	@ 0x43
 80032d4:	7008      	strb	r0, [r1, #0]
 80032d6:	0021      	movs	r1, r4
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	3145      	adds	r1, #69	@ 0x45
 80032dc:	7809      	ldrb	r1, [r1, #0]
 80032de:	18a2      	adds	r2, r4, r2
 80032e0:	3243      	adds	r2, #67	@ 0x43
 80032e2:	3302      	adds	r3, #2
 80032e4:	7011      	strb	r1, [r2, #0]
 80032e6:	e7c1      	b.n	800326c <_printf_common+0x4c>
 80032e8:	0022      	movs	r2, r4
 80032ea:	2301      	movs	r3, #1
 80032ec:	9901      	ldr	r1, [sp, #4]
 80032ee:	9800      	ldr	r0, [sp, #0]
 80032f0:	9f08      	ldr	r7, [sp, #32]
 80032f2:	321a      	adds	r2, #26
 80032f4:	47b8      	blx	r7
 80032f6:	3001      	adds	r0, #1
 80032f8:	d0e6      	beq.n	80032c8 <_printf_common+0xa8>
 80032fa:	3601      	adds	r6, #1
 80032fc:	e7d1      	b.n	80032a2 <_printf_common+0x82>
	...

08003300 <_printf_i>:
 8003300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003302:	b08b      	sub	sp, #44	@ 0x2c
 8003304:	9206      	str	r2, [sp, #24]
 8003306:	000a      	movs	r2, r1
 8003308:	3243      	adds	r2, #67	@ 0x43
 800330a:	9307      	str	r3, [sp, #28]
 800330c:	9005      	str	r0, [sp, #20]
 800330e:	9203      	str	r2, [sp, #12]
 8003310:	7e0a      	ldrb	r2, [r1, #24]
 8003312:	000c      	movs	r4, r1
 8003314:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003316:	2a78      	cmp	r2, #120	@ 0x78
 8003318:	d809      	bhi.n	800332e <_printf_i+0x2e>
 800331a:	2a62      	cmp	r2, #98	@ 0x62
 800331c:	d80b      	bhi.n	8003336 <_printf_i+0x36>
 800331e:	2a00      	cmp	r2, #0
 8003320:	d100      	bne.n	8003324 <_printf_i+0x24>
 8003322:	e0ba      	b.n	800349a <_printf_i+0x19a>
 8003324:	497a      	ldr	r1, [pc, #488]	@ (8003510 <_printf_i+0x210>)
 8003326:	9104      	str	r1, [sp, #16]
 8003328:	2a58      	cmp	r2, #88	@ 0x58
 800332a:	d100      	bne.n	800332e <_printf_i+0x2e>
 800332c:	e08e      	b.n	800344c <_printf_i+0x14c>
 800332e:	0025      	movs	r5, r4
 8003330:	3542      	adds	r5, #66	@ 0x42
 8003332:	702a      	strb	r2, [r5, #0]
 8003334:	e022      	b.n	800337c <_printf_i+0x7c>
 8003336:	0010      	movs	r0, r2
 8003338:	3863      	subs	r0, #99	@ 0x63
 800333a:	2815      	cmp	r0, #21
 800333c:	d8f7      	bhi.n	800332e <_printf_i+0x2e>
 800333e:	f7fc feeb 	bl	8000118 <__gnu_thumb1_case_shi>
 8003342:	0016      	.short	0x0016
 8003344:	fff6001f 	.word	0xfff6001f
 8003348:	fff6fff6 	.word	0xfff6fff6
 800334c:	001ffff6 	.word	0x001ffff6
 8003350:	fff6fff6 	.word	0xfff6fff6
 8003354:	fff6fff6 	.word	0xfff6fff6
 8003358:	0036009f 	.word	0x0036009f
 800335c:	fff6007e 	.word	0xfff6007e
 8003360:	00b0fff6 	.word	0x00b0fff6
 8003364:	0036fff6 	.word	0x0036fff6
 8003368:	fff6fff6 	.word	0xfff6fff6
 800336c:	0082      	.short	0x0082
 800336e:	0025      	movs	r5, r4
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	3542      	adds	r5, #66	@ 0x42
 8003374:	1d11      	adds	r1, r2, #4
 8003376:	6019      	str	r1, [r3, #0]
 8003378:	6813      	ldr	r3, [r2, #0]
 800337a:	702b      	strb	r3, [r5, #0]
 800337c:	2301      	movs	r3, #1
 800337e:	e09e      	b.n	80034be <_printf_i+0x1be>
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	6809      	ldr	r1, [r1, #0]
 8003384:	1d02      	adds	r2, r0, #4
 8003386:	060d      	lsls	r5, r1, #24
 8003388:	d50b      	bpl.n	80033a2 <_printf_i+0xa2>
 800338a:	6806      	ldr	r6, [r0, #0]
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	2e00      	cmp	r6, #0
 8003390:	da03      	bge.n	800339a <_printf_i+0x9a>
 8003392:	232d      	movs	r3, #45	@ 0x2d
 8003394:	9a03      	ldr	r2, [sp, #12]
 8003396:	4276      	negs	r6, r6
 8003398:	7013      	strb	r3, [r2, #0]
 800339a:	4b5d      	ldr	r3, [pc, #372]	@ (8003510 <_printf_i+0x210>)
 800339c:	270a      	movs	r7, #10
 800339e:	9304      	str	r3, [sp, #16]
 80033a0:	e018      	b.n	80033d4 <_printf_i+0xd4>
 80033a2:	6806      	ldr	r6, [r0, #0]
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	0649      	lsls	r1, r1, #25
 80033a8:	d5f1      	bpl.n	800338e <_printf_i+0x8e>
 80033aa:	b236      	sxth	r6, r6
 80033ac:	e7ef      	b.n	800338e <_printf_i+0x8e>
 80033ae:	6808      	ldr	r0, [r1, #0]
 80033b0:	6819      	ldr	r1, [r3, #0]
 80033b2:	c940      	ldmia	r1!, {r6}
 80033b4:	0605      	lsls	r5, r0, #24
 80033b6:	d402      	bmi.n	80033be <_printf_i+0xbe>
 80033b8:	0640      	lsls	r0, r0, #25
 80033ba:	d500      	bpl.n	80033be <_printf_i+0xbe>
 80033bc:	b2b6      	uxth	r6, r6
 80033be:	6019      	str	r1, [r3, #0]
 80033c0:	4b53      	ldr	r3, [pc, #332]	@ (8003510 <_printf_i+0x210>)
 80033c2:	270a      	movs	r7, #10
 80033c4:	9304      	str	r3, [sp, #16]
 80033c6:	2a6f      	cmp	r2, #111	@ 0x6f
 80033c8:	d100      	bne.n	80033cc <_printf_i+0xcc>
 80033ca:	3f02      	subs	r7, #2
 80033cc:	0023      	movs	r3, r4
 80033ce:	2200      	movs	r2, #0
 80033d0:	3343      	adds	r3, #67	@ 0x43
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	60a3      	str	r3, [r4, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	db06      	blt.n	80033ea <_printf_i+0xea>
 80033dc:	2104      	movs	r1, #4
 80033de:	6822      	ldr	r2, [r4, #0]
 80033e0:	9d03      	ldr	r5, [sp, #12]
 80033e2:	438a      	bics	r2, r1
 80033e4:	6022      	str	r2, [r4, #0]
 80033e6:	4333      	orrs	r3, r6
 80033e8:	d00c      	beq.n	8003404 <_printf_i+0x104>
 80033ea:	9d03      	ldr	r5, [sp, #12]
 80033ec:	0030      	movs	r0, r6
 80033ee:	0039      	movs	r1, r7
 80033f0:	f7fc ff22 	bl	8000238 <__aeabi_uidivmod>
 80033f4:	9b04      	ldr	r3, [sp, #16]
 80033f6:	3d01      	subs	r5, #1
 80033f8:	5c5b      	ldrb	r3, [r3, r1]
 80033fa:	702b      	strb	r3, [r5, #0]
 80033fc:	0033      	movs	r3, r6
 80033fe:	0006      	movs	r6, r0
 8003400:	429f      	cmp	r7, r3
 8003402:	d9f3      	bls.n	80033ec <_printf_i+0xec>
 8003404:	2f08      	cmp	r7, #8
 8003406:	d109      	bne.n	800341c <_printf_i+0x11c>
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	07db      	lsls	r3, r3, #31
 800340c:	d506      	bpl.n	800341c <_printf_i+0x11c>
 800340e:	6862      	ldr	r2, [r4, #4]
 8003410:	6923      	ldr	r3, [r4, #16]
 8003412:	429a      	cmp	r2, r3
 8003414:	dc02      	bgt.n	800341c <_printf_i+0x11c>
 8003416:	2330      	movs	r3, #48	@ 0x30
 8003418:	3d01      	subs	r5, #1
 800341a:	702b      	strb	r3, [r5, #0]
 800341c:	9b03      	ldr	r3, [sp, #12]
 800341e:	1b5b      	subs	r3, r3, r5
 8003420:	6123      	str	r3, [r4, #16]
 8003422:	9b07      	ldr	r3, [sp, #28]
 8003424:	0021      	movs	r1, r4
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	9805      	ldr	r0, [sp, #20]
 800342a:	9b06      	ldr	r3, [sp, #24]
 800342c:	aa09      	add	r2, sp, #36	@ 0x24
 800342e:	f7ff fef7 	bl	8003220 <_printf_common>
 8003432:	3001      	adds	r0, #1
 8003434:	d148      	bne.n	80034c8 <_printf_i+0x1c8>
 8003436:	2001      	movs	r0, #1
 8003438:	4240      	negs	r0, r0
 800343a:	b00b      	add	sp, #44	@ 0x2c
 800343c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800343e:	2220      	movs	r2, #32
 8003440:	6809      	ldr	r1, [r1, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	6022      	str	r2, [r4, #0]
 8003446:	2278      	movs	r2, #120	@ 0x78
 8003448:	4932      	ldr	r1, [pc, #200]	@ (8003514 <_printf_i+0x214>)
 800344a:	9104      	str	r1, [sp, #16]
 800344c:	0021      	movs	r1, r4
 800344e:	3145      	adds	r1, #69	@ 0x45
 8003450:	700a      	strb	r2, [r1, #0]
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	6822      	ldr	r2, [r4, #0]
 8003456:	c940      	ldmia	r1!, {r6}
 8003458:	0610      	lsls	r0, r2, #24
 800345a:	d402      	bmi.n	8003462 <_printf_i+0x162>
 800345c:	0650      	lsls	r0, r2, #25
 800345e:	d500      	bpl.n	8003462 <_printf_i+0x162>
 8003460:	b2b6      	uxth	r6, r6
 8003462:	6019      	str	r1, [r3, #0]
 8003464:	07d3      	lsls	r3, r2, #31
 8003466:	d502      	bpl.n	800346e <_printf_i+0x16e>
 8003468:	2320      	movs	r3, #32
 800346a:	4313      	orrs	r3, r2
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	2e00      	cmp	r6, #0
 8003470:	d001      	beq.n	8003476 <_printf_i+0x176>
 8003472:	2710      	movs	r7, #16
 8003474:	e7aa      	b.n	80033cc <_printf_i+0xcc>
 8003476:	2220      	movs	r2, #32
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	4393      	bics	r3, r2
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	e7f8      	b.n	8003472 <_printf_i+0x172>
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	680d      	ldr	r5, [r1, #0]
 8003484:	1d10      	adds	r0, r2, #4
 8003486:	6949      	ldr	r1, [r1, #20]
 8003488:	6018      	str	r0, [r3, #0]
 800348a:	6813      	ldr	r3, [r2, #0]
 800348c:	062e      	lsls	r6, r5, #24
 800348e:	d501      	bpl.n	8003494 <_printf_i+0x194>
 8003490:	6019      	str	r1, [r3, #0]
 8003492:	e002      	b.n	800349a <_printf_i+0x19a>
 8003494:	066d      	lsls	r5, r5, #25
 8003496:	d5fb      	bpl.n	8003490 <_printf_i+0x190>
 8003498:	8019      	strh	r1, [r3, #0]
 800349a:	2300      	movs	r3, #0
 800349c:	9d03      	ldr	r5, [sp, #12]
 800349e:	6123      	str	r3, [r4, #16]
 80034a0:	e7bf      	b.n	8003422 <_printf_i+0x122>
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	1d11      	adds	r1, r2, #4
 80034a6:	6019      	str	r1, [r3, #0]
 80034a8:	6815      	ldr	r5, [r2, #0]
 80034aa:	2100      	movs	r1, #0
 80034ac:	0028      	movs	r0, r5
 80034ae:	6862      	ldr	r2, [r4, #4]
 80034b0:	f000 f856 	bl	8003560 <memchr>
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d001      	beq.n	80034bc <_printf_i+0x1bc>
 80034b8:	1b40      	subs	r0, r0, r5
 80034ba:	6060      	str	r0, [r4, #4]
 80034bc:	6863      	ldr	r3, [r4, #4]
 80034be:	6123      	str	r3, [r4, #16]
 80034c0:	2300      	movs	r3, #0
 80034c2:	9a03      	ldr	r2, [sp, #12]
 80034c4:	7013      	strb	r3, [r2, #0]
 80034c6:	e7ac      	b.n	8003422 <_printf_i+0x122>
 80034c8:	002a      	movs	r2, r5
 80034ca:	6923      	ldr	r3, [r4, #16]
 80034cc:	9906      	ldr	r1, [sp, #24]
 80034ce:	9805      	ldr	r0, [sp, #20]
 80034d0:	9d07      	ldr	r5, [sp, #28]
 80034d2:	47a8      	blx	r5
 80034d4:	3001      	adds	r0, #1
 80034d6:	d0ae      	beq.n	8003436 <_printf_i+0x136>
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	079b      	lsls	r3, r3, #30
 80034dc:	d415      	bmi.n	800350a <_printf_i+0x20a>
 80034de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034e0:	68e0      	ldr	r0, [r4, #12]
 80034e2:	4298      	cmp	r0, r3
 80034e4:	daa9      	bge.n	800343a <_printf_i+0x13a>
 80034e6:	0018      	movs	r0, r3
 80034e8:	e7a7      	b.n	800343a <_printf_i+0x13a>
 80034ea:	0022      	movs	r2, r4
 80034ec:	2301      	movs	r3, #1
 80034ee:	9906      	ldr	r1, [sp, #24]
 80034f0:	9805      	ldr	r0, [sp, #20]
 80034f2:	9e07      	ldr	r6, [sp, #28]
 80034f4:	3219      	adds	r2, #25
 80034f6:	47b0      	blx	r6
 80034f8:	3001      	adds	r0, #1
 80034fa:	d09c      	beq.n	8003436 <_printf_i+0x136>
 80034fc:	3501      	adds	r5, #1
 80034fe:	68e3      	ldr	r3, [r4, #12]
 8003500:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	42ab      	cmp	r3, r5
 8003506:	dcf0      	bgt.n	80034ea <_printf_i+0x1ea>
 8003508:	e7e9      	b.n	80034de <_printf_i+0x1de>
 800350a:	2500      	movs	r5, #0
 800350c:	e7f7      	b.n	80034fe <_printf_i+0x1fe>
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	0800374b 	.word	0x0800374b
 8003514:	0800375c 	.word	0x0800375c

08003518 <memmove>:
 8003518:	b510      	push	{r4, lr}
 800351a:	4288      	cmp	r0, r1
 800351c:	d902      	bls.n	8003524 <memmove+0xc>
 800351e:	188b      	adds	r3, r1, r2
 8003520:	4298      	cmp	r0, r3
 8003522:	d308      	bcc.n	8003536 <memmove+0x1e>
 8003524:	2300      	movs	r3, #0
 8003526:	429a      	cmp	r2, r3
 8003528:	d007      	beq.n	800353a <memmove+0x22>
 800352a:	5ccc      	ldrb	r4, [r1, r3]
 800352c:	54c4      	strb	r4, [r0, r3]
 800352e:	3301      	adds	r3, #1
 8003530:	e7f9      	b.n	8003526 <memmove+0xe>
 8003532:	5c8b      	ldrb	r3, [r1, r2]
 8003534:	5483      	strb	r3, [r0, r2]
 8003536:	3a01      	subs	r2, #1
 8003538:	d2fb      	bcs.n	8003532 <memmove+0x1a>
 800353a:	bd10      	pop	{r4, pc}

0800353c <_sbrk_r>:
 800353c:	2300      	movs	r3, #0
 800353e:	b570      	push	{r4, r5, r6, lr}
 8003540:	4d06      	ldr	r5, [pc, #24]	@ (800355c <_sbrk_r+0x20>)
 8003542:	0004      	movs	r4, r0
 8003544:	0008      	movs	r0, r1
 8003546:	602b      	str	r3, [r5, #0]
 8003548:	f7fd fd4c 	bl	8000fe4 <_sbrk>
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	d103      	bne.n	8003558 <_sbrk_r+0x1c>
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d000      	beq.n	8003558 <_sbrk_r+0x1c>
 8003556:	6023      	str	r3, [r4, #0]
 8003558:	bd70      	pop	{r4, r5, r6, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	20000374 	.word	0x20000374

08003560 <memchr>:
 8003560:	b2c9      	uxtb	r1, r1
 8003562:	1882      	adds	r2, r0, r2
 8003564:	4290      	cmp	r0, r2
 8003566:	d101      	bne.n	800356c <memchr+0xc>
 8003568:	2000      	movs	r0, #0
 800356a:	4770      	bx	lr
 800356c:	7803      	ldrb	r3, [r0, #0]
 800356e:	428b      	cmp	r3, r1
 8003570:	d0fb      	beq.n	800356a <memchr+0xa>
 8003572:	3001      	adds	r0, #1
 8003574:	e7f6      	b.n	8003564 <memchr+0x4>

08003576 <memcpy>:
 8003576:	2300      	movs	r3, #0
 8003578:	b510      	push	{r4, lr}
 800357a:	429a      	cmp	r2, r3
 800357c:	d100      	bne.n	8003580 <memcpy+0xa>
 800357e:	bd10      	pop	{r4, pc}
 8003580:	5ccc      	ldrb	r4, [r1, r3]
 8003582:	54c4      	strb	r4, [r0, r3]
 8003584:	3301      	adds	r3, #1
 8003586:	e7f8      	b.n	800357a <memcpy+0x4>

08003588 <_realloc_r>:
 8003588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800358a:	0006      	movs	r6, r0
 800358c:	000c      	movs	r4, r1
 800358e:	0015      	movs	r5, r2
 8003590:	2900      	cmp	r1, #0
 8003592:	d105      	bne.n	80035a0 <_realloc_r+0x18>
 8003594:	0011      	movs	r1, r2
 8003596:	f7ff fc55 	bl	8002e44 <_malloc_r>
 800359a:	0004      	movs	r4, r0
 800359c:	0020      	movs	r0, r4
 800359e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035a0:	2a00      	cmp	r2, #0
 80035a2:	d103      	bne.n	80035ac <_realloc_r+0x24>
 80035a4:	f7ff fbe2 	bl	8002d6c <_free_r>
 80035a8:	002c      	movs	r4, r5
 80035aa:	e7f7      	b.n	800359c <_realloc_r+0x14>
 80035ac:	f000 f81c 	bl	80035e8 <_malloc_usable_size_r>
 80035b0:	0007      	movs	r7, r0
 80035b2:	4285      	cmp	r5, r0
 80035b4:	d802      	bhi.n	80035bc <_realloc_r+0x34>
 80035b6:	0843      	lsrs	r3, r0, #1
 80035b8:	42ab      	cmp	r3, r5
 80035ba:	d3ef      	bcc.n	800359c <_realloc_r+0x14>
 80035bc:	0029      	movs	r1, r5
 80035be:	0030      	movs	r0, r6
 80035c0:	f7ff fc40 	bl	8002e44 <_malloc_r>
 80035c4:	9001      	str	r0, [sp, #4]
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d101      	bne.n	80035ce <_realloc_r+0x46>
 80035ca:	9c01      	ldr	r4, [sp, #4]
 80035cc:	e7e6      	b.n	800359c <_realloc_r+0x14>
 80035ce:	002a      	movs	r2, r5
 80035d0:	42bd      	cmp	r5, r7
 80035d2:	d900      	bls.n	80035d6 <_realloc_r+0x4e>
 80035d4:	003a      	movs	r2, r7
 80035d6:	0021      	movs	r1, r4
 80035d8:	9801      	ldr	r0, [sp, #4]
 80035da:	f7ff ffcc 	bl	8003576 <memcpy>
 80035de:	0021      	movs	r1, r4
 80035e0:	0030      	movs	r0, r6
 80035e2:	f7ff fbc3 	bl	8002d6c <_free_r>
 80035e6:	e7f0      	b.n	80035ca <_realloc_r+0x42>

080035e8 <_malloc_usable_size_r>:
 80035e8:	1f0b      	subs	r3, r1, #4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	1f18      	subs	r0, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	da01      	bge.n	80035f6 <_malloc_usable_size_r+0xe>
 80035f2:	580b      	ldr	r3, [r1, r0]
 80035f4:	18c0      	adds	r0, r0, r3
 80035f6:	4770      	bx	lr

080035f8 <_init>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr

08003604 <_fini>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr
