
SPI_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e58  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08001f18  08001f18  00002f18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020e8  080020e8  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080020e8  080020e8  000030e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020f0  080020f0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020f0  080020f0  000030f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020f4  080020f4  000030f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080020f8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08002104  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000304  2000010c  08002104  0000410c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7a4  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189c  00000000  00000000  0000f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00004363  00000000  00000000  00011074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  000153d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c9  00000000  00000000  00015b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010cfc  00000000  00000000  00016301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce9e  00000000  00000000  00026ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00066db2  00000000  00000000  00033e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009ac4d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013d8  00000000  00000000  0009ac90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  0009c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001f00 	.word	0x08001f00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001f00 	.word	0x08001f00

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <Print>:
        HAL_Delay(10);
    }
}

void Print(const char* msg)
{
 8000630:	b510      	push	{r4, lr}
 8000632:	0004      	movs	r4, r0
    int len = 0;
    while(msg[len]) len++;
 8000634:	f7ff fd68 	bl	8000108 <strlen>
    HAL_UART_Transmit(&uart, (uint8_t*)msg, len, 1000);
 8000638:	23fa      	movs	r3, #250	@ 0xfa
 800063a:	b282      	uxth	r2, r0
 800063c:	0021      	movs	r1, r4
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4801      	ldr	r0, [pc, #4]	@ (8000648 <Print+0x18>)
 8000642:	f001 fb2f 	bl	8001ca4 <HAL_UART_Transmit>
}
 8000646:	bd10      	pop	{r4, pc}
 8000648:	20000028 	.word	0x20000028

0800064c <PrintChar>:

void PrintChar(char c)
{
 800064c:	b507      	push	{r0, r1, r2, lr}
 800064e:	466b      	mov	r3, sp
 8000650:	1dd9      	adds	r1, r3, #7
    HAL_UART_Transmit(&uart, (uint8_t*)&c, 1, 1000);
 8000652:	23fa      	movs	r3, #250	@ 0xfa
{
 8000654:	7008      	strb	r0, [r1, #0]
    HAL_UART_Transmit(&uart, (uint8_t*)&c, 1, 1000);
 8000656:	2201      	movs	r2, #1
 8000658:	4802      	ldr	r0, [pc, #8]	@ (8000664 <PrintChar+0x18>)
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	f001 fb22 	bl	8001ca4 <HAL_UART_Transmit>
}
 8000660:	bd07      	pop	{r0, r1, r2, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	20000028 	.word	0x20000028

08000668 <PrintNumber>:

void PrintNumber(int num)
{
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	2400      	movs	r4, #0
 800066c:	0005      	movs	r5, r0
 800066e:	b085      	sub	sp, #20
    if(num == 0) {
 8000670:	42a0      	cmp	r0, r4
 8000672:	d00b      	beq.n	800068c <PrintNumber+0x24>

    char buffer[10];
    int i = 0;

    while(num > 0) {
        buffer[i++] = '0' + (num % 10);
 8000674:	260a      	movs	r6, #10
 8000676:	af01      	add	r7, sp, #4
    while(num > 0) {
 8000678:	2d00      	cmp	r5, #0
 800067a:	dc0c      	bgt.n	8000696 <PrintNumber+0x2e>
        num /= 10;
    }

    // Print digits in reverse order
    while(i > 0) {
 800067c:	2c00      	cmp	r4, #0
 800067e:	d008      	beq.n	8000692 <PrintNumber+0x2a>
        PrintChar(buffer[--i]);
 8000680:	3c01      	subs	r4, #1
 8000682:	ab01      	add	r3, sp, #4
 8000684:	5ce0      	ldrb	r0, [r4, r3]
 8000686:	f7ff ffe1 	bl	800064c <PrintChar>
 800068a:	e7f7      	b.n	800067c <PrintNumber+0x14>
        PrintChar('0');
 800068c:	2030      	movs	r0, #48	@ 0x30
 800068e:	f7ff ffdd 	bl	800064c <PrintChar>
    }
}
 8000692:	b005      	add	sp, #20
 8000694:	bdf0      	pop	{r4, r5, r6, r7, pc}
        buffer[i++] = '0' + (num % 10);
 8000696:	0028      	movs	r0, r5
 8000698:	0031      	movs	r1, r6
 800069a:	f7ff fead 	bl	80003f8 <__aeabi_idivmod>
 800069e:	3130      	adds	r1, #48	@ 0x30
 80006a0:	55e1      	strb	r1, [r4, r7]
        num /= 10;
 80006a2:	0028      	movs	r0, r5
 80006a4:	0031      	movs	r1, r6
 80006a6:	f7ff fdc1 	bl	800022c <__divsi3>
 80006aa:	3401      	adds	r4, #1
 80006ac:	0005      	movs	r5, r0
 80006ae:	e7e3      	b.n	8000678 <PrintNumber+0x10>

080006b0 <SPI_Init>:

void SPI_Init(void)
{
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006b0:	2380      	movs	r3, #128	@ 0x80
 80006b2:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <SPI_Init+0x4c>)
 80006b4:	015b      	lsls	r3, r3, #5
 80006b6:	6b51      	ldr	r1, [r2, #52]	@ 0x34
{
 80006b8:	b510      	push	{r4, lr}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6353      	str	r3, [r2, #52]	@ 0x34

    spi.Instance = SPI1;
 80006be:	4810      	ldr	r0, [pc, #64]	@ (8000700 <SPI_Init+0x50>)
 80006c0:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <SPI_Init+0x54>)
    spi.Init.Mode = SPI_MODE_MASTER;
    spi.Init.Direction = SPI_DIRECTION_2LINES;
    spi.Init.DataSize = SPI_DATASIZE_8BIT;
    spi.Init.CLKPolarity = SPI_POLARITY_LOW;
    spi.Init.CLKPhase = SPI_PHASE_1EDGE;
    spi.Init.NSS = SPI_NSS_SOFT;
 80006c2:	2280      	movs	r2, #128	@ 0x80
    spi.Instance = SPI1;
 80006c4:	6003      	str	r3, [r0, #0]
    spi.Init.Mode = SPI_MODE_MASTER;
 80006c6:	2382      	movs	r3, #130	@ 0x82
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	6043      	str	r3, [r0, #4]
    spi.Init.Direction = SPI_DIRECTION_2LINES;
 80006cc:	2300      	movs	r3, #0
    spi.Init.NSS = SPI_NSS_SOFT;
 80006ce:	0092      	lsls	r2, r2, #2
 80006d0:	6182      	str	r2, [r0, #24]
    spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;  // Slower for testing
 80006d2:	3ae9      	subs	r2, #233	@ 0xe9
    spi.Init.Direction = SPI_DIRECTION_2LINES;
 80006d4:	6083      	str	r3, [r0, #8]
    spi.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d6:	60c3      	str	r3, [r0, #12]
    spi.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d8:	6103      	str	r3, [r0, #16]
    spi.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006da:	6143      	str	r3, [r0, #20]
    spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;  // Slower for testing
 80006dc:	3aff      	subs	r2, #255	@ 0xff
    spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006de:	6203      	str	r3, [r0, #32]
    spi.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e0:	6243      	str	r3, [r0, #36]	@ 0x24
    spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e2:	6283      	str	r3, [r0, #40]	@ 0x28
    spi.Init.CRCPolynomial = 7;
 80006e4:	3307      	adds	r3, #7
    spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;  // Slower for testing
 80006e6:	61c2      	str	r2, [r0, #28]
    spi.Init.CRCPolynomial = 7;
 80006e8:	62c3      	str	r3, [r0, #44]	@ 0x2c

    if(HAL_SPI_Init(&spi) != HAL_OK) {
 80006ea:	f000 ffbf 	bl	800166c <HAL_SPI_Init>
 80006ee:	2800      	cmp	r0, #0
 80006f0:	d002      	beq.n	80006f8 <SPI_Init+0x48>
        Print("SPI Init Error!\r\n");
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <SPI_Init+0x58>)
 80006f4:	f7ff ff9c 	bl	8000630 <Print>
    }
}
 80006f8:	bd10      	pop	{r4, pc}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	40021000 	.word	0x40021000
 8000700:	200000b0 	.word	0x200000b0
 8000704:	40013000 	.word	0x40013000
 8000708:	08001f24 	.word	0x08001f24

0800070c <UART_Init>:

void UART_Init(void)
{
    __HAL_RCC_USART2_CLK_ENABLE();
 800070c:	2380      	movs	r3, #128	@ 0x80
 800070e:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <UART_Init+0x34>)
 8000710:	029b      	lsls	r3, r3, #10
 8000712:	6b91      	ldr	r1, [r2, #56]	@ 0x38
{
 8000714:	b510      	push	{r4, lr}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000716:	430b      	orrs	r3, r1
 8000718:	6393      	str	r3, [r2, #56]	@ 0x38

    uart.Instance = USART2;
 800071a:	480a      	ldr	r0, [pc, #40]	@ (8000744 <UART_Init+0x38>)
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <UART_Init+0x3c>)
    uart.Init.BaudRate = 115200;
    uart.Init.WordLength = UART_WORDLENGTH_8B;
    uart.Init.StopBits = UART_STOPBITS_1;
    uart.Init.Parity = UART_PARITY_NONE;
    uart.Init.Mode = UART_MODE_TX;
 800071e:	2208      	movs	r2, #8
    uart.Instance = USART2;
 8000720:	6003      	str	r3, [r0, #0]
    uart.Init.BaudRate = 115200;
 8000722:	23e1      	movs	r3, #225	@ 0xe1
 8000724:	025b      	lsls	r3, r3, #9
 8000726:	6043      	str	r3, [r0, #4]
    uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000728:	2300      	movs	r3, #0
    uart.Init.Mode = UART_MODE_TX;
 800072a:	6142      	str	r2, [r0, #20]
    uart.Init.WordLength = UART_WORDLENGTH_8B;
 800072c:	6083      	str	r3, [r0, #8]
    uart.Init.StopBits = UART_STOPBITS_1;
 800072e:	60c3      	str	r3, [r0, #12]
    uart.Init.Parity = UART_PARITY_NONE;
 8000730:	6103      	str	r3, [r0, #16]
    uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	6183      	str	r3, [r0, #24]
    uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	61c3      	str	r3, [r0, #28]
    uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	6203      	str	r3, [r0, #32]
    uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	6243      	str	r3, [r0, #36]	@ 0x24

    if(HAL_UART_Init(&uart) != HAL_OK) {
 800073a:	f001 fb79 	bl	8001e30 <HAL_UART_Init>
        // UART init error - can't even report it!
    }
}
 800073e:	bd10      	pop	{r4, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	20000028 	.word	0x20000028
 8000748:	40004400 	.word	0x40004400

0800074c <GPIO_Init>:

void GPIO_Init(void)
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2501      	movs	r5, #1
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <GPIO_Init+0x70>)
{
 8000752:	b087      	sub	sp, #28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    g.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    g.Mode = GPIO_MODE_AF_PP;
    g.Pull = GPIO_NOPULL;
    g.Speed = GPIO_SPEED_FREQ_HIGH;
    g.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &g);
 8000756:	24a0      	movs	r4, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	432a      	orrs	r2, r5
 800075a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800075c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    GPIO_InitTypeDef g = {0};
 800075e:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	402b      	ands	r3, r5
 8000762:	9300      	str	r3, [sp, #0]
    GPIO_InitTypeDef g = {0};
 8000764:	2100      	movs	r1, #0
 8000766:	a803      	add	r0, sp, #12
    g.Mode = GPIO_MODE_AF_PP;
 8000768:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitTypeDef g = {0};
 800076c:	f001 fb92 	bl	8001e94 <memset>
    g.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000770:	23e0      	movs	r3, #224	@ 0xe0
    HAL_GPIO_Init(GPIOA, &g);
 8000772:	05e4      	lsls	r4, r4, #23
 8000774:	0020      	movs	r0, r4
 8000776:	a901      	add	r1, sp, #4
    g.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000778:	9301      	str	r3, [sp, #4]
    g.Mode = GPIO_MODE_AF_PP;
 800077a:	9602      	str	r6, [sp, #8]
    g.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &g);
 800077e:	f000 fab5 	bl	8000cec <HAL_GPIO_Init>

    // UART TX pin: PA2
    g.Pin = GPIO_PIN_2;
 8000782:	2304      	movs	r3, #4
    g.Mode = GPIO_MODE_AF_PP;
    g.Pull = GPIO_NOPULL;
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000784:	2203      	movs	r2, #3
    g.Mode = GPIO_MODE_AF_PP;
 8000786:	9602      	str	r6, [sp, #8]
    g.Pull = GPIO_NOPULL;
 8000788:	2600      	movs	r6, #0
    g.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &g);

    // CS pin: PA4 (for testing)
    g.Pin = GPIO_PIN_4;
 800078a:	2710      	movs	r7, #16
    HAL_GPIO_Init(GPIOA, &g);
 800078c:	0020      	movs	r0, r4
 800078e:	a901      	add	r1, sp, #4
    g.Pin = GPIO_PIN_2;
 8000790:	9301      	str	r3, [sp, #4]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	9204      	str	r2, [sp, #16]
    g.Alternate = GPIO_AF4_USART2;
 8000794:	9305      	str	r3, [sp, #20]
    g.Pull = GPIO_NOPULL;
 8000796:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &g);
 8000798:	f000 faa8 	bl	8000cec <HAL_GPIO_Init>
    g.Mode = GPIO_MODE_OUTPUT_PP;
    g.Pull = GPIO_NOPULL;
    g.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &g);
 800079c:	0020      	movs	r0, r4
 800079e:	a901      	add	r1, sp, #4
    g.Pin = GPIO_PIN_4;
 80007a0:	9701      	str	r7, [sp, #4]
    g.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	9502      	str	r5, [sp, #8]
    g.Pull = GPIO_NOPULL;
 80007a4:	9603      	str	r6, [sp, #12]
    g.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &g);
 80007a8:	f000 faa0 	bl	8000cec <HAL_GPIO_Init>

    // Set CS high initially
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80007ac:	002a      	movs	r2, r5
 80007ae:	0039      	movs	r1, r7
 80007b0:	0020      	movs	r0, r4
 80007b2:	f000 fb49 	bl	8000e48 <HAL_GPIO_WritePin>
}
 80007b6:	b007      	add	sp, #28
 80007b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	40021000 	.word	0x40021000

080007c0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80007c0:	b500      	push	{lr}
 80007c2:	b093      	sub	sp, #76	@ 0x4c
    RCC_OscInitTypeDef osc = {0};
 80007c4:	2230      	movs	r2, #48	@ 0x30
 80007c6:	2100      	movs	r1, #0
 80007c8:	a806      	add	r0, sp, #24
 80007ca:	f001 fb63 	bl	8001e94 <memset>
    RCC_ClkInitTypeDef clk = {0};
 80007ce:	2214      	movs	r2, #20
 80007d0:	2100      	movs	r1, #0
 80007d2:	4668      	mov	r0, sp
 80007d4:	f001 fb5e 	bl	8001e94 <memset>

    osc.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007d8:	2310      	movs	r3, #16
 80007da:	9305      	str	r3, [sp, #20]
    osc.MSIState = RCC_MSI_ON;
 80007dc:	3b0f      	subs	r3, #15
 80007de:	930b      	str	r3, [sp, #44]	@ 0x2c
    osc.MSICalibrationValue = 0;
    osc.MSIClockRange = RCC_MSIRANGE_5;  // 2.097 MHz
 80007e0:	23a0      	movs	r3, #160	@ 0xa0
    osc.PLL.PLLState = RCC_PLL_NONE;
    HAL_RCC_OscConfig(&osc);
 80007e2:	a805      	add	r0, sp, #20
    osc.MSIClockRange = RCC_MSIRANGE_5;  // 2.097 MHz
 80007e4:	021b      	lsls	r3, r3, #8
 80007e6:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_RCC_OscConfig(&osc);
 80007e8:	f000 fb76 	bl	8000ed8 <HAL_RCC_OscConfig>

    clk.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    clk.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007ec:	2100      	movs	r1, #0
    clk.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 80007ee:	230f      	movs	r3, #15
    clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
    clk.APB1CLKDivider = RCC_HCLK_DIV1;
    clk.APB2CLKDivider = RCC_HCLK_DIV1;
    HAL_RCC_ClockConfig(&clk, FLASH_LATENCY_0);
 80007f0:	4668      	mov	r0, sp
    clk.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 80007f2:	9300      	str	r3, [sp, #0]
    clk.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007f4:	9101      	str	r1, [sp, #4]
    clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	9102      	str	r1, [sp, #8]
    clk.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f8:	9103      	str	r1, [sp, #12]
    clk.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	9104      	str	r1, [sp, #16]
    HAL_RCC_ClockConfig(&clk, FLASH_LATENCY_0);
 80007fc:	f000 fdba 	bl	8001374 <HAL_RCC_ClockConfig>
}
 8000800:	b013      	add	sp, #76	@ 0x4c
 8000802:	bd00      	pop	{pc}

08000804 <main>:
{
 8000804:	b5f0      	push	{r4, r5, r6, r7, lr}
    for(int i = 0; i < num_tests; i++) {
 8000806:	2400      	movs	r4, #0
{
 8000808:	b08d      	sub	sp, #52	@ 0x34
    HAL_Init();
 800080a:	f000 f9f3 	bl	8000bf4 <HAL_Init>
    SystemClock_Config();
 800080e:	f7ff ffd7 	bl	80007c0 <SystemClock_Config>
    GPIO_Init();
 8000812:	f7ff ff9b 	bl	800074c <GPIO_Init>
    SPI_Init();
 8000816:	f7ff ff4b 	bl	80006b0 <SPI_Init>
    UART_Init();
 800081a:	f7ff ff77 	bl	800070c <UART_Init>
    Print("=== SPI Loopback Test ===\r\n");
 800081e:	4873      	ldr	r0, [pc, #460]	@ (80009ec <main+0x1e8>)
 8000820:	f7ff ff06 	bl	8000630 <Print>
    Print("Connect PA6 (MISO) to PA7 (MOSI) with jumper wire\r\n");
 8000824:	4872      	ldr	r0, [pc, #456]	@ (80009f0 <main+0x1ec>)
 8000826:	f7ff ff03 	bl	8000630 <Print>
    Print("Starting test...\r\n\r\n");
 800082a:	4872      	ldr	r0, [pc, #456]	@ (80009f4 <main+0x1f0>)
 800082c:	f7ff ff00 	bl	8000630 <Print>
    uint8_t test_patterns[] = {0x00, 0xFF, 0x55, 0xAA, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
 8000830:	220c      	movs	r2, #12
 8000832:	4971      	ldr	r1, [pc, #452]	@ (80009f8 <main+0x1f4>)
 8000834:	a809      	add	r0, sp, #36	@ 0x24
 8000836:	f001 fb59 	bl	8001eec <memcpy>
    int failed = 0;
 800083a:	9403      	str	r4, [sp, #12]
    int passed = 0;
 800083c:	9404      	str	r4, [sp, #16]
        uint8_t tx_data = test_patterns[i];
 800083e:	2214      	movs	r2, #20
 8000840:	270a      	movs	r7, #10
 8000842:	ab04      	add	r3, sp, #16
        uint8_t rx_data = 0;
 8000844:	260b      	movs	r6, #11
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000846:	20a0      	movs	r0, #160	@ 0xa0
        uint8_t tx_data = test_patterns[i];
 8000848:	18ff      	adds	r7, r7, r3
 800084a:	189b      	adds	r3, r3, r2
        uint8_t rx_data = 0;
 800084c:	2200      	movs	r2, #0
        uint8_t tx_data = test_patterns[i];
 800084e:	5d1b      	ldrb	r3, [r3, r4]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000850:	2110      	movs	r1, #16
        uint8_t tx_data = test_patterns[i];
 8000852:	703b      	strb	r3, [r7, #0]
        uint8_t rx_data = 0;
 8000854:	ab04      	add	r3, sp, #16
 8000856:	18f6      	adds	r6, r6, r3
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000858:	05c0      	lsls	r0, r0, #23
        uint8_t rx_data = 0;
 800085a:	7032      	strb	r2, [r6, #0]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800085c:	f000 faf4 	bl	8000e48 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000860:	2001      	movs	r0, #1
 8000862:	f000 f9ed 	bl	8000c40 <HAL_Delay>
        HAL_SPI_TransmitReceive(&spi, &tx_data, &rx_data, 1, 1000);
 8000866:	4b65      	ldr	r3, [pc, #404]	@ (80009fc <main+0x1f8>)
 8000868:	0032      	movs	r2, r6
 800086a:	9305      	str	r3, [sp, #20]
 800086c:	23fa      	movs	r3, #250	@ 0xfa
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	0039      	movs	r1, r7
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	9805      	ldr	r0, [sp, #20]
 8000876:	2301      	movs	r3, #1
 8000878:	f000 ff53 	bl	8001722 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800087c:	20a0      	movs	r0, #160	@ 0xa0
 800087e:	2201      	movs	r2, #1
 8000880:	2110      	movs	r1, #16
 8000882:	05c0      	lsls	r0, r0, #23
 8000884:	f000 fae0 	bl	8000e48 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f000 f9d9 	bl	8000c40 <HAL_Delay>
        Print("Test ");
 800088e:	485c      	ldr	r0, [pc, #368]	@ (8000a00 <main+0x1fc>)
 8000890:	f7ff fece 	bl	8000630 <Print>
        if(i < 10) PrintChar('0');
 8000894:	2c09      	cmp	r4, #9
 8000896:	dc02      	bgt.n	800089e <main+0x9a>
 8000898:	2030      	movs	r0, #48	@ 0x30
 800089a:	f7ff fed7 	bl	800064c <PrintChar>
        PrintNumber(i);
 800089e:	0020      	movs	r0, r4
 80008a0:	f7ff fee2 	bl	8000668 <PrintNumber>
        Print(": TX=0x");
 80008a4:	4857      	ldr	r0, [pc, #348]	@ (8000a04 <main+0x200>)
 80008a6:	f7ff fec3 	bl	8000630 <Print>
        hex_tx[0] = (tx_data >> 4) < 10 ? '0' + (tx_data >> 4) : 'A' + (tx_data >> 4) - 10;
 80008aa:	783b      	ldrb	r3, [r7, #0]
 80008ac:	0919      	lsrs	r1, r3, #4
 80008ae:	000a      	movs	r2, r1
 80008b0:	3237      	adds	r2, #55	@ 0x37
 80008b2:	2b9f      	cmp	r3, #159	@ 0x9f
 80008b4:	d800      	bhi.n	80008b8 <main+0xb4>
 80008b6:	3a07      	subs	r2, #7
 80008b8:	a807      	add	r0, sp, #28
 80008ba:	7002      	strb	r2, [r0, #0]
        hex_tx[1] = (tx_data & 0xF) < 10 ? '0' + (tx_data & 0xF) : 'A' + (tx_data & 0xF) - 10;
 80008bc:	220f      	movs	r2, #15
 80008be:	4013      	ands	r3, r2
 80008c0:	001a      	movs	r2, r3
 80008c2:	3237      	adds	r2, #55	@ 0x37
 80008c4:	2b09      	cmp	r3, #9
 80008c6:	d801      	bhi.n	80008cc <main+0xc8>
 80008c8:	3330      	adds	r3, #48	@ 0x30
 80008ca:	001a      	movs	r2, r3
        hex_tx[2] = '\0';
 80008cc:	2300      	movs	r3, #0
        hex_tx[1] = (tx_data & 0xF) < 10 ? '0' + (tx_data & 0xF) : 'A' + (tx_data & 0xF) - 10;
 80008ce:	7042      	strb	r2, [r0, #1]
        hex_tx[2] = '\0';
 80008d0:	7083      	strb	r3, [r0, #2]
        Print(hex_tx);
 80008d2:	f7ff fead 	bl	8000630 <Print>
        Print(" RX=0x");
 80008d6:	484c      	ldr	r0, [pc, #304]	@ (8000a08 <main+0x204>)
 80008d8:	f7ff feaa 	bl	8000630 <Print>
        hex_rx[0] = (rx_data >> 4) < 10 ? '0' + (rx_data >> 4) : 'A' + (rx_data >> 4) - 10;
 80008dc:	7833      	ldrb	r3, [r6, #0]
 80008de:	0919      	lsrs	r1, r3, #4
 80008e0:	000a      	movs	r2, r1
 80008e2:	3237      	adds	r2, #55	@ 0x37
 80008e4:	2b9f      	cmp	r3, #159	@ 0x9f
 80008e6:	d800      	bhi.n	80008ea <main+0xe6>
 80008e8:	3a07      	subs	r2, #7
 80008ea:	ad08      	add	r5, sp, #32
 80008ec:	702a      	strb	r2, [r5, #0]
        hex_rx[1] = (rx_data & 0xF) < 10 ? '0' + (rx_data & 0xF) : 'A' + (rx_data & 0xF) - 10;
 80008ee:	220f      	movs	r2, #15
 80008f0:	4013      	ands	r3, r2
 80008f2:	001a      	movs	r2, r3
 80008f4:	3237      	adds	r2, #55	@ 0x37
 80008f6:	2b09      	cmp	r3, #9
 80008f8:	d801      	bhi.n	80008fe <main+0xfa>
 80008fa:	3330      	adds	r3, #48	@ 0x30
 80008fc:	001a      	movs	r2, r3
        hex_rx[2] = '\0';
 80008fe:	2300      	movs	r3, #0
        Print(hex_rx);
 8000900:	0028      	movs	r0, r5
        hex_rx[1] = (rx_data & 0xF) < 10 ? '0' + (rx_data & 0xF) : 'A' + (rx_data & 0xF) - 10;
 8000902:	706a      	strb	r2, [r5, #1]
        hex_rx[2] = '\0';
 8000904:	70ab      	strb	r3, [r5, #2]
        Print(hex_rx);
 8000906:	f7ff fe93 	bl	8000630 <Print>
        if(tx_data == rx_data) {
 800090a:	783a      	ldrb	r2, [r7, #0]
 800090c:	7833      	ldrb	r3, [r6, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	d157      	bne.n	80009c2 <main+0x1be>
            Print(" - PASS\r\n");
 8000912:	483e      	ldr	r0, [pc, #248]	@ (8000a0c <main+0x208>)
 8000914:	f7ff fe8c 	bl	8000630 <Print>
            passed++;
 8000918:	9b04      	ldr	r3, [sp, #16]
 800091a:	3301      	adds	r3, #1
 800091c:	9304      	str	r3, [sp, #16]
        HAL_Delay(100);
 800091e:	2064      	movs	r0, #100	@ 0x64
    for(int i = 0; i < num_tests; i++) {
 8000920:	3401      	adds	r4, #1
        HAL_Delay(100);
 8000922:	f000 f98d 	bl	8000c40 <HAL_Delay>
    for(int i = 0; i < num_tests; i++) {
 8000926:	2c0c      	cmp	r4, #12
 8000928:	d189      	bne.n	800083e <main+0x3a>
    Print("\r\n=== Test Summary ===\r\n");
 800092a:	4839      	ldr	r0, [pc, #228]	@ (8000a10 <main+0x20c>)
 800092c:	f7ff fe80 	bl	8000630 <Print>
    Print("Passed: ");
 8000930:	4838      	ldr	r0, [pc, #224]	@ (8000a14 <main+0x210>)
 8000932:	f7ff fe7d 	bl	8000630 <Print>
    PrintNumber(passed);
 8000936:	9804      	ldr	r0, [sp, #16]
 8000938:	f7ff fe96 	bl	8000668 <PrintNumber>
    Print("\r\nFailed: ");
 800093c:	4836      	ldr	r0, [pc, #216]	@ (8000a18 <main+0x214>)
 800093e:	f7ff fe77 	bl	8000630 <Print>
    PrintNumber(failed);
 8000942:	9803      	ldr	r0, [sp, #12]
 8000944:	f7ff fe90 	bl	8000668 <PrintNumber>
    Print("\r\n");
 8000948:	4834      	ldr	r0, [pc, #208]	@ (8000a1c <main+0x218>)
 800094a:	f7ff fe71 	bl	8000630 <Print>
    if(failed == 0) {
 800094e:	9b03      	ldr	r3, [sp, #12]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d13d      	bne.n	80009d0 <main+0x1cc>
        Print("SUCCESS: SPI is working correctly!\r\n");
 8000954:	4832      	ldr	r0, [pc, #200]	@ (8000a20 <main+0x21c>)
 8000956:	f7ff fe6b 	bl	8000630 <Print>
        Print("You can now test W5500 communication.\r\n");
 800095a:	4832      	ldr	r0, [pc, #200]	@ (8000a24 <main+0x220>)
        Print("Check your SPI pin connections.\r\n");
 800095c:	f7ff fe68 	bl	8000630 <Print>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000960:	27a0      	movs	r7, #160	@ 0xa0
    Print("\r\nStarting continuous test (Ctrl+C to stop)...\r\n");
 8000962:	4831      	ldr	r0, [pc, #196]	@ (8000a28 <main+0x224>)
 8000964:	f7ff fe64 	bl	8000630 <Print>
    uint8_t counter = 0;
 8000968:	2400      	movs	r4, #0
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800096a:	2610      	movs	r6, #16
 800096c:	05ff      	lsls	r7, r7, #23
        uint8_t rx = 0;
 800096e:	2200      	movs	r2, #0
        uint8_t tx = counter;
 8000970:	ab04      	add	r3, sp, #16
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000972:	0031      	movs	r1, r6
 8000974:	0038      	movs	r0, r7
        uint8_t tx = counter;
 8000976:	731c      	strb	r4, [r3, #12]
        uint8_t rx = 0;
 8000978:	702a      	strb	r2, [r5, #0]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800097a:	f000 fa65 	bl	8000e48 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&spi, &tx, &rx, 1, 1000);
 800097e:	23fa      	movs	r3, #250	@ 0xfa
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	002a      	movs	r2, r5
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	a907      	add	r1, sp, #28
 8000988:	2301      	movs	r3, #1
 800098a:	9805      	ldr	r0, [sp, #20]
 800098c:	f000 fec9 	bl	8001722 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000990:	2201      	movs	r2, #1
 8000992:	0031      	movs	r1, r6
 8000994:	0038      	movs	r0, r7
 8000996:	f000 fa57 	bl	8000e48 <HAL_GPIO_WritePin>
        if(tx != rx) {
 800099a:	ab04      	add	r3, sp, #16
 800099c:	7b1a      	ldrb	r2, [r3, #12]
 800099e:	782b      	ldrb	r3, [r5, #0]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d01a      	beq.n	80009da <main+0x1d6>
            Print("ERROR at count ");
 80009a4:	4821      	ldr	r0, [pc, #132]	@ (8000a2c <main+0x228>)
 80009a6:	f7ff fe43 	bl	8000630 <Print>
            PrintNumber(counter);
 80009aa:	0020      	movs	r0, r4
 80009ac:	f7ff fe5c 	bl	8000668 <PrintNumber>
            Print("\r\n");
 80009b0:	481a      	ldr	r0, [pc, #104]	@ (8000a1c <main+0x218>)
            Print(".");  // Progress indicator
 80009b2:	f7ff fe3d 	bl	8000630 <Print>
        HAL_Delay(10);
 80009b6:	200a      	movs	r0, #10
        counter++;
 80009b8:	3401      	adds	r4, #1
 80009ba:	b2e4      	uxtb	r4, r4
        HAL_Delay(10);
 80009bc:	f000 f940 	bl	8000c40 <HAL_Delay>
    while(1) {
 80009c0:	e7d5      	b.n	800096e <main+0x16a>
            Print(" - FAIL\r\n");
 80009c2:	481b      	ldr	r0, [pc, #108]	@ (8000a30 <main+0x22c>)
 80009c4:	f7ff fe34 	bl	8000630 <Print>
            failed++;
 80009c8:	9b03      	ldr	r3, [sp, #12]
 80009ca:	3301      	adds	r3, #1
 80009cc:	9303      	str	r3, [sp, #12]
 80009ce:	e7a6      	b.n	800091e <main+0x11a>
        Print("ERROR: SPI communication failed!\r\n");
 80009d0:	4818      	ldr	r0, [pc, #96]	@ (8000a34 <main+0x230>)
 80009d2:	f7ff fe2d 	bl	8000630 <Print>
        Print("Check your SPI pin connections.\r\n");
 80009d6:	4818      	ldr	r0, [pc, #96]	@ (8000a38 <main+0x234>)
 80009d8:	e7c0      	b.n	800095c <main+0x158>
        } else if(counter % 50 == 0) {
 80009da:	2132      	movs	r1, #50	@ 0x32
 80009dc:	0020      	movs	r0, r4
 80009de:	f7ff fc21 	bl	8000224 <__aeabi_uidivmod>
 80009e2:	b2c9      	uxtb	r1, r1
 80009e4:	2900      	cmp	r1, #0
 80009e6:	d1e6      	bne.n	80009b6 <main+0x1b2>
            Print(".");  // Progress indicator
 80009e8:	4814      	ldr	r0, [pc, #80]	@ (8000a3c <main+0x238>)
 80009ea:	e7e2      	b.n	80009b2 <main+0x1ae>
 80009ec:	08001f36 	.word	0x08001f36
 80009f0:	08001f52 	.word	0x08001f52
 80009f4:	08001f86 	.word	0x08001f86
 80009f8:	08001f18 	.word	0x08001f18
 80009fc:	200000b0 	.word	0x200000b0
 8000a00:	08001f9b 	.word	0x08001f9b
 8000a04:	08001fa1 	.word	0x08001fa1
 8000a08:	08001fa9 	.word	0x08001fa9
 8000a0c:	08001fb0 	.word	0x08001fb0
 8000a10:	08001fc4 	.word	0x08001fc4
 8000a14:	08001fdd 	.word	0x08001fdd
 8000a18:	08001fe6 	.word	0x08001fe6
 8000a1c:	08001f98 	.word	0x08001f98
 8000a20:	08001ff1 	.word	0x08001ff1
 8000a24:	08002016 	.word	0x08002016
 8000a28:	08002083 	.word	0x08002083
 8000a2c:	080020b4 	.word	0x080020b4
 8000a30:	08001fba 	.word	0x08001fba
 8000a34:	0800203e 	.word	0x0800203e
 8000a38:	08002061 	.word	0x08002061
 8000a3c:	080020c4 	.word	0x080020c4

08000a40 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a40:	2201      	movs	r2, #1
 8000a42:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <HAL_MspInit+0x18>)
 8000a44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000a46:	430a      	orrs	r2, r1
 8000a48:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2280      	movs	r2, #128	@ 0x80
 8000a4c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000a4e:	0552      	lsls	r2, r2, #21
 8000a50:	430a      	orrs	r2, r1
 8000a52:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a54:	4770      	bx	lr
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	0004      	movs	r4, r0
 8000a60:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	2214      	movs	r2, #20
 8000a64:	2100      	movs	r1, #0
 8000a66:	a801      	add	r0, sp, #4
 8000a68:	f001 fa14 	bl	8001e94 <memset>
  if(hspi->Instance==SPI1)
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <HAL_SPI_MspInit+0x50>)
 8000a6e:	6822      	ldr	r2, [r4, #0]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d118      	bne.n	8000aa6 <HAL_SPI_MspInit+0x4a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a74:	2280      	movs	r2, #128	@ 0x80
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <HAL_SPI_MspInit+0x54>)
 8000a78:	0152      	lsls	r2, r2, #5
 8000a7a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a82:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a8e:	400b      	ands	r3, r1
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a94:	23e0      	movs	r3, #224	@ 0xe0
 8000a96:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	3bde      	subs	r3, #222	@ 0xde
 8000a9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f000 f923 	bl	8000cec <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000aa6:	b006      	add	sp, #24
 8000aa8:	bd10      	pop	{r4, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	40013000 	.word	0x40013000
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b510      	push	{r4, lr}
 8000ab6:	0004      	movs	r4, r0
 8000ab8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	2214      	movs	r2, #20
 8000abc:	2100      	movs	r1, #0
 8000abe:	a801      	add	r0, sp, #4
 8000ac0:	f001 f9e8 	bl	8001e94 <memset>
  if(huart->Instance==USART2)
 8000ac4:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <HAL_UART_MspInit+0x54>)
 8000ac6:	6822      	ldr	r2, [r4, #0]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d11a      	bne.n	8000b02 <HAL_UART_MspInit+0x4e>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000acc:	2280      	movs	r2, #128	@ 0x80
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <HAL_UART_MspInit+0x58>)
 8000ad0:	0292      	lsls	r2, r2, #10
 8000ad2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad6:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_UART_MspInit+0x5c>)
 8000aee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	185b      	adds	r3, r3, r1
 8000af6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000af8:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000afc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f000 f8f5 	bl	8000cec <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b02:	b006      	add	sp, #24
 8000b04:	bd10      	pop	{r4, pc}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	00008004 	.word	0x00008004

08000b14 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler>

08000b16 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler>

08000b18 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1e:	f000 f87d 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b22:	bd10      	pop	{r4, pc}

08000b24 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	4770      	bx	lr
	...

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b28:	4813      	ldr	r0, [pc, #76]	@ (8000b78 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b2c:	f7ff fffa 	bl	8000b24 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000b30:	4812      	ldr	r0, [pc, #72]	@ (8000b7c <LoopForever+0x6>)
    LDR R1, [R0]
 8000b32:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b34:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <LoopForever+0xa>)
    CMP R1, R2
 8000b38:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b3a:	d105      	bne.n	8000b48 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000b3c:	4811      	ldr	r0, [pc, #68]	@ (8000b84 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b3e:	4912      	ldr	r1, [pc, #72]	@ (8000b88 <LoopForever+0x12>)
    STR R1, [R0]
 8000b40:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b42:	4812      	ldr	r0, [pc, #72]	@ (8000b8c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b44:	4912      	ldr	r1, [pc, #72]	@ (8000b90 <LoopForever+0x1a>)
    STR R1, [R0]
 8000b46:	6001      	str	r1, [r0, #0]

08000b48 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	4812      	ldr	r0, [pc, #72]	@ (8000b94 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000b4a:	4913      	ldr	r1, [pc, #76]	@ (8000b98 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000b4c:	4a13      	ldr	r2, [pc, #76]	@ (8000b9c <LoopForever+0x26>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ba0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b60:	4c10      	ldr	r4, [pc, #64]	@ (8000ba4 <LoopForever+0x2e>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f001 f999 	bl	8001ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b72:	f7ff fe47 	bl	8000804 <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
   ldr   r0, =_estack
 8000b78:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000b7c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b80:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000b84:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000b88:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b8c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b90:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b9c:	080020f8 	.word	0x080020f8
  ldr r2, =_sbss
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba4:	2000010c 	.word	0x2000010c

08000ba8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC1_COMP_IRQHandler>
	...

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb0:	20fa      	movs	r0, #250	@ 0xfa
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <HAL_InitTick+0x3c>)
 8000bb4:	0080      	lsls	r0, r0, #2
 8000bb6:	7819      	ldrb	r1, [r3, #0]
 8000bb8:	f7ff faae 	bl	8000118 <__udivsi3>
 8000bbc:	4c0b      	ldr	r4, [pc, #44]	@ (8000bec <HAL_InitTick+0x40>)
 8000bbe:	0001      	movs	r1, r0
 8000bc0:	6820      	ldr	r0, [r4, #0]
 8000bc2:	f7ff faa9 	bl	8000118 <__udivsi3>
 8000bc6:	f000 f877 	bl	8000cb8 <HAL_SYSTICK_Config>
 8000bca:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000bcc:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d109      	bne.n	8000be6 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	2d03      	cmp	r5, #3
 8000bd4:	d807      	bhi.n	8000be6 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	0022      	movs	r2, r4
 8000bda:	0029      	movs	r1, r5
 8000bdc:	f000 f842 	bl	8000c64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	0020      	movs	r0, r4
 8000be2:	4b03      	ldr	r3, [pc, #12]	@ (8000bf0 <HAL_InitTick+0x44>)
 8000be4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
 8000be8:	20000004 	.word	0x20000004
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bf4:	2340      	movs	r3, #64	@ 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <HAL_Init+0x24>)
{
 8000bf8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bfa:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfc:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bfe:	430b      	orrs	r3, r1
 8000c00:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c02:	f7ff ffd3 	bl	8000bac <HAL_InitTick>
 8000c06:	1e04      	subs	r4, r0, #0
 8000c08:	d103      	bne.n	8000c12 <HAL_Init+0x1e>
    HAL_MspInit();
 8000c0a:	f7ff ff19 	bl	8000a40 <HAL_MspInit>
}
 8000c0e:	0020      	movs	r0, r4
 8000c10:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000c12:	2401      	movs	r4, #1
 8000c14:	e7fb      	b.n	8000c0e <HAL_Init+0x1a>
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c1c:	4a03      	ldr	r2, [pc, #12]	@ (8000c2c <HAL_IncTick+0x10>)
 8000c1e:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <HAL_IncTick+0x14>)
 8000c20:	6811      	ldr	r1, [r2, #0]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	185b      	adds	r3, r3, r1
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	4770      	bx	lr
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	20000108 	.word	0x20000108
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c34:	4b01      	ldr	r3, [pc, #4]	@ (8000c3c <HAL_GetTick+0x8>)
 8000c36:	6818      	ldr	r0, [r3, #0]
}
 8000c38:	4770      	bx	lr
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	20000108 	.word	0x20000108

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff fff6 	bl	8000c34 <HAL_GetTick>
 8000c48:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	1c63      	adds	r3, r4, #1
 8000c4c:	d002      	beq.n	8000c54 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <HAL_Delay+0x20>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	1b40      	subs	r0, r0, r5
 8000c5a:	42a0      	cmp	r0, r4
 8000c5c:	d3fa      	bcc.n	8000c54 <HAL_Delay+0x14>
  {
  }
}
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c64:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c66:	24ff      	movs	r4, #255	@ 0xff
 8000c68:	2203      	movs	r2, #3
 8000c6a:	000b      	movs	r3, r1
 8000c6c:	0021      	movs	r1, r4
 8000c6e:	4002      	ands	r2, r0
 8000c70:	00d2      	lsls	r2, r2, #3
 8000c72:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c74:	019b      	lsls	r3, r3, #6
 8000c76:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c78:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7a:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	db0a      	blt.n	8000c96 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c80:	24c0      	movs	r4, #192	@ 0xc0
 8000c82:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb0 <HAL_NVIC_SetPriority+0x4c>)
 8000c84:	0880      	lsrs	r0, r0, #2
 8000c86:	0080      	lsls	r0, r0, #2
 8000c88:	1880      	adds	r0, r0, r2
 8000c8a:	00a4      	lsls	r4, r4, #2
 8000c8c:	5902      	ldr	r2, [r0, r4]
 8000c8e:	400a      	ands	r2, r1
 8000c90:	4313      	orrs	r3, r2
 8000c92:	5103      	str	r3, [r0, r4]
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000c94:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c96:	220f      	movs	r2, #15
 8000c98:	4010      	ands	r0, r2
 8000c9a:	3808      	subs	r0, #8
 8000c9c:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <HAL_NVIC_SetPriority+0x50>)
 8000c9e:	0880      	lsrs	r0, r0, #2
 8000ca0:	0080      	lsls	r0, r0, #2
 8000ca2:	1880      	adds	r0, r0, r2
 8000ca4:	69c2      	ldr	r2, [r0, #28]
 8000ca6:	4011      	ands	r1, r2
 8000ca8:	4319      	orrs	r1, r3
 8000caa:	61c1      	str	r1, [r0, #28]
 8000cac:	e7f2      	b.n	8000c94 <HAL_NVIC_SetPriority+0x30>
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	1e43      	subs	r3, r0, #1
 8000cbc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d20d      	bcs.n	8000ce0 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc4:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc8:	4807      	ldr	r0, [pc, #28]	@ (8000ce8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ccc:	6a03      	ldr	r3, [r0, #32]
 8000cce:	0609      	lsls	r1, r1, #24
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	0a1b      	lsrs	r3, r3, #8
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ce0:	4770      	bx	lr
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	e000e010 	.word	0xe000e010
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8000cec:	2300      	movs	r3, #0
{
 8000cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf0:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cf2:	680a      	ldr	r2, [r1, #0]
 8000cf4:	0014      	movs	r4, r2
 8000cf6:	40dc      	lsrs	r4, r3
 8000cf8:	d101      	bne.n	8000cfe <HAL_GPIO_Init+0x12>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8000cfa:	b005      	add	sp, #20
 8000cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cfe:	2501      	movs	r5, #1
 8000d00:	0014      	movs	r4, r2
 8000d02:	409d      	lsls	r5, r3
 8000d04:	402c      	ands	r4, r5
 8000d06:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 8000d08:	422a      	tst	r2, r5
 8000d0a:	d100      	bne.n	8000d0e <HAL_GPIO_Init+0x22>
 8000d0c:	e090      	b.n	8000e30 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d0e:	684a      	ldr	r2, [r1, #4]
 8000d10:	005f      	lsls	r7, r3, #1
 8000d12:	4694      	mov	ip, r2
 8000d14:	2203      	movs	r2, #3
 8000d16:	4664      	mov	r4, ip
 8000d18:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d1a:	2403      	movs	r4, #3
 8000d1c:	40bc      	lsls	r4, r7
 8000d1e:	43e4      	mvns	r4, r4
 8000d20:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d22:	1e54      	subs	r4, r2, #1
 8000d24:	2c01      	cmp	r4, #1
 8000d26:	d82e      	bhi.n	8000d86 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000d28:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d2a:	9c01      	ldr	r4, [sp, #4]
 8000d2c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2e:	68cc      	ldr	r4, [r1, #12]
 8000d30:	40bc      	lsls	r4, r7
 8000d32:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000d34:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d36:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d38:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d3a:	43ac      	bics	r4, r5
 8000d3c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3e:	4664      	mov	r4, ip
 8000d40:	0924      	lsrs	r4, r4, #4
 8000d42:	4034      	ands	r4, r6
 8000d44:	409c      	lsls	r4, r3
 8000d46:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000d48:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000d4a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d4c:	9c01      	ldr	r4, [sp, #4]
 8000d4e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d50:	688c      	ldr	r4, [r1, #8]
 8000d52:	40bc      	lsls	r4, r7
 8000d54:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000d56:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d58:	2a02      	cmp	r2, #2
 8000d5a:	d116      	bne.n	8000d8a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d5c:	2507      	movs	r5, #7
 8000d5e:	260f      	movs	r6, #15
 8000d60:	401d      	ands	r5, r3
 8000d62:	00ad      	lsls	r5, r5, #2
 8000d64:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 8000d66:	08dc      	lsrs	r4, r3, #3
 8000d68:	00a4      	lsls	r4, r4, #2
 8000d6a:	1904      	adds	r4, r0, r4
 8000d6c:	9402      	str	r4, [sp, #8]
 8000d6e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d70:	9603      	str	r6, [sp, #12]
 8000d72:	0026      	movs	r6, r4
 8000d74:	9c03      	ldr	r4, [sp, #12]
 8000d76:	43a6      	bics	r6, r4
 8000d78:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d7a:	690e      	ldr	r6, [r1, #16]
 8000d7c:	40ae      	lsls	r6, r5
 8000d7e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8000d80:	9c02      	ldr	r4, [sp, #8]
 8000d82:	6226      	str	r6, [r4, #32]
 8000d84:	e001      	b.n	8000d8a <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d86:	2a03      	cmp	r2, #3
 8000d88:	d1df      	bne.n	8000d4a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000d8c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d8e:	9d01      	ldr	r5, [sp, #4]
 8000d90:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d92:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d94:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000d96:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d98:	4662      	mov	r2, ip
 8000d9a:	02a4      	lsls	r4, r4, #10
 8000d9c:	4222      	tst	r2, r4
 8000d9e:	d047      	beq.n	8000e30 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da0:	2501      	movs	r5, #1
 8000da2:	4c24      	ldr	r4, [pc, #144]	@ (8000e34 <HAL_GPIO_Init+0x148>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000da4:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000da8:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	432a      	orrs	r2, r5
 8000dac:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000dae:	4a22      	ldr	r2, [pc, #136]	@ (8000e38 <HAL_GPIO_Init+0x14c>)
 8000db0:	089c      	lsrs	r4, r3, #2
 8000db2:	00a4      	lsls	r4, r4, #2
 8000db4:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000db6:	220f      	movs	r2, #15
 8000db8:	3502      	adds	r5, #2
 8000dba:	401d      	ands	r5, r3
 8000dbc:	00ad      	lsls	r5, r5, #2
 8000dbe:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc0:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000dc2:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	42b8      	cmp	r0, r7
 8000dc8:	d008      	beq.n	8000ddc <HAL_GPIO_Init+0xf0>
 8000dca:	4f1c      	ldr	r7, [pc, #112]	@ (8000e3c <HAL_GPIO_Init+0x150>)
 8000dcc:	3201      	adds	r2, #1
 8000dce:	42b8      	cmp	r0, r7
 8000dd0:	d004      	beq.n	8000ddc <HAL_GPIO_Init+0xf0>
 8000dd2:	4f1b      	ldr	r7, [pc, #108]	@ (8000e40 <HAL_GPIO_Init+0x154>)
 8000dd4:	3205      	adds	r2, #5
 8000dd6:	42b8      	cmp	r0, r7
 8000dd8:	d100      	bne.n	8000ddc <HAL_GPIO_Init+0xf0>
 8000dda:	3a04      	subs	r2, #4
 8000ddc:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dde:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000de0:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de2:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000de4:	4a17      	ldr	r2, [pc, #92]	@ (8000e44 <HAL_GPIO_Init+0x158>)
        temp &= ~((uint32_t)iocurrent);
 8000de6:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000de8:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000dea:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000dec:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000dee:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000df0:	02ff      	lsls	r7, r7, #11
 8000df2:	d401      	bmi.n	8000df8 <HAL_GPIO_Init+0x10c>
        temp &= ~((uint32_t)iocurrent);
 8000df4:	0035      	movs	r5, r6
 8000df6:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000df8:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000dfa:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000dfc:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000dfe:	9d00      	ldr	r5, [sp, #0]
 8000e00:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e02:	02bf      	lsls	r7, r7, #10
 8000e04:	d401      	bmi.n	8000e0a <HAL_GPIO_Init+0x11e>
        temp &= ~((uint32_t)iocurrent);
 8000e06:	0035      	movs	r5, r6
 8000e08:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e0a:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000e0c:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000e0e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000e10:	9d00      	ldr	r5, [sp, #0]
 8000e12:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e14:	03bf      	lsls	r7, r7, #14
 8000e16:	d401      	bmi.n	8000e1c <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 8000e18:	0035      	movs	r5, r6
 8000e1a:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e1c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000e1e:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000e20:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000e22:	9e00      	ldr	r6, [sp, #0]
 8000e24:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e26:	03ff      	lsls	r7, r7, #15
 8000e28:	d401      	bmi.n	8000e2e <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 8000e2a:	4025      	ands	r5, r4
 8000e2c:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000e2e:	6016      	str	r6, [r2, #0]
    position++;
 8000e30:	3301      	adds	r3, #1
 8000e32:	e75e      	b.n	8000cf2 <HAL_GPIO_Init+0x6>
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	50000400 	.word	0x50000400
 8000e40:	50000800 	.word	0x50000800
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e4c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e4e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000e50:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000e52:	e7fc      	b.n	8000e4e <HAL_GPIO_WritePin+0x6>

08000e54 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e54:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8000e58:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000e5a:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	2a08      	cmp	r2, #8
 8000e60:	d02c      	beq.n	8000ebc <HAL_RCC_GetSysClockFreq+0x68>
 8000e62:	2a0c      	cmp	r2, #12
 8000e64:	d00c      	beq.n	8000e80 <HAL_RCC_GetSysClockFreq+0x2c>
 8000e66:	2a04      	cmp	r2, #4
 8000e68:	d120      	bne.n	8000eac <HAL_RCC_GetSysClockFreq+0x58>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8000e70:	4243      	negs	r3, r0
 8000e72:	4158      	adcs	r0, r3
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <HAL_RCC_GetSysClockFreq+0x70>)
 8000e76:	4240      	negs	r0, r0
 8000e78:	4018      	ands	r0, r3
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000e7c:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000e7e:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000e80:	4812      	ldr	r0, [pc, #72]	@ (8000ecc <HAL_RCC_GetSysClockFreq+0x78>)
 8000e82:	028a      	lsls	r2, r1, #10
 8000e84:	0f12      	lsrs	r2, r2, #28
 8000e86:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000e88:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e8a:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000e8c:	0f89      	lsrs	r1, r1, #30
 8000e8e:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e90:	03c0      	lsls	r0, r0, #15
 8000e92:	d504      	bpl.n	8000e9e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8000e94:	480e      	ldr	r0, [pc, #56]	@ (8000ed0 <HAL_RCC_GetSysClockFreq+0x7c>)
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8000e96:	4350      	muls	r0, r2
 8000e98:	f7ff f93e 	bl	8000118 <__udivsi3>
 8000e9c:	e7ef      	b.n	8000e7e <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	06db      	lsls	r3, r3, #27
 8000ea2:	d501      	bpl.n	8000ea8 <HAL_RCC_GetSysClockFreq+0x54>
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8000ea4:	4808      	ldr	r0, [pc, #32]	@ (8000ec8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ea6:	e7f6      	b.n	8000e96 <HAL_RCC_GetSysClockFreq+0x42>
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8000ea8:	480a      	ldr	r0, [pc, #40]	@ (8000ed4 <HAL_RCC_GetSysClockFreq+0x80>)
 8000eaa:	e7f4      	b.n	8000e96 <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000eac:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000eae:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000eb0:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000eb2:	041b      	lsls	r3, r3, #16
 8000eb4:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4098      	lsls	r0, r3
      break;
 8000eba:	e7e0      	b.n	8000e7e <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8000ebe:	e7de      	b.n	8000e7e <HAL_RCC_GetSysClockFreq+0x2a>
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	00b71b00 	.word	0x00b71b00
 8000ec8:	003d0900 	.word	0x003d0900
 8000ecc:	080020c6 	.word	0x080020c6
 8000ed0:	007a1200 	.word	0x007a1200
 8000ed4:	00f42400 	.word	0x00f42400

08000ed8 <HAL_RCC_OscConfig>:
{
 8000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eda:	0005      	movs	r5, r0
 8000edc:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d055      	beq.n	8000f8e <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	4cc0      	ldr	r4, [pc, #768]	@ (80011e8 <HAL_RCC_OscConfig+0x310>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee6:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ee8:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eea:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eec:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eee:	2380      	movs	r3, #128	@ 0x80
 8000ef0:	025b      	lsls	r3, r3, #9
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	07d2      	lsls	r2, r2, #31
 8000ef8:	d43d      	bmi.n	8000f76 <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efa:	682b      	ldr	r3, [r5, #0]
 8000efc:	079b      	lsls	r3, r3, #30
 8000efe:	d500      	bpl.n	8000f02 <HAL_RCC_OscConfig+0x2a>
 8000f00:	e086      	b.n	8001010 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f02:	682b      	ldr	r3, [r5, #0]
 8000f04:	06db      	lsls	r3, r3, #27
 8000f06:	d528      	bpl.n	8000f5a <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d000      	beq.n	8000f0e <HAL_RCC_OscConfig+0x36>
 8000f0c:	e0df      	b.n	80010ce <HAL_RCC_OscConfig+0x1f6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	059b      	lsls	r3, r3, #22
 8000f12:	d502      	bpl.n	8000f1a <HAL_RCC_OscConfig+0x42>
 8000f14:	69ab      	ldr	r3, [r5, #24]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d039      	beq.n	8000f8e <HAL_RCC_OscConfig+0xb6>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f1a:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f1c:	6862      	ldr	r2, [r4, #4]
 8000f1e:	49b3      	ldr	r1, [pc, #716]	@ (80011ec <HAL_RCC_OscConfig+0x314>)
 8000f20:	6a2b      	ldr	r3, [r5, #32]
 8000f22:	400a      	ands	r2, r1
 8000f24:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f26:	0b5b      	lsrs	r3, r3, #13
 8000f28:	3301      	adds	r3, #1
 8000f2a:	023f      	lsls	r7, r7, #8
 8000f2c:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f2e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f30:	6861      	ldr	r1, [r4, #4]
 8000f32:	69ea      	ldr	r2, [r5, #28]
 8000f34:	0209      	lsls	r1, r1, #8
 8000f36:	0a09      	lsrs	r1, r1, #8
 8000f38:	0612      	lsls	r2, r2, #24
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f3e:	68e1      	ldr	r1, [r4, #12]
 8000f40:	48ab      	ldr	r0, [pc, #684]	@ (80011f0 <HAL_RCC_OscConfig+0x318>)
 8000f42:	060b      	lsls	r3, r1, #24
 8000f44:	0f1b      	lsrs	r3, r3, #28
 8000f46:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f48:	4aaa      	ldr	r2, [pc, #680]	@ (80011f4 <HAL_RCC_OscConfig+0x31c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f4a:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8000f4c:	4baa      	ldr	r3, [pc, #680]	@ (80011f8 <HAL_RCC_OscConfig+0x320>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f4e:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	f7ff fe2b 	bl	8000bac <HAL_InitTick>
        if(status != HAL_OK)
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d130      	bne.n	8000fbc <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5a:	682b      	ldr	r3, [r5, #0]
 8000f5c:	071b      	lsls	r3, r3, #28
 8000f5e:	d500      	bpl.n	8000f62 <HAL_RCC_OscConfig+0x8a>
 8000f60:	e0ec      	b.n	800113c <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f62:	682b      	ldr	r3, [r5, #0]
 8000f64:	075b      	lsls	r3, r3, #29
 8000f66:	d500      	bpl.n	8000f6a <HAL_RCC_OscConfig+0x92>
 8000f68:	e10e      	b.n	8001188 <HAL_RCC_OscConfig+0x2b0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d000      	beq.n	8000f72 <HAL_RCC_OscConfig+0x9a>
 8000f70:	e193      	b.n	800129a <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8000f72:	2000      	movs	r0, #0
 8000f74:	e022      	b.n	8000fbc <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f76:	2e08      	cmp	r6, #8
 8000f78:	d003      	beq.n	8000f82 <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f7a:	2e0c      	cmp	r6, #12
 8000f7c:	d109      	bne.n	8000f92 <HAL_RCC_OscConfig+0xba>
 8000f7e:	2f00      	cmp	r7, #0
 8000f80:	d007      	beq.n	8000f92 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	039b      	lsls	r3, r3, #14
 8000f86:	d5b8      	bpl.n	8000efa <HAL_RCC_OscConfig+0x22>
 8000f88:	686b      	ldr	r3, [r5, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1b5      	bne.n	8000efa <HAL_RCC_OscConfig+0x22>
    return HAL_ERROR;
 8000f8e:	2001      	movs	r0, #1
 8000f90:	e014      	b.n	8000fbc <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f92:	686a      	ldr	r2, [r5, #4]
 8000f94:	428a      	cmp	r2, r1
 8000f96:	d113      	bne.n	8000fc0 <HAL_RCC_OscConfig+0xe8>
 8000f98:	6822      	ldr	r2, [r4, #0]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f9e:	f7ff fe49 	bl	8000c34 <HAL_GetTick>
 8000fa2:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fa4:	2280      	movs	r2, #128	@ 0x80
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	0292      	lsls	r2, r2, #10
 8000faa:	4213      	tst	r3, r2
 8000fac:	d1a5      	bne.n	8000efa <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fae:	f7ff fe41 	bl	8000c34 <HAL_GetTick>
 8000fb2:	9b00      	ldr	r3, [sp, #0]
 8000fb4:	1ac0      	subs	r0, r0, r3
 8000fb6:	2864      	cmp	r0, #100	@ 0x64
 8000fb8:	d9f4      	bls.n	8000fa4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000fba:	2003      	movs	r0, #3
}
 8000fbc:	b005      	add	sp, #20
 8000fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc0:	21a0      	movs	r1, #160	@ 0xa0
 8000fc2:	02c9      	lsls	r1, r1, #11
 8000fc4:	428a      	cmp	r2, r1
 8000fc6:	d105      	bne.n	8000fd4 <HAL_RCC_OscConfig+0xfc>
 8000fc8:	2280      	movs	r2, #128	@ 0x80
 8000fca:	6821      	ldr	r1, [r4, #0]
 8000fcc:	02d2      	lsls	r2, r2, #11
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	6022      	str	r2, [r4, #0]
 8000fd2:	e7e1      	b.n	8000f98 <HAL_RCC_OscConfig+0xc0>
 8000fd4:	6821      	ldr	r1, [r4, #0]
 8000fd6:	4889      	ldr	r0, [pc, #548]	@ (80011fc <HAL_RCC_OscConfig+0x324>)
 8000fd8:	4001      	ands	r1, r0
 8000fda:	6021      	str	r1, [r4, #0]
 8000fdc:	6821      	ldr	r1, [r4, #0]
 8000fde:	400b      	ands	r3, r1
 8000fe0:	9303      	str	r3, [sp, #12]
 8000fe2:	9b03      	ldr	r3, [sp, #12]
 8000fe4:	4986      	ldr	r1, [pc, #536]	@ (8001200 <HAL_RCC_OscConfig+0x328>)
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	400b      	ands	r3, r1
 8000fea:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fec:	2a00      	cmp	r2, #0
 8000fee:	d1d6      	bne.n	8000f9e <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fe20 	bl	8000c34 <HAL_GetTick>
 8000ff4:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ff6:	2280      	movs	r2, #128	@ 0x80
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	0292      	lsls	r2, r2, #10
 8000ffc:	4213      	tst	r3, r2
 8000ffe:	d100      	bne.n	8001002 <HAL_RCC_OscConfig+0x12a>
 8001000:	e77b      	b.n	8000efa <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001002:	f7ff fe17 	bl	8000c34 <HAL_GetTick>
 8001006:	9b00      	ldr	r3, [sp, #0]
 8001008:	1ac0      	subs	r0, r0, r3
 800100a:	2864      	cmp	r0, #100	@ 0x64
 800100c:	d9f3      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x11e>
 800100e:	e7d4      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001010:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8001012:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001014:	4213      	tst	r3, r2
 8001016:	d003      	beq.n	8001020 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001018:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800101a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800101c:	4311      	orrs	r1, r2
 800101e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001020:	2e04      	cmp	r6, #4
 8001022:	d003      	beq.n	800102c <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001024:	2e0c      	cmp	r6, #12
 8001026:	d124      	bne.n	8001072 <HAL_RCC_OscConfig+0x19a>
 8001028:	2f00      	cmp	r7, #0
 800102a:	d122      	bne.n	8001072 <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800102c:	6822      	ldr	r2, [r4, #0]
 800102e:	0752      	lsls	r2, r2, #29
 8001030:	d501      	bpl.n	8001036 <HAL_RCC_OscConfig+0x15e>
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0ab      	beq.n	8000f8e <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	6861      	ldr	r1, [r4, #4]
 8001038:	692a      	ldr	r2, [r5, #16]
 800103a:	4872      	ldr	r0, [pc, #456]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 800103c:	0212      	lsls	r2, r2, #8
 800103e:	4001      	ands	r1, r0
 8001040:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001042:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001044:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001046:	6822      	ldr	r2, [r4, #0]
 8001048:	438a      	bics	r2, r1
 800104a:	4313      	orrs	r3, r2
 800104c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800104e:	f7ff ff01 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
 8001052:	68e3      	ldr	r3, [r4, #12]
 8001054:	4a66      	ldr	r2, [pc, #408]	@ (80011f0 <HAL_RCC_OscConfig+0x318>)
 8001056:	061b      	lsls	r3, r3, #24
 8001058:	0f1b      	lsrs	r3, r3, #28
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	4965      	ldr	r1, [pc, #404]	@ (80011f4 <HAL_RCC_OscConfig+0x31c>)
 800105e:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8001060:	4b65      	ldr	r3, [pc, #404]	@ (80011f8 <HAL_RCC_OscConfig+0x320>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001062:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	f7ff fda1 	bl	8000bac <HAL_InitTick>
      if(status != HAL_OK)
 800106a:	2800      	cmp	r0, #0
 800106c:	d100      	bne.n	8001070 <HAL_RCC_OscConfig+0x198>
 800106e:	e748      	b.n	8000f02 <HAL_RCC_OscConfig+0x2a>
 8001070:	e7a4      	b.n	8000fbc <HAL_RCC_OscConfig+0xe4>
      if(hsi_state != RCC_HSI_OFF)
 8001072:	2b00      	cmp	r3, #0
 8001074:	d019      	beq.n	80010aa <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001076:	2109      	movs	r1, #9
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	438a      	bics	r2, r1
 800107c:	4313      	orrs	r3, r2
 800107e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001080:	f7ff fdd8 	bl	8000c34 <HAL_GetTick>
 8001084:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001086:	2204      	movs	r2, #4
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	4213      	tst	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	6862      	ldr	r2, [r4, #4]
 8001090:	692b      	ldr	r3, [r5, #16]
 8001092:	495c      	ldr	r1, [pc, #368]	@ (8001204 <HAL_RCC_OscConfig+0x32c>)
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	400a      	ands	r2, r1
 8001098:	4313      	orrs	r3, r2
 800109a:	6063      	str	r3, [r4, #4]
 800109c:	e731      	b.n	8000f02 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109e:	f7ff fdc9 	bl	8000c34 <HAL_GetTick>
 80010a2:	1bc0      	subs	r0, r0, r7
 80010a4:	2802      	cmp	r0, #2
 80010a6:	d9ee      	bls.n	8001086 <HAL_RCC_OscConfig+0x1ae>
 80010a8:	e787      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 80010aa:	2201      	movs	r2, #1
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	4393      	bics	r3, r2
 80010b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010b2:	f7ff fdbf 	bl	8000c34 <HAL_GetTick>
 80010b6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010b8:	2204      	movs	r2, #4
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	4213      	tst	r3, r2
 80010be:	d100      	bne.n	80010c2 <HAL_RCC_OscConfig+0x1ea>
 80010c0:	e71f      	b.n	8000f02 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fdb7 	bl	8000c34 <HAL_GetTick>
 80010c6:	1bc0      	subs	r0, r0, r7
 80010c8:	2802      	cmp	r0, #2
 80010ca:	d9f5      	bls.n	80010b8 <HAL_RCC_OscConfig+0x1e0>
 80010cc:	e775      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010ce:	69ab      	ldr	r3, [r5, #24]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d020      	beq.n	8001116 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_MSI_ENABLE();
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	6822      	ldr	r2, [r4, #0]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4313      	orrs	r3, r2
 80010dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010de:	f7ff fda9 	bl	8000c34 <HAL_GetTick>
 80010e2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010e4:	2280      	movs	r2, #128	@ 0x80
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4213      	tst	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ee:	6863      	ldr	r3, [r4, #4]
 80010f0:	4a3e      	ldr	r2, [pc, #248]	@ (80011ec <HAL_RCC_OscConfig+0x314>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	6a2a      	ldr	r2, [r5, #32]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010fa:	6862      	ldr	r2, [r4, #4]
 80010fc:	69eb      	ldr	r3, [r5, #28]
 80010fe:	0212      	lsls	r2, r2, #8
 8001100:	061b      	lsls	r3, r3, #24
 8001102:	0a12      	lsrs	r2, r2, #8
 8001104:	4313      	orrs	r3, r2
 8001106:	6063      	str	r3, [r4, #4]
 8001108:	e727      	b.n	8000f5a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800110a:	f7ff fd93 	bl	8000c34 <HAL_GetTick>
 800110e:	1bc0      	subs	r0, r0, r7
 8001110:	2802      	cmp	r0, #2
 8001112:	d9e7      	bls.n	80010e4 <HAL_RCC_OscConfig+0x20c>
 8001114:	e751      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	4a3b      	ldr	r2, [pc, #236]	@ (8001208 <HAL_RCC_OscConfig+0x330>)
 800111a:	4013      	ands	r3, r2
 800111c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800111e:	f7ff fd89 	bl	8000c34 <HAL_GetTick>
 8001122:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4213      	tst	r3, r2
 800112c:	d100      	bne.n	8001130 <HAL_RCC_OscConfig+0x258>
 800112e:	e714      	b.n	8000f5a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001130:	f7ff fd80 	bl	8000c34 <HAL_GetTick>
 8001134:	1bc0      	subs	r0, r0, r7
 8001136:	2802      	cmp	r0, #2
 8001138:	d9f4      	bls.n	8001124 <HAL_RCC_OscConfig+0x24c>
 800113a:	e73e      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113c:	696a      	ldr	r2, [r5, #20]
 800113e:	2301      	movs	r3, #1
 8001140:	2a00      	cmp	r2, #0
 8001142:	d010      	beq.n	8001166 <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSI_ENABLE();
 8001144:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001146:	4313      	orrs	r3, r2
 8001148:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 800114a:	f7ff fd73 	bl	8000c34 <HAL_GetTick>
 800114e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001150:	2202      	movs	r2, #2
 8001152:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001154:	4213      	tst	r3, r2
 8001156:	d000      	beq.n	800115a <HAL_RCC_OscConfig+0x282>
 8001158:	e703      	b.n	8000f62 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115a:	f7ff fd6b 	bl	8000c34 <HAL_GetTick>
 800115e:	1bc0      	subs	r0, r0, r7
 8001160:	2802      	cmp	r0, #2
 8001162:	d9f5      	bls.n	8001150 <HAL_RCC_OscConfig+0x278>
 8001164:	e729      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 8001166:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001168:	439a      	bics	r2, r3
 800116a:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 800116c:	f7ff fd62 	bl	8000c34 <HAL_GetTick>
 8001170:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001172:	2202      	movs	r2, #2
 8001174:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001176:	4213      	tst	r3, r2
 8001178:	d100      	bne.n	800117c <HAL_RCC_OscConfig+0x2a4>
 800117a:	e6f2      	b.n	8000f62 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fd5a 	bl	8000c34 <HAL_GetTick>
 8001180:	1bc0      	subs	r0, r0, r7
 8001182:	2802      	cmp	r0, #2
 8001184:	d9f5      	bls.n	8001172 <HAL_RCC_OscConfig+0x29a>
 8001186:	e718      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001188:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800118a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800118e:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001190:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001192:	421a      	tst	r2, r3
 8001194:	d104      	bne.n	80011a0 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001198:	4313      	orrs	r3, r2
 800119a:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 800119c:	2301      	movs	r3, #1
 800119e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a0:	2280      	movs	r2, #128	@ 0x80
 80011a2:	4f1a      	ldr	r7, [pc, #104]	@ (800120c <HAL_RCC_OscConfig+0x334>)
 80011a4:	0052      	lsls	r2, r2, #1
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	4213      	tst	r3, r2
 80011aa:	d008      	beq.n	80011be <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	68ab      	ldr	r3, [r5, #8]
 80011b0:	0052      	lsls	r2, r2, #1
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d12c      	bne.n	8001210 <HAL_RCC_OscConfig+0x338>
 80011b6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80011b8:	4313      	orrs	r3, r2
 80011ba:	6523      	str	r3, [r4, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011bc:	e04d      	b.n	800125a <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011be:	2280      	movs	r2, #128	@ 0x80
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	0052      	lsls	r2, r2, #1
 80011c4:	4313      	orrs	r3, r2
 80011c6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80011c8:	f7ff fd34 	bl	8000c34 <HAL_GetTick>
 80011cc:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ce:	2280      	movs	r2, #128	@ 0x80
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	0052      	lsls	r2, r2, #1
 80011d4:	4213      	tst	r3, r2
 80011d6:	d1e9      	bne.n	80011ac <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d8:	f7ff fd2c 	bl	8000c34 <HAL_GetTick>
 80011dc:	9b01      	ldr	r3, [sp, #4]
 80011de:	1ac0      	subs	r0, r0, r3
 80011e0:	2864      	cmp	r0, #100	@ 0x64
 80011e2:	d9f4      	bls.n	80011ce <HAL_RCC_OscConfig+0x2f6>
 80011e4:	e6e9      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	40021000 	.word	0x40021000
 80011ec:	ffff1fff 	.word	0xffff1fff
 80011f0:	080020d7 	.word	0x080020d7
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000008 	.word	0x20000008
 80011fc:	fffeffff 	.word	0xfffeffff
 8001200:	fffbffff 	.word	0xfffbffff
 8001204:	ffffe0ff 	.word	0xffffe0ff
 8001208:	fffffeff 	.word	0xfffffeff
 800120c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	2b00      	cmp	r3, #0
 8001212:	d116      	bne.n	8001242 <HAL_RCC_OscConfig+0x36a>
 8001214:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001216:	4a51      	ldr	r2, [pc, #324]	@ (800135c <HAL_RCC_OscConfig+0x484>)
 8001218:	4013      	ands	r3, r2
 800121a:	6523      	str	r3, [r4, #80]	@ 0x50
 800121c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800121e:	4a50      	ldr	r2, [pc, #320]	@ (8001360 <HAL_RCC_OscConfig+0x488>)
 8001220:	4013      	ands	r3, r2
 8001222:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001224:	f7ff fd06 	bl	8000c34 <HAL_GetTick>
 8001228:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800122a:	2280      	movs	r2, #128	@ 0x80
 800122c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4213      	tst	r3, r2
 8001232:	d01a      	beq.n	800126a <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001234:	f7ff fcfe 	bl	8000c34 <HAL_GetTick>
 8001238:	4b4a      	ldr	r3, [pc, #296]	@ (8001364 <HAL_RCC_OscConfig+0x48c>)
 800123a:	1bc0      	subs	r0, r0, r7
 800123c:	4298      	cmp	r0, r3
 800123e:	d9f4      	bls.n	800122a <HAL_RCC_OscConfig+0x352>
 8001240:	e6bb      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001242:	21a0      	movs	r1, #160	@ 0xa0
 8001244:	00c9      	lsls	r1, r1, #3
 8001246:	428b      	cmp	r3, r1
 8001248:	d118      	bne.n	800127c <HAL_RCC_OscConfig+0x3a4>
 800124a:	2380      	movs	r3, #128	@ 0x80
 800124c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	430b      	orrs	r3, r1
 8001252:	6523      	str	r3, [r4, #80]	@ 0x50
 8001254:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001256:	431a      	orrs	r2, r3
 8001258:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 800125a:	f7ff fceb 	bl	8000c34 <HAL_GetTick>
 800125e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001260:	2280      	movs	r2, #128	@ 0x80
 8001262:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	4213      	tst	r3, r2
 8001268:	d010      	beq.n	800128c <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 800126a:	9b00      	ldr	r3, [sp, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d000      	beq.n	8001272 <HAL_RCC_OscConfig+0x39a>
 8001270:	e67b      	b.n	8000f6a <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001272:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001274:	4a3c      	ldr	r2, [pc, #240]	@ (8001368 <HAL_RCC_OscConfig+0x490>)
 8001276:	4013      	ands	r3, r2
 8001278:	63a3      	str	r3, [r4, #56]	@ 0x38
 800127a:	e676      	b.n	8000f6a <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800127e:	4a37      	ldr	r2, [pc, #220]	@ (800135c <HAL_RCC_OscConfig+0x484>)
 8001280:	4013      	ands	r3, r2
 8001282:	6523      	str	r3, [r4, #80]	@ 0x50
 8001284:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001286:	4a36      	ldr	r2, [pc, #216]	@ (8001360 <HAL_RCC_OscConfig+0x488>)
 8001288:	4013      	ands	r3, r2
 800128a:	e796      	b.n	80011ba <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128c:	f7ff fcd2 	bl	8000c34 <HAL_GetTick>
 8001290:	4b34      	ldr	r3, [pc, #208]	@ (8001364 <HAL_RCC_OscConfig+0x48c>)
 8001292:	1bc0      	subs	r0, r0, r7
 8001294:	4298      	cmp	r0, r3
 8001296:	d9e3      	bls.n	8001260 <HAL_RCC_OscConfig+0x388>
 8001298:	e68f      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800129a:	2e0c      	cmp	r6, #12
 800129c:	d043      	beq.n	8001326 <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129e:	4a33      	ldr	r2, [pc, #204]	@ (800136c <HAL_RCC_OscConfig+0x494>)
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d12e      	bne.n	8001302 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 80012a4:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012a6:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80012a8:	4013      	ands	r3, r2
 80012aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012ac:	f7ff fcc2 	bl	8000c34 <HAL_GetTick>
 80012b0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012b2:	04bf      	lsls	r7, r7, #18
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	423b      	tst	r3, r7
 80012b8:	d11d      	bne.n	80012f6 <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ba:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80012bc:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80012be:	68e2      	ldr	r2, [r4, #12]
 80012c0:	430b      	orrs	r3, r1
 80012c2:	492b      	ldr	r1, [pc, #172]	@ (8001370 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012c4:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c6:	400a      	ands	r2, r1
 80012c8:	4313      	orrs	r3, r2
 80012ca:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012cc:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80012d2:	2380      	movs	r3, #128	@ 0x80
 80012d4:	6822      	ldr	r2, [r4, #0]
 80012d6:	045b      	lsls	r3, r3, #17
 80012d8:	4313      	orrs	r3, r2
 80012da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012dc:	f7ff fcaa 	bl	8000c34 <HAL_GetTick>
 80012e0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	4233      	tst	r3, r6
 80012e6:	d000      	beq.n	80012ea <HAL_RCC_OscConfig+0x412>
 80012e8:	e643      	b.n	8000f72 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ea:	f7ff fca3 	bl	8000c34 <HAL_GetTick>
 80012ee:	1b40      	subs	r0, r0, r5
 80012f0:	2802      	cmp	r0, #2
 80012f2:	d9f6      	bls.n	80012e2 <HAL_RCC_OscConfig+0x40a>
 80012f4:	e661      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fc9d 	bl	8000c34 <HAL_GetTick>
 80012fa:	1b80      	subs	r0, r0, r6
 80012fc:	2802      	cmp	r0, #2
 80012fe:	d9d9      	bls.n	80012b4 <HAL_RCC_OscConfig+0x3dc>
 8001300:	e65b      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 8001302:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001304:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001306:	4013      	ands	r3, r2
 8001308:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800130a:	f7ff fc93 	bl	8000c34 <HAL_GetTick>
 800130e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001310:	04b6      	lsls	r6, r6, #18
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	4233      	tst	r3, r6
 8001316:	d100      	bne.n	800131a <HAL_RCC_OscConfig+0x442>
 8001318:	e62b      	b.n	8000f72 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131a:	f7ff fc8b 	bl	8000c34 <HAL_GetTick>
 800131e:	1b40      	subs	r0, r0, r5
 8001320:	2802      	cmp	r0, #2
 8001322:	d9f6      	bls.n	8001312 <HAL_RCC_OscConfig+0x43a>
 8001324:	e649      	b.n	8000fba <HAL_RCC_OscConfig+0xe2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001326:	2b01      	cmp	r3, #1
 8001328:	d100      	bne.n	800132c <HAL_RCC_OscConfig+0x454>
 800132a:	e630      	b.n	8000f8e <HAL_RCC_OscConfig+0xb6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132c:	2380      	movs	r3, #128	@ 0x80
        pll_config = RCC->CFGR;
 800132e:	68e0      	ldr	r0, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001330:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8001332:	025b      	lsls	r3, r3, #9
 8001334:	4003      	ands	r3, r0
 8001336:	4293      	cmp	r3, r2
 8001338:	d000      	beq.n	800133c <HAL_RCC_OscConfig+0x464>
 800133a:	e628      	b.n	8000f8e <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800133c:	23f0      	movs	r3, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001340:	039b      	lsls	r3, r3, #14
 8001342:	4003      	ands	r3, r0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001344:	4293      	cmp	r3, r2
 8001346:	d000      	beq.n	800134a <HAL_RCC_OscConfig+0x472>
 8001348:	e621      	b.n	8000f8e <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800134a:	23c0      	movs	r3, #192	@ 0xc0
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	4018      	ands	r0, r3
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001350:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001352:	1ac0      	subs	r0, r0, r3
 8001354:	1e43      	subs	r3, r0, #1
 8001356:	4198      	sbcs	r0, r3
 8001358:	b2c0      	uxtb	r0, r0
 800135a:	e62f      	b.n	8000fbc <HAL_RCC_OscConfig+0xe4>
 800135c:	fffffeff 	.word	0xfffffeff
 8001360:	fffffbff 	.word	0xfffffbff
 8001364:	00001388 	.word	0x00001388
 8001368:	efffffff 	.word	0xefffffff
 800136c:	feffffff 	.word	0xfeffffff
 8001370:	ff02ffff 	.word	0xff02ffff

08001374 <HAL_RCC_ClockConfig>:
{
 8001374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001376:	1e04      	subs	r4, r0, #0
 8001378:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800137a:	d101      	bne.n	8001380 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800137c:	2001      	movs	r0, #1
}
 800137e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001380:	2501      	movs	r5, #1
 8001382:	4e5b      	ldr	r6, [pc, #364]	@ (80014f0 <HAL_RCC_ClockConfig+0x17c>)
 8001384:	9a01      	ldr	r2, [sp, #4]
 8001386:	6833      	ldr	r3, [r6, #0]
 8001388:	402b      	ands	r3, r5
 800138a:	4293      	cmp	r3, r2
 800138c:	d331      	bcc.n	80013f2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800138e:	6822      	ldr	r2, [r4, #0]
 8001390:	0793      	lsls	r3, r2, #30
 8001392:	d443      	bmi.n	800141c <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001394:	07d2      	lsls	r2, r2, #31
 8001396:	d449      	bmi.n	800142c <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001398:	2501      	movs	r5, #1
 800139a:	6833      	ldr	r3, [r6, #0]
 800139c:	9a01      	ldr	r2, [sp, #4]
 800139e:	402b      	ands	r3, r5
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d909      	bls.n	80013b8 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a4:	6833      	ldr	r3, [r6, #0]
 80013a6:	43ab      	bics	r3, r5
 80013a8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80013aa:	f7ff fc43 	bl	8000c34 <HAL_GetTick>
 80013ae:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b0:	6833      	ldr	r3, [r6, #0]
 80013b2:	422b      	tst	r3, r5
 80013b4:	d000      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x44>
 80013b6:	e08c      	b.n	80014d2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	6822      	ldr	r2, [r4, #0]
 80013ba:	4d4e      	ldr	r5, [pc, #312]	@ (80014f4 <HAL_RCC_ClockConfig+0x180>)
 80013bc:	0753      	lsls	r3, r2, #29
 80013be:	d500      	bpl.n	80013c2 <HAL_RCC_ClockConfig+0x4e>
 80013c0:	e08f      	b.n	80014e2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	0712      	lsls	r2, r2, #28
 80013c4:	d506      	bpl.n	80013d4 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013c6:	68ea      	ldr	r2, [r5, #12]
 80013c8:	6923      	ldr	r3, [r4, #16]
 80013ca:	494b      	ldr	r1, [pc, #300]	@ (80014f8 <HAL_RCC_ClockConfig+0x184>)
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	400a      	ands	r2, r1
 80013d0:	4313      	orrs	r3, r2
 80013d2:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013d4:	f7ff fd3e 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
 80013d8:	68eb      	ldr	r3, [r5, #12]
 80013da:	4a48      	ldr	r2, [pc, #288]	@ (80014fc <HAL_RCC_ClockConfig+0x188>)
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	0f1b      	lsrs	r3, r3, #28
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	4947      	ldr	r1, [pc, #284]	@ (8001500 <HAL_RCC_ClockConfig+0x18c>)
 80013e4:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 80013e6:	4b47      	ldr	r3, [pc, #284]	@ (8001504 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013e8:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	f7ff fbde 	bl	8000bac <HAL_InitTick>
  if(status != HAL_OK)
 80013f0:	e7c5      	b.n	800137e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	6833      	ldr	r3, [r6, #0]
 80013f4:	9a01      	ldr	r2, [sp, #4]
 80013f6:	43ab      	bics	r3, r5
 80013f8:	4313      	orrs	r3, r2
 80013fa:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80013fc:	f7ff fc1a 	bl	8000c34 <HAL_GetTick>
 8001400:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001402:	6833      	ldr	r3, [r6, #0]
 8001404:	9a01      	ldr	r2, [sp, #4]
 8001406:	402b      	ands	r3, r5
 8001408:	4293      	cmp	r3, r2
 800140a:	d0c0      	beq.n	800138e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140c:	f7ff fc12 	bl	8000c34 <HAL_GetTick>
 8001410:	4b3d      	ldr	r3, [pc, #244]	@ (8001508 <HAL_RCC_ClockConfig+0x194>)
 8001412:	1bc0      	subs	r0, r0, r7
 8001414:	4298      	cmp	r0, r3
 8001416:	d9f4      	bls.n	8001402 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8001418:	2003      	movs	r0, #3
 800141a:	e7b0      	b.n	800137e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	20f0      	movs	r0, #240	@ 0xf0
 800141e:	4935      	ldr	r1, [pc, #212]	@ (80014f4 <HAL_RCC_ClockConfig+0x180>)
 8001420:	68cb      	ldr	r3, [r1, #12]
 8001422:	4383      	bics	r3, r0
 8001424:	68a0      	ldr	r0, [r4, #8]
 8001426:	4303      	orrs	r3, r0
 8001428:	60cb      	str	r3, [r1, #12]
 800142a:	e7b3      	b.n	8001394 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142c:	4d31      	ldr	r5, [pc, #196]	@ (80014f4 <HAL_RCC_ClockConfig+0x180>)
 800142e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001430:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001432:	2a02      	cmp	r2, #2
 8001434:	d118      	bne.n	8001468 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001436:	039b      	lsls	r3, r3, #14
 8001438:	d5a0      	bpl.n	800137c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800143a:	2103      	movs	r1, #3
 800143c:	68eb      	ldr	r3, [r5, #12]
 800143e:	438b      	bics	r3, r1
 8001440:	4313      	orrs	r3, r2
 8001442:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001444:	f7ff fbf6 	bl	8000c34 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001448:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800144a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144c:	2b02      	cmp	r3, #2
 800144e:	d118      	bne.n	8001482 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001450:	220c      	movs	r2, #12
 8001452:	68eb      	ldr	r3, [r5, #12]
 8001454:	4013      	ands	r3, r2
 8001456:	2b08      	cmp	r3, #8
 8001458:	d09e      	beq.n	8001398 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145a:	f7ff fbeb 	bl	8000c34 <HAL_GetTick>
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <HAL_RCC_ClockConfig+0x194>)
 8001460:	1bc0      	subs	r0, r0, r7
 8001462:	4298      	cmp	r0, r3
 8001464:	d9f4      	bls.n	8001450 <HAL_RCC_ClockConfig+0xdc>
 8001466:	e7d7      	b.n	8001418 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001468:	2a03      	cmp	r2, #3
 800146a:	d102      	bne.n	8001472 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800146c:	019b      	lsls	r3, r3, #6
 800146e:	d4e4      	bmi.n	800143a <HAL_RCC_ClockConfig+0xc6>
 8001470:	e784      	b.n	800137c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001472:	2a01      	cmp	r2, #1
 8001474:	d102      	bne.n	800147c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001476:	075b      	lsls	r3, r3, #29
 8001478:	d4df      	bmi.n	800143a <HAL_RCC_ClockConfig+0xc6>
 800147a:	e77f      	b.n	800137c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800147c:	059b      	lsls	r3, r3, #22
 800147e:	d4dc      	bmi.n	800143a <HAL_RCC_ClockConfig+0xc6>
 8001480:	e77c      	b.n	800137c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001482:	2b03      	cmp	r3, #3
 8001484:	d10b      	bne.n	800149e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001486:	220c      	movs	r2, #12
 8001488:	68eb      	ldr	r3, [r5, #12]
 800148a:	4013      	ands	r3, r2
 800148c:	4293      	cmp	r3, r2
 800148e:	d083      	beq.n	8001398 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001490:	f7ff fbd0 	bl	8000c34 <HAL_GetTick>
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <HAL_RCC_ClockConfig+0x194>)
 8001496:	1bc0      	subs	r0, r0, r7
 8001498:	4298      	cmp	r0, r3
 800149a:	d9f4      	bls.n	8001486 <HAL_RCC_ClockConfig+0x112>
 800149c:	e7bc      	b.n	8001418 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d011      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80014a2:	220c      	movs	r2, #12
 80014a4:	68eb      	ldr	r3, [r5, #12]
 80014a6:	4213      	tst	r3, r2
 80014a8:	d100      	bne.n	80014ac <HAL_RCC_ClockConfig+0x138>
 80014aa:	e775      	b.n	8001398 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ac:	f7ff fbc2 	bl	8000c34 <HAL_GetTick>
 80014b0:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <HAL_RCC_ClockConfig+0x194>)
 80014b2:	1bc0      	subs	r0, r0, r7
 80014b4:	4298      	cmp	r0, r3
 80014b6:	d9f4      	bls.n	80014a2 <HAL_RCC_ClockConfig+0x12e>
 80014b8:	e7ae      	b.n	8001418 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ba:	f7ff fbbb 	bl	8000c34 <HAL_GetTick>
 80014be:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <HAL_RCC_ClockConfig+0x194>)
 80014c0:	1bc0      	subs	r0, r0, r7
 80014c2:	4298      	cmp	r0, r3
 80014c4:	d8a8      	bhi.n	8001418 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c6:	220c      	movs	r2, #12
 80014c8:	68eb      	ldr	r3, [r5, #12]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d1f4      	bne.n	80014ba <HAL_RCC_ClockConfig+0x146>
 80014d0:	e762      	b.n	8001398 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d2:	f7ff fbaf 	bl	8000c34 <HAL_GetTick>
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <HAL_RCC_ClockConfig+0x194>)
 80014d8:	1bc0      	subs	r0, r0, r7
 80014da:	4298      	cmp	r0, r3
 80014dc:	d800      	bhi.n	80014e0 <HAL_RCC_ClockConfig+0x16c>
 80014de:	e767      	b.n	80013b0 <HAL_RCC_ClockConfig+0x3c>
 80014e0:	e79a      	b.n	8001418 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e2:	68eb      	ldr	r3, [r5, #12]
 80014e4:	4909      	ldr	r1, [pc, #36]	@ (800150c <HAL_RCC_ClockConfig+0x198>)
 80014e6:	400b      	ands	r3, r1
 80014e8:	68e1      	ldr	r1, [r4, #12]
 80014ea:	430b      	orrs	r3, r1
 80014ec:	60eb      	str	r3, [r5, #12]
 80014ee:	e768      	b.n	80013c2 <HAL_RCC_ClockConfig+0x4e>
 80014f0:	40022000 	.word	0x40022000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	ffffc7ff 	.word	0xffffc7ff
 80014fc:	080020d7 	.word	0x080020d7
 8001500:	20000000 	.word	0x20000000
 8001504:	20000008 	.word	0x20000008
 8001508:	00001388 	.word	0x00001388
 800150c:	fffff8ff 	.word	0xfffff8ff

08001510 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	4905      	ldr	r1, [pc, #20]	@ (800152c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001518:	055b      	lsls	r3, r3, #21
 800151a:	0f5b      	lsrs	r3, r3, #29
 800151c:	5ccb      	ldrb	r3, [r1, r3]
 800151e:	6810      	ldr	r0, [r2, #0]
 8001520:	40d8      	lsrs	r0, r3
}
 8001522:	4770      	bx	lr
 8001524:	40021000 	.word	0x40021000
 8001528:	20000000 	.word	0x20000000
 800152c:	080020cf 	.word	0x080020cf

08001530 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	001f      	movs	r7, r3
 8001534:	b085      	sub	sp, #20
 8001536:	000e      	movs	r6, r1
 8001538:	9201      	str	r2, [sp, #4]
 800153a:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800153c:	f7ff fb7a 	bl	8000c34 <HAL_GetTick>
 8001540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001542:	19dd      	adds	r5, r3, r7
 8001544:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001546:	f7ff fb75 	bl	8000c34 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800154a:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <SPI_WaitFlagStateUntilTimeout+0xb8>)
  tmp_tickstart = HAL_GetTick();
 800154c:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	0d1b      	lsrs	r3, r3, #20
 8001554:	436b      	muls	r3, r5
      {
        tmp_timeout = 0U;
      }
      else
      {
        count--;
 8001556:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001558:	6822      	ldr	r2, [r4, #0]
 800155a:	6893      	ldr	r3, [r2, #8]
 800155c:	4033      	ands	r3, r6
 800155e:	1b9b      	subs	r3, r3, r6
 8001560:	4259      	negs	r1, r3
 8001562:	414b      	adcs	r3, r1
 8001564:	9901      	ldr	r1, [sp, #4]
 8001566:	428b      	cmp	r3, r1
 8001568:	d101      	bne.n	800156e <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
    }
  }

  return HAL_OK;
 800156a:	2000      	movs	r0, #0
 800156c:	e032      	b.n	80015d4 <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 800156e:	1c7b      	adds	r3, r7, #1
 8001570:	d0f3      	beq.n	800155a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001572:	f7ff fb5f 	bl	8000c34 <HAL_GetTick>
 8001576:	9b00      	ldr	r3, [sp, #0]
 8001578:	1ac0      	subs	r0, r0, r3
 800157a:	42a8      	cmp	r0, r5
 800157c:	d32c      	bcc.n	80015d8 <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800157e:	21e0      	movs	r1, #224	@ 0xe0
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	438a      	bics	r2, r1
 8001586:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001588:	2282      	movs	r2, #130	@ 0x82
 800158a:	6861      	ldr	r1, [r4, #4]
 800158c:	0052      	lsls	r2, r2, #1
 800158e:	4291      	cmp	r1, r2
 8001590:	d10c      	bne.n	80015ac <SPI_WaitFlagStateUntilTimeout+0x7c>
 8001592:	2180      	movs	r1, #128	@ 0x80
 8001594:	68a2      	ldr	r2, [r4, #8]
 8001596:	0209      	lsls	r1, r1, #8
 8001598:	428a      	cmp	r2, r1
 800159a:	d003      	beq.n	80015a4 <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	00c9      	lsls	r1, r1, #3
 80015a0:	428a      	cmp	r2, r1
 80015a2:	d103      	bne.n	80015ac <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 80015a4:	2140      	movs	r1, #64	@ 0x40
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	438a      	bics	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80015ac:	2180      	movs	r1, #128	@ 0x80
 80015ae:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80015b0:	0189      	lsls	r1, r1, #6
 80015b2:	428a      	cmp	r2, r1
 80015b4:	d106      	bne.n	80015c4 <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 80015b6:	6819      	ldr	r1, [r3, #0]
 80015b8:	480c      	ldr	r0, [pc, #48]	@ (80015ec <SPI_WaitFlagStateUntilTimeout+0xbc>)
 80015ba:	4001      	ands	r1, r0
 80015bc:	6019      	str	r1, [r3, #0]
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80015c4:	0023      	movs	r3, r4
 80015c6:	2201      	movs	r2, #1
 80015c8:	3351      	adds	r3, #81	@ 0x51
 80015ca:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 80015cc:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80015ce:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80015d0:	3450      	adds	r4, #80	@ 0x50
 80015d2:	7023      	strb	r3, [r4, #0]
}
 80015d4:	b005      	add	sp, #20
 80015d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80015d8:	9b03      	ldr	r3, [sp, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <SPI_WaitFlagStateUntilTimeout+0xb4>
        count--;
 80015de:	9b03      	ldr	r3, [sp, #12]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	e7b8      	b.n	8001556 <SPI_WaitFlagStateUntilTimeout+0x26>
        tmp_timeout = 0U;
 80015e4:	001d      	movs	r5, r3
 80015e6:	e7b7      	b.n	8001558 <SPI_WaitFlagStateUntilTimeout+0x28>
 80015e8:	20000000 	.word	0x20000000
 80015ec:	ffffdfff 	.word	0xffffdfff

080015f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	b085      	sub	sp, #20
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80015f4:	000b      	movs	r3, r1
 80015f6:	9200      	str	r2, [sp, #0]
{
 80015f8:	000e      	movs	r6, r1
 80015fa:	0017      	movs	r7, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80015fc:	2102      	movs	r1, #2
 80015fe:	2201      	movs	r2, #1
{
 8001600:	0004      	movs	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001602:	f7ff ff95 	bl	8001530 <SPI_WaitFlagStateUntilTimeout>
 8001606:	1e05      	subs	r5, r0, #0
 8001608:	d005      	beq.n	8001616 <SPI_EndRxTxTransaction+0x26>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800160a:	2320      	movs	r3, #32
 800160c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 800160e:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001610:	4313      	orrs	r3, r2
 8001612:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001614:	e017      	b.n	8001646 <SPI_EndRxTxTransaction+0x56>
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <SPI_EndRxTxTransaction+0x74>)
 8001618:	4913      	ldr	r1, [pc, #76]	@ (8001668 <SPI_EndRxTxTransaction+0x78>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	f7fe fd7c 	bl	8000118 <__udivsi3>
 8001620:	23fa      	movs	r3, #250	@ 0xfa
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4343      	muls	r3, r0
 8001626:	9303      	str	r3, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001628:	2382      	movs	r3, #130	@ 0x82
 800162a:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800162c:	2280      	movs	r2, #128	@ 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4299      	cmp	r1, r3
 8001632:	d10b      	bne.n	800164c <SPI_EndRxTxTransaction+0x5c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001634:	0033      	movs	r3, r6
 8001636:	002a      	movs	r2, r5
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	0020      	movs	r0, r4
 800163c:	9700      	str	r7, [sp, #0]
 800163e:	f7ff ff77 	bl	8001530 <SPI_WaitFlagStateUntilTimeout>
 8001642:	2800      	cmp	r0, #0
 8001644:	d1e1      	bne.n	800160a <SPI_EndRxTxTransaction+0x1a>
  }

  return HAL_OK;
}
 8001646:	0028      	movs	r0, r5
 8001648:	b005      	add	sp, #20
 800164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 800164c:	9b03      	ldr	r3, [sp, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f9      	beq.n	8001646 <SPI_EndRxTxTransaction+0x56>
      count--;
 8001652:	9b03      	ldr	r3, [sp, #12]
 8001654:	3b01      	subs	r3, #1
 8001656:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4213      	tst	r3, r2
 800165e:	d1f5      	bne.n	800164c <SPI_EndRxTxTransaction+0x5c>
 8001660:	e7f1      	b.n	8001646 <SPI_EndRxTxTransaction+0x56>
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	20000000 	.word	0x20000000
 8001668:	016e3600 	.word	0x016e3600

0800166c <HAL_SPI_Init>:
{
 800166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001670:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001672:	2c00      	cmp	r4, #0
 8001674:	d050      	beq.n	8001718 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001676:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001678:	2b00      	cmp	r3, #0
 800167a:	d14e      	bne.n	800171a <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800167c:	2282      	movs	r2, #130	@ 0x82
 800167e:	6861      	ldr	r1, [r4, #4]
 8001680:	0052      	lsls	r2, r2, #1
 8001682:	4291      	cmp	r1, r2
 8001684:	d000      	beq.n	8001688 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001686:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001688:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800168a:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168c:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800168e:	3551      	adds	r5, #81	@ 0x51
 8001690:	782b      	ldrb	r3, [r5, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8001698:	0023      	movs	r3, r4
 800169a:	3350      	adds	r3, #80	@ 0x50
    HAL_SPI_MspInit(hspi);
 800169c:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800169e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80016a0:	f7ff f9dc 	bl	8000a5c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80016a4:	2602      	movs	r6, #2
  __HAL_SPI_DISABLE(hspi);
 80016a6:	2240      	movs	r2, #64	@ 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016a8:	2082      	movs	r0, #130	@ 0x82
 80016aa:	2784      	movs	r7, #132	@ 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 80016ac:	702e      	strb	r6, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80016ae:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016b0:	0040      	lsls	r0, r0, #1
  __HAL_SPI_DISABLE(hspi);
 80016b2:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016b4:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 80016b6:	4393      	bics	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016ba:	6863      	ldr	r3, [r4, #4]
 80016bc:	69a2      	ldr	r2, [r4, #24]
 80016be:	4003      	ands	r3, r0
 80016c0:	68a0      	ldr	r0, [r4, #8]
 80016c2:	4038      	ands	r0, r7
 80016c4:	2780      	movs	r7, #128	@ 0x80
 80016c6:	4303      	orrs	r3, r0
 80016c8:	68e0      	ldr	r0, [r4, #12]
 80016ca:	013f      	lsls	r7, r7, #4
 80016cc:	4038      	ands	r0, r7
 80016ce:	4303      	orrs	r3, r0
 80016d0:	6920      	ldr	r0, [r4, #16]
 80016d2:	2738      	movs	r7, #56	@ 0x38
 80016d4:	4030      	ands	r0, r6
 80016d6:	4303      	orrs	r3, r0
 80016d8:	6960      	ldr	r0, [r4, #20]
 80016da:	3e01      	subs	r6, #1
 80016dc:	4030      	ands	r0, r6
 80016de:	4303      	orrs	r3, r0
 80016e0:	2080      	movs	r0, #128	@ 0x80
 80016e2:	0080      	lsls	r0, r0, #2
 80016e4:	4010      	ands	r0, r2
 80016e6:	4303      	orrs	r3, r0
 80016e8:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80016ea:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016ec:	4038      	ands	r0, r7
 80016ee:	4303      	orrs	r3, r0
 80016f0:	6a20      	ldr	r0, [r4, #32]
 80016f2:	3748      	adds	r7, #72	@ 0x48
 80016f4:	4038      	ands	r0, r7
 80016f6:	2780      	movs	r7, #128	@ 0x80
 80016f8:	4303      	orrs	r3, r0
 80016fa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80016fc:	01bf      	lsls	r7, r7, #6
 80016fe:	4038      	ands	r0, r7
 8001700:	4303      	orrs	r3, r0
 8001702:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001704:	2304      	movs	r3, #4
 8001706:	2010      	movs	r0, #16
 8001708:	401a      	ands	r2, r3
 800170a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800170c:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800170e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001710:	431a      	orrs	r2, r3
 8001712:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001714:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001716:	702e      	strb	r6, [r5, #0]
}
 8001718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800171e:	6163      	str	r3, [r4, #20]
 8001720:	e7b2      	b.n	8001688 <HAL_SPI_Init+0x1c>

08001722 <HAL_SPI_TransmitReceive>:
{
 8001722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001724:	0004      	movs	r4, r0
 8001726:	b085      	sub	sp, #20
 8001728:	000d      	movs	r5, r1
 800172a:	0017      	movs	r7, r2
 800172c:	001e      	movs	r6, r3
  tickstart = HAL_GetTick();
 800172e:	f7ff fa81 	bl	8000c34 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001732:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001734:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8001736:	3351      	adds	r3, #81	@ 0x51
 8001738:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800173a:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800173c:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800173e:	2b01      	cmp	r3, #1
 8001740:	d00c      	beq.n	800175c <HAL_SPI_TransmitReceive+0x3a>
 8001742:	2382      	movs	r3, #130	@ 0x82
    return HAL_BUSY;
 8001744:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4299      	cmp	r1, r3
 800174a:	d000      	beq.n	800174e <HAL_SPI_TransmitReceive+0x2c>
 800174c:	e091      	b.n	8001872 <HAL_SPI_TransmitReceive+0x150>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800174e:	68a3      	ldr	r3, [r4, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d000      	beq.n	8001756 <HAL_SPI_TransmitReceive+0x34>
 8001754:	e08d      	b.n	8001872 <HAL_SPI_TransmitReceive+0x150>
 8001756:	2a04      	cmp	r2, #4
 8001758:	d000      	beq.n	800175c <HAL_SPI_TransmitReceive+0x3a>
 800175a:	e08a      	b.n	8001872 <HAL_SPI_TransmitReceive+0x150>
    return HAL_ERROR;
 800175c:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800175e:	2d00      	cmp	r5, #0
 8001760:	d100      	bne.n	8001764 <HAL_SPI_TransmitReceive+0x42>
 8001762:	e086      	b.n	8001872 <HAL_SPI_TransmitReceive+0x150>
 8001764:	2f00      	cmp	r7, #0
 8001766:	d100      	bne.n	800176a <HAL_SPI_TransmitReceive+0x48>
 8001768:	e083      	b.n	8001872 <HAL_SPI_TransmitReceive+0x150>
 800176a:	2e00      	cmp	r6, #0
 800176c:	d100      	bne.n	8001770 <HAL_SPI_TransmitReceive+0x4e>
 800176e:	e080      	b.n	8001872 <HAL_SPI_TransmitReceive+0x150>
  __HAL_LOCK(hspi);
 8001770:	0023      	movs	r3, r4
 8001772:	3350      	adds	r3, #80	@ 0x50
 8001774:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001776:	1800      	adds	r0, r0, r0
  __HAL_LOCK(hspi);
 8001778:	2a01      	cmp	r2, #1
 800177a:	d100      	bne.n	800177e <HAL_SPI_TransmitReceive+0x5c>
 800177c:	e079      	b.n	8001872 <HAL_SPI_TransmitReceive+0x150>
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001782:	785a      	ldrb	r2, [r3, #1]
 8001784:	3301      	adds	r3, #1
 8001786:	2a04      	cmp	r2, #4
 8001788:	d001      	beq.n	800178e <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800178a:	2205      	movs	r2, #5
 800178c:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800178e:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001790:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001792:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxXferCount = Size;
 8001794:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8001796:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001798:	6810      	ldr	r0, [r2, #0]
  hspi->RxISR       = NULL;
 800179a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800179c:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800179e:	3340      	adds	r3, #64	@ 0x40
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80017a0:	63a7      	str	r7, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80017a2:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80017a4:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80017a6:	86a6      	strh	r6, [r4, #52]	@ 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017a8:	4218      	tst	r0, r3
 80017aa:	d102      	bne.n	80017b2 <HAL_SPI_TransmitReceive+0x90>
    __HAL_SPI_ENABLE(hspi);
 80017ac:	6810      	ldr	r0, [r2, #0]
 80017ae:	4303      	orrs	r3, r0
 80017b0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	68e0      	ldr	r0, [r4, #12]
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	4298      	cmp	r0, r3
 80017ba:	d15c      	bne.n	8001876 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017bc:	2900      	cmp	r1, #0
 80017be:	d001      	beq.n	80017c4 <HAL_SPI_TransmitReceive+0xa2>
 80017c0:	2e01      	cmp	r6, #1
 80017c2:	d107      	bne.n	80017d4 <HAL_SPI_TransmitReceive+0xb2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80017c4:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017c6:	3502      	adds	r5, #2
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80017c8:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80017ca:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017cc:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80017d4:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80017d6:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80017d8:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017da:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d112      	bne.n	8001806 <HAL_SPI_TransmitReceive+0xe4>
 80017e0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10f      	bne.n	8001806 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80017e6:	0020      	movs	r0, r4
 80017e8:	9a01      	ldr	r2, [sp, #4]
 80017ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80017ec:	f7ff ff00 	bl	80015f0 <SPI_EndRxTxTransaction>
 80017f0:	0023      	movs	r3, r4
 80017f2:	3350      	adds	r3, #80	@ 0x50
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d100      	bne.n	80017fa <HAL_SPI_TransmitReceive+0xd8>
 80017f8:	e086      	b.n	8001908 <HAL_SPI_TransmitReceive+0x1e6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80017fa:	2220      	movs	r2, #32
 80017fc:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80017fe:	2200      	movs	r2, #0
    return HAL_ERROR;
 8001800:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8001802:	701a      	strb	r2, [r3, #0]
    return HAL_ERROR;
 8001804:	e035      	b.n	8001872 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001806:	6821      	ldr	r1, [r4, #0]
 8001808:	688b      	ldr	r3, [r1, #8]
 800180a:	423b      	tst	r3, r7
 800180c:	d00e      	beq.n	800182c <HAL_SPI_TransmitReceive+0x10a>
 800180e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00b      	beq.n	800182c <HAL_SPI_TransmitReceive+0x10a>
 8001814:	2d01      	cmp	r5, #1
 8001816:	d108      	bne.n	800182a <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001818:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800181a:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800181c:	3302      	adds	r3, #2
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800181e:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001820:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8001822:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001824:	3b01      	subs	r3, #1
 8001826:	b29b      	uxth	r3, r3
 8001828:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 800182a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800182c:	688b      	ldr	r3, [r1, #8]
 800182e:	001a      	movs	r2, r3
 8001830:	4032      	ands	r2, r6
 8001832:	4233      	tst	r3, r6
 8001834:	d00c      	beq.n	8001850 <HAL_SPI_TransmitReceive+0x12e>
 8001836:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <HAL_SPI_TransmitReceive+0x12e>
        txallowed = 1U;
 800183c:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800183e:	68c9      	ldr	r1, [r1, #12]
 8001840:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001842:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001844:	3302      	adds	r3, #2
 8001846:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8001848:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800184a:	3b01      	subs	r3, #1
 800184c:	b29b      	uxth	r3, r3
 800184e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001850:	f7ff f9f0 	bl	8000c34 <HAL_GetTick>
 8001854:	9b01      	ldr	r3, [sp, #4]
 8001856:	1ac0      	subs	r0, r0, r3
 8001858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800185a:	4298      	cmp	r0, r3
 800185c:	d3bd      	bcc.n	80017da <HAL_SPI_TransmitReceive+0xb8>
 800185e:	3301      	adds	r3, #1
 8001860:	d0bb      	beq.n	80017da <HAL_SPI_TransmitReceive+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8001862:	0023      	movs	r3, r4
 8001864:	2201      	movs	r2, #1
 8001866:	3351      	adds	r3, #81	@ 0x51
 8001868:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800186a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800186c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800186e:	3450      	adds	r4, #80	@ 0x50
 8001870:	7023      	strb	r3, [r4, #0]
}
 8001872:	b005      	add	sp, #20
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001876:	2900      	cmp	r1, #0
 8001878:	d001      	beq.n	800187e <HAL_SPI_TransmitReceive+0x15c>
 800187a:	2e01      	cmp	r6, #1
 800187c:	d108      	bne.n	8001890 <HAL_SPI_TransmitReceive+0x16e>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800187e:	782b      	ldrb	r3, [r5, #0]
 8001880:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001882:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001884:	3301      	adds	r3, #1
 8001886:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8001888:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800188a:	3b01      	subs	r3, #1
 800188c:	b29b      	uxth	r3, r3
 800188e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8001890:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001892:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001894:	002e      	movs	r6, r5
 8001896:	e030      	b.n	80018fa <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	423a      	tst	r2, r7
 800189e:	d00f      	beq.n	80018c0 <HAL_SPI_TransmitReceive+0x19e>
 80018a0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80018a2:	2a00      	cmp	r2, #0
 80018a4:	d00c      	beq.n	80018c0 <HAL_SPI_TransmitReceive+0x19e>
 80018a6:	2d01      	cmp	r5, #1
 80018a8:	d109      	bne.n	80018be <HAL_SPI_TransmitReceive+0x19c>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80018aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80018ac:	7812      	ldrb	r2, [r2, #0]
 80018ae:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80018b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80018b2:	3301      	adds	r3, #1
 80018b4:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80018b6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80018be:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	6899      	ldr	r1, [r3, #8]
 80018c4:	000a      	movs	r2, r1
 80018c6:	4032      	ands	r2, r6
 80018c8:	4231      	tst	r1, r6
 80018ca:	d00d      	beq.n	80018e8 <HAL_SPI_TransmitReceive+0x1c6>
 80018cc:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80018ce:	2900      	cmp	r1, #0
 80018d0:	d00a      	beq.n	80018e8 <HAL_SPI_TransmitReceive+0x1c6>
        txallowed = 1U;
 80018d2:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80018d4:	68d9      	ldr	r1, [r3, #12]
 80018d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80018d8:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 80018da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80018dc:	3301      	adds	r3, #1
 80018de:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80018e0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80018e8:	f7ff f9a4 	bl	8000c34 <HAL_GetTick>
 80018ec:	9b01      	ldr	r3, [sp, #4]
 80018ee:	1ac0      	subs	r0, r0, r3
 80018f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80018f2:	4298      	cmp	r0, r3
 80018f4:	d301      	bcc.n	80018fa <HAL_SPI_TransmitReceive+0x1d8>
 80018f6:	3301      	adds	r3, #1
 80018f8:	d1b3      	bne.n	8001862 <HAL_SPI_TransmitReceive+0x140>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018fa:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1cb      	bne.n	8001898 <HAL_SPI_TransmitReceive+0x176>
 8001900:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1c8      	bne.n	8001898 <HAL_SPI_TransmitReceive+0x176>
 8001906:	e76e      	b.n	80017e6 <HAL_SPI_TransmitReceive+0xc4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001908:	68a2      	ldr	r2, [r4, #8]
 800190a:	2a00      	cmp	r2, #0
 800190c:	d106      	bne.n	800191c <HAL_SPI_TransmitReceive+0x1fa>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800190e:	9203      	str	r2, [sp, #12]
 8001910:	6822      	ldr	r2, [r4, #0]
 8001912:	68d1      	ldr	r1, [r2, #12]
 8001914:	9103      	str	r1, [sp, #12]
 8001916:	6892      	ldr	r2, [r2, #8]
 8001918:	9203      	str	r2, [sp, #12]
 800191a:	9a03      	ldr	r2, [sp, #12]
  hspi->State = HAL_SPI_STATE_READY;
 800191c:	0022      	movs	r2, r4
 800191e:	2101      	movs	r1, #1
 8001920:	3251      	adds	r2, #81	@ 0x51
 8001922:	7011      	strb	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001928:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800192a:	1e43      	subs	r3, r0, #1
 800192c:	4198      	sbcs	r0, r3
 800192e:	b2c0      	uxtb	r0, r0
 8001930:	e79f      	b.n	8001872 <HAL_SPI_TransmitReceive+0x150>
	...

08001934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001934:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001936:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800193a:	2201      	movs	r2, #1
 800193c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001940:	6801      	ldr	r1, [r0, #0]
 8001942:	4d12      	ldr	r5, [pc, #72]	@ (800198c <UART_EndRxTransfer+0x58>)
 8001944:	680b      	ldr	r3, [r1, #0]
 8001946:	402b      	ands	r3, r5
 8001948:	600b      	str	r3, [r1, #0]
 800194a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800194e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001952:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001956:	6801      	ldr	r1, [r0, #0]
 8001958:	688b      	ldr	r3, [r1, #8]
 800195a:	4393      	bics	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
 800195e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001962:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001964:	4293      	cmp	r3, r2
 8001966:	d10a      	bne.n	800197e <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001968:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800196c:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001970:	2410      	movs	r4, #16
 8001972:	6802      	ldr	r2, [r0, #0]
 8001974:	6813      	ldr	r3, [r2, #0]
 8001976:	43a3      	bics	r3, r4
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800197e:	2220      	movs	r2, #32
 8001980:	1d03      	adds	r3, r0, #4
 8001982:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001984:	2300      	movs	r3, #0
 8001986:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001988:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800198a:	bd30      	pop	{r4, r5, pc}
 800198c:	fffffedf 	.word	0xfffffedf

08001990 <UART_SetConfig>:
{
 8001990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001992:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001994:	6925      	ldr	r5, [r4, #16]
 8001996:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001998:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800199a:	4329      	orrs	r1, r5
 800199c:	6965      	ldr	r5, [r4, #20]
 800199e:	69c3      	ldr	r3, [r0, #28]
 80019a0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019a2:	6810      	ldr	r0, [r2, #0]
 80019a4:	4d5c      	ldr	r5, [pc, #368]	@ (8001b18 <UART_SetConfig+0x188>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019a6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019a8:	4028      	ands	r0, r5
 80019aa:	4301      	orrs	r1, r0
 80019ac:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019ae:	6851      	ldr	r1, [r2, #4]
 80019b0:	485a      	ldr	r0, [pc, #360]	@ (8001b1c <UART_SetConfig+0x18c>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80019b2:	4d5b      	ldr	r5, [pc, #364]	@ (8001b20 <UART_SetConfig+0x190>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019b4:	4001      	ands	r1, r0
 80019b6:	68e0      	ldr	r0, [r4, #12]
 80019b8:	4301      	orrs	r1, r0
 80019ba:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80019bc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80019be:	42aa      	cmp	r2, r5
 80019c0:	d001      	beq.n	80019c6 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80019c2:	6a21      	ldr	r1, [r4, #32]
 80019c4:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80019c6:	6891      	ldr	r1, [r2, #8]
 80019c8:	4e56      	ldr	r6, [pc, #344]	@ (8001b24 <UART_SetConfig+0x194>)
 80019ca:	4031      	ands	r1, r6
 80019cc:	4301      	orrs	r1, r0
 80019ce:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019d0:	4955      	ldr	r1, [pc, #340]	@ (8001b28 <UART_SetConfig+0x198>)
 80019d2:	428a      	cmp	r2, r1
 80019d4:	d118      	bne.n	8001a08 <UART_SetConfig+0x78>
 80019d6:	200c      	movs	r0, #12
 80019d8:	4954      	ldr	r1, [pc, #336]	@ (8001b2c <UART_SetConfig+0x19c>)
 80019da:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80019dc:	4002      	ands	r2, r0
 80019de:	2a08      	cmp	r2, #8
 80019e0:	d100      	bne.n	80019e4 <UART_SetConfig+0x54>
 80019e2:	e082      	b.n	8001aea <UART_SetConfig+0x15a>
 80019e4:	d80b      	bhi.n	80019fe <UART_SetConfig+0x6e>
 80019e6:	2180      	movs	r1, #128	@ 0x80
 80019e8:	0209      	lsls	r1, r1, #8
 80019ea:	2a00      	cmp	r2, #0
 80019ec:	d000      	beq.n	80019f0 <UART_SetConfig+0x60>
 80019ee:	e072      	b.n	8001ad6 <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019f0:	428b      	cmp	r3, r1
 80019f2:	d04a      	beq.n	8001a8a <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetPCLK1Freq();
 80019f4:	f7ff fd8c 	bl	8001510 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80019f8:	2800      	cmp	r0, #0
 80019fa:	d017      	beq.n	8001a2c <UART_SetConfig+0x9c>
 80019fc:	e083      	b.n	8001b06 <UART_SetConfig+0x176>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019fe:	2a0c      	cmp	r2, #12
 8001a00:	d100      	bne.n	8001a04 <UART_SetConfig+0x74>
 8001a02:	e06d      	b.n	8001ae0 <UART_SetConfig+0x150>
          pclk = (uint32_t) HSI_VALUE;
 8001a04:	2001      	movs	r0, #1
 8001a06:	e012      	b.n	8001a2e <UART_SetConfig+0x9e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a08:	42aa      	cmp	r2, r5
 8001a0a:	d1fb      	bne.n	8001a04 <UART_SetConfig+0x74>
 8001a0c:	21c0      	movs	r1, #192	@ 0xc0
 8001a0e:	2080      	movs	r0, #128	@ 0x80
 8001a10:	4a46      	ldr	r2, [pc, #280]	@ (8001b2c <UART_SetConfig+0x19c>)
 8001a12:	0109      	lsls	r1, r1, #4
 8001a14:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8001a16:	0100      	lsls	r0, r0, #4
 8001a18:	400b      	ands	r3, r1
 8001a1a:	4283      	cmp	r3, r0
 8001a1c:	d010      	beq.n	8001a40 <UART_SetConfig+0xb0>
 8001a1e:	d80a      	bhi.n	8001a36 <UART_SetConfig+0xa6>
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d12f      	bne.n	8001a84 <UART_SetConfig+0xf4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a24:	f7ff fd74 	bl	8001510 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	d110      	bne.n	8001a4e <UART_SetConfig+0xbe>
          pclk = (uint32_t) HSI_VALUE;
 8001a2c:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8001a32:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8001a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a36:	428b      	cmp	r3, r1
 8001a38:	d1e4      	bne.n	8001a04 <UART_SetConfig+0x74>
 8001a3a:	2080      	movs	r0, #128	@ 0x80
 8001a3c:	0200      	lsls	r0, r0, #8
 8001a3e:	e006      	b.n	8001a4e <UART_SetConfig+0xbe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a40:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 8001a42:	4b3b      	ldr	r3, [pc, #236]	@ (8001b30 <UART_SetConfig+0x1a0>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a44:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8001a46:	17c0      	asrs	r0, r0, #31
 8001a48:	4018      	ands	r0, r3
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b34 <UART_SetConfig+0x1a4>)
 8001a4c:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001a4e:	2303      	movs	r3, #3
 8001a50:	6862      	ldr	r2, [r4, #4]
 8001a52:	4353      	muls	r3, r2
 8001a54:	4283      	cmp	r3, r0
 8001a56:	d8d5      	bhi.n	8001a04 <UART_SetConfig+0x74>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001a58:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001a5a:	4283      	cmp	r3, r0
 8001a5c:	d3d2      	bcc.n	8001a04 <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001a5e:	2100      	movs	r1, #0
 8001a60:	0e07      	lsrs	r7, r0, #24
 8001a62:	0206      	lsls	r6, r0, #8
 8001a64:	0850      	lsrs	r0, r2, #1
 8001a66:	1836      	adds	r6, r6, r0
 8001a68:	414f      	adcs	r7, r1
 8001a6a:	000b      	movs	r3, r1
 8001a6c:	0030      	movs	r0, r6
 8001a6e:	0039      	movs	r1, r7
 8001a70:	f7fe fcc8 	bl	8000404 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001a74:	4b30      	ldr	r3, [pc, #192]	@ (8001b38 <UART_SetConfig+0x1a8>)
 8001a76:	18c2      	adds	r2, r0, r3
 8001a78:	4b30      	ldr	r3, [pc, #192]	@ (8001b3c <UART_SetConfig+0x1ac>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d8c2      	bhi.n	8001a04 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	60d8      	str	r0, [r3, #12]
 8001a82:	e7d3      	b.n	8001a2c <UART_SetConfig+0x9c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a84:	f7ff f9e6 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
        break;
 8001a88:	e7ce      	b.n	8001a28 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a8a:	f7ff fd41 	bl	8001510 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a8e:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8001a90:	d0cc      	beq.n	8001a2c <UART_SetConfig+0x9c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001a92:	6861      	ldr	r1, [r4, #4]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	0848      	lsrs	r0, r1, #1
 8001a98:	1818      	adds	r0, r3, r0
 8001a9a:	f7fe fb3d 	bl	8000118 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <UART_SetConfig+0x1b0>)
 8001aa2:	3a10      	subs	r2, #16
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d8ad      	bhi.n	8001a04 <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001aac:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001aae:	439a      	bics	r2, r3
 8001ab0:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ab2:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8001ab4:	6822      	ldr	r2, [r4, #0]
 8001ab6:	4303      	orrs	r3, r0
 8001ab8:	60d3      	str	r3, [r2, #12]
 8001aba:	e7b7      	b.n	8001a2c <UART_SetConfig+0x9c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001abc:	f7ff f9ca 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
 8001ac0:	e7e5      	b.n	8001a8e <UART_SetConfig+0xfe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ac2:	680b      	ldr	r3, [r1, #0]
 8001ac4:	4013      	ands	r3, r2
          pclk = (uint32_t) HSI_VALUE;
 8001ac6:	1e5a      	subs	r2, r3, #1
 8001ac8:	4193      	sbcs	r3, r2
 8001aca:	4a19      	ldr	r2, [pc, #100]	@ (8001b30 <UART_SetConfig+0x1a0>)
 8001acc:	425b      	negs	r3, r3
 8001ace:	4013      	ands	r3, r2
 8001ad0:	4a18      	ldr	r2, [pc, #96]	@ (8001b34 <UART_SetConfig+0x1a4>)
 8001ad2:	189b      	adds	r3, r3, r2
 8001ad4:	e7dd      	b.n	8001a92 <UART_SetConfig+0x102>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ad6:	428b      	cmp	r3, r1
 8001ad8:	d0f0      	beq.n	8001abc <UART_SetConfig+0x12c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001ada:	f7ff f9bb 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
        break;
 8001ade:	e78b      	b.n	80019f8 <UART_SetConfig+0x68>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae0:	2080      	movs	r0, #128	@ 0x80
 8001ae2:	0200      	lsls	r0, r0, #8
 8001ae4:	4283      	cmp	r3, r0
 8001ae6:	d0d4      	beq.n	8001a92 <UART_SetConfig+0x102>
 8001ae8:	e00d      	b.n	8001b06 <UART_SetConfig+0x176>
 8001aea:	2080      	movs	r0, #128	@ 0x80
 8001aec:	2210      	movs	r2, #16
 8001aee:	0200      	lsls	r0, r0, #8
 8001af0:	4283      	cmp	r3, r0
 8001af2:	d0e6      	beq.n	8001ac2 <UART_SetConfig+0x132>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001af4:	6808      	ldr	r0, [r1, #0]
 8001af6:	4010      	ands	r0, r2
          pclk = (uint32_t) HSI_VALUE;
 8001af8:	1e43      	subs	r3, r0, #1
 8001afa:	4198      	sbcs	r0, r3
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <UART_SetConfig+0x1a0>)
 8001afe:	4240      	negs	r0, r0
 8001b00:	4018      	ands	r0, r3
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <UART_SetConfig+0x1a4>)
 8001b04:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001b06:	6861      	ldr	r1, [r4, #4]
 8001b08:	084b      	lsrs	r3, r1, #1
 8001b0a:	1818      	adds	r0, r3, r0
 8001b0c:	f7fe fb04 	bl	8000118 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b10:	0002      	movs	r2, r0
 8001b12:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <UART_SetConfig+0x1b0>)
 8001b14:	3a10      	subs	r2, #16
 8001b16:	e7b0      	b.n	8001a7a <UART_SetConfig+0xea>
 8001b18:	efff69f3 	.word	0xefff69f3
 8001b1c:	ffffcfff 	.word	0xffffcfff
 8001b20:	40004800 	.word	0x40004800
 8001b24:	fffff4ff 	.word	0xfffff4ff
 8001b28:	40004400 	.word	0x40004400
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	ff48e500 	.word	0xff48e500
 8001b34:	00f42400 	.word	0x00f42400
 8001b38:	fffffd00 	.word	0xfffffd00
 8001b3c:	000ffcff 	.word	0x000ffcff
 8001b40:	0000ffef 	.word	0x0000ffef

08001b44 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b44:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8001b46:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b48:	071a      	lsls	r2, r3, #28
 8001b4a:	d506      	bpl.n	8001b5a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b4c:	6801      	ldr	r1, [r0, #0]
 8001b4e:	4c28      	ldr	r4, [pc, #160]	@ (8001bf0 <UART_AdvFeatureConfig+0xac>)
 8001b50:	684a      	ldr	r2, [r1, #4]
 8001b52:	4022      	ands	r2, r4
 8001b54:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8001b56:	4322      	orrs	r2, r4
 8001b58:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b5a:	07da      	lsls	r2, r3, #31
 8001b5c:	d506      	bpl.n	8001b6c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001b5e:	6801      	ldr	r1, [r0, #0]
 8001b60:	4c24      	ldr	r4, [pc, #144]	@ (8001bf4 <UART_AdvFeatureConfig+0xb0>)
 8001b62:	684a      	ldr	r2, [r1, #4]
 8001b64:	4022      	ands	r2, r4
 8001b66:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8001b68:	4322      	orrs	r2, r4
 8001b6a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001b6c:	079a      	lsls	r2, r3, #30
 8001b6e:	d506      	bpl.n	8001b7e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001b70:	6801      	ldr	r1, [r0, #0]
 8001b72:	4c21      	ldr	r4, [pc, #132]	@ (8001bf8 <UART_AdvFeatureConfig+0xb4>)
 8001b74:	684a      	ldr	r2, [r1, #4]
 8001b76:	4022      	ands	r2, r4
 8001b78:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b7e:	075a      	lsls	r2, r3, #29
 8001b80:	d506      	bpl.n	8001b90 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b82:	6801      	ldr	r1, [r0, #0]
 8001b84:	4c1d      	ldr	r4, [pc, #116]	@ (8001bfc <UART_AdvFeatureConfig+0xb8>)
 8001b86:	684a      	ldr	r2, [r1, #4]
 8001b88:	4022      	ands	r2, r4
 8001b8a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8001b8c:	4322      	orrs	r2, r4
 8001b8e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b90:	06da      	lsls	r2, r3, #27
 8001b92:	d506      	bpl.n	8001ba2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b94:	6801      	ldr	r1, [r0, #0]
 8001b96:	4c1a      	ldr	r4, [pc, #104]	@ (8001c00 <UART_AdvFeatureConfig+0xbc>)
 8001b98:	688a      	ldr	r2, [r1, #8]
 8001b9a:	4022      	ands	r2, r4
 8001b9c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8001b9e:	4322      	orrs	r2, r4
 8001ba0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ba2:	069a      	lsls	r2, r3, #26
 8001ba4:	d506      	bpl.n	8001bb4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ba6:	6801      	ldr	r1, [r0, #0]
 8001ba8:	4c16      	ldr	r4, [pc, #88]	@ (8001c04 <UART_AdvFeatureConfig+0xc0>)
 8001baa:	688a      	ldr	r2, [r1, #8]
 8001bac:	4022      	ands	r2, r4
 8001bae:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8001bb0:	4322      	orrs	r2, r4
 8001bb2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001bb4:	065a      	lsls	r2, r3, #25
 8001bb6:	d510      	bpl.n	8001bda <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001bb8:	6801      	ldr	r1, [r0, #0]
 8001bba:	4d13      	ldr	r5, [pc, #76]	@ (8001c08 <UART_AdvFeatureConfig+0xc4>)
 8001bbc:	684a      	ldr	r2, [r1, #4]
 8001bbe:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8001bc0:	402a      	ands	r2, r5
 8001bc2:	4322      	orrs	r2, r4
 8001bc4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001bc6:	2280      	movs	r2, #128	@ 0x80
 8001bc8:	0352      	lsls	r2, r2, #13
 8001bca:	4294      	cmp	r4, r2
 8001bcc:	d105      	bne.n	8001bda <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001bce:	684a      	ldr	r2, [r1, #4]
 8001bd0:	4c0e      	ldr	r4, [pc, #56]	@ (8001c0c <UART_AdvFeatureConfig+0xc8>)
 8001bd2:	4022      	ands	r2, r4
 8001bd4:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8001bd6:	4322      	orrs	r2, r4
 8001bd8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001bda:	061b      	lsls	r3, r3, #24
 8001bdc:	d506      	bpl.n	8001bec <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001bde:	6802      	ldr	r2, [r0, #0]
 8001be0:	490b      	ldr	r1, [pc, #44]	@ (8001c10 <UART_AdvFeatureConfig+0xcc>)
 8001be2:	6853      	ldr	r3, [r2, #4]
 8001be4:	400b      	ands	r3, r1
 8001be6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001be8:	430b      	orrs	r3, r1
 8001bea:	6053      	str	r3, [r2, #4]
}
 8001bec:	bd30      	pop	{r4, r5, pc}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	ffff7fff 	.word	0xffff7fff
 8001bf4:	fffdffff 	.word	0xfffdffff
 8001bf8:	fffeffff 	.word	0xfffeffff
 8001bfc:	fffbffff 	.word	0xfffbffff
 8001c00:	ffffefff 	.word	0xffffefff
 8001c04:	ffffdfff 	.word	0xffffdfff
 8001c08:	ffefffff 	.word	0xffefffff
 8001c0c:	ff9fffff 	.word	0xff9fffff
 8001c10:	fff7ffff 	.word	0xfff7ffff

08001c14 <UART_WaitOnFlagUntilTimeout>:
{
 8001c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c16:	0004      	movs	r4, r0
 8001c18:	000d      	movs	r5, r1
 8001c1a:	0017      	movs	r7, r2
 8001c1c:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c1e:	6822      	ldr	r2, [r4, #0]
 8001c20:	69d3      	ldr	r3, [r2, #28]
 8001c22:	402b      	ands	r3, r5
 8001c24:	1b5b      	subs	r3, r3, r5
 8001c26:	4259      	negs	r1, r3
 8001c28:	414b      	adcs	r3, r1
 8001c2a:	42bb      	cmp	r3, r7
 8001c2c:	d001      	beq.n	8001c32 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001c2e:	2000      	movs	r0, #0
 8001c30:	e025      	b.n	8001c7e <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001c32:	9b08      	ldr	r3, [sp, #32]
 8001c34:	3301      	adds	r3, #1
 8001c36:	d0f3      	beq.n	8001c20 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c38:	f7fe fffc 	bl	8000c34 <HAL_GetTick>
 8001c3c:	9b00      	ldr	r3, [sp, #0]
 8001c3e:	1ac0      	subs	r0, r0, r3
 8001c40:	9b08      	ldr	r3, [sp, #32]
 8001c42:	4298      	cmp	r0, r3
 8001c44:	d82c      	bhi.n	8001ca0 <UART_WaitOnFlagUntilTimeout+0x8c>
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d02a      	beq.n	8001ca0 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	0752      	lsls	r2, r2, #29
 8001c50:	d5e5      	bpl.n	8001c1e <UART_WaitOnFlagUntilTimeout+0xa>
 8001c52:	002a      	movs	r2, r5
 8001c54:	2140      	movs	r1, #64	@ 0x40
 8001c56:	3a40      	subs	r2, #64	@ 0x40
 8001c58:	438a      	bics	r2, r1
 8001c5a:	d0e0      	beq.n	8001c1e <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	2608      	movs	r6, #8
 8001c60:	0011      	movs	r1, r2
 8001c62:	4031      	ands	r1, r6
 8001c64:	9101      	str	r1, [sp, #4]
 8001c66:	4232      	tst	r2, r6
 8001c68:	d00a      	beq.n	8001c80 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 8001c6a:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001c6c:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8001c6e:	f7ff fe61 	bl	8001934 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c72:	19a3      	adds	r3, r4, r6
 8001c74:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8001c76:	2300      	movs	r3, #0
          return HAL_ERROR;
 8001c78:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8001c7a:	3478      	adds	r4, #120	@ 0x78
 8001c7c:	7023      	strb	r3, [r4, #0]
}
 8001c7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	69d9      	ldr	r1, [r3, #28]
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	4211      	tst	r1, r2
 8001c88:	d0c9      	beq.n	8001c1e <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c8a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8001c8c:	0020      	movs	r0, r4
 8001c8e:	f7ff fe51 	bl	8001934 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c92:	0023      	movs	r3, r4
 8001c94:	2220      	movs	r2, #32
 8001c96:	3308      	adds	r3, #8
 8001c98:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8001c9a:	9b01      	ldr	r3, [sp, #4]
 8001c9c:	3478      	adds	r4, #120	@ 0x78
 8001c9e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	e7ec      	b.n	8001c7e <UART_WaitOnFlagUntilTimeout+0x6a>

08001ca4 <HAL_UART_Transmit>:
{
 8001ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8001caa:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8001cac:	0004      	movs	r4, r0
 8001cae:	000d      	movs	r5, r1
 8001cb0:	0017      	movs	r7, r2
    return HAL_BUSY;
 8001cb2:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d138      	bne.n	8001d2a <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 8001cb8:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001cba:	2900      	cmp	r1, #0
 8001cbc:	d035      	beq.n	8001d2a <HAL_UART_Transmit+0x86>
 8001cbe:	2a00      	cmp	r2, #0
 8001cc0:	d033      	beq.n	8001d2a <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	68a2      	ldr	r2, [r4, #8]
 8001cc6:	015b      	lsls	r3, r3, #5
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d104      	bne.n	8001cd6 <HAL_UART_Transmit+0x32>
 8001ccc:	6923      	ldr	r3, [r4, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001cd2:	4201      	tst	r1, r0
 8001cd4:	d129      	bne.n	8001d2a <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd6:	0023      	movs	r3, r4
 8001cd8:	2600      	movs	r6, #0
 8001cda:	3308      	adds	r3, #8
 8001cdc:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cde:	2321      	movs	r3, #33	@ 0x21
 8001ce0:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8001ce2:	f7fe ffa7 	bl	8000c34 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001ce6:	0023      	movs	r3, r4
 8001ce8:	3350      	adds	r3, #80	@ 0x50
 8001cea:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8001cec:	3302      	adds	r3, #2
 8001cee:	9303      	str	r3, [sp, #12]
 8001cf0:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001cf6:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf8:	015b      	lsls	r3, r3, #5
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d104      	bne.n	8001d08 <HAL_UART_Transmit+0x64>
 8001cfe:	6923      	ldr	r3, [r4, #16]
 8001d00:	42b3      	cmp	r3, r6
 8001d02:	d101      	bne.n	8001d08 <HAL_UART_Transmit+0x64>
      pdata16bits = (const uint16_t *) pData;
 8001d04:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8001d06:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8001d08:	0023      	movs	r3, r4
 8001d0a:	3352      	adds	r3, #82	@ 0x52
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10c      	bne.n	8001d2e <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d14:	9b05      	ldr	r3, [sp, #20]
 8001d16:	2140      	movs	r1, #64	@ 0x40
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	0020      	movs	r0, r4
 8001d1c:	9b04      	ldr	r3, [sp, #16]
 8001d1e:	f7ff ff79 	bl	8001c14 <UART_WaitOnFlagUntilTimeout>
 8001d22:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8001d24:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d26:	2800      	cmp	r0, #0
 8001d28:	d10d      	bne.n	8001d46 <HAL_UART_Transmit+0xa2>
}
 8001d2a:	b007      	add	sp, #28
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d2e:	9b05      	ldr	r3, [sp, #20]
 8001d30:	2200      	movs	r2, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2180      	movs	r1, #128	@ 0x80
 8001d36:	0020      	movs	r0, r4
 8001d38:	9b04      	ldr	r3, [sp, #16]
 8001d3a:	f7ff ff6b 	bl	8001c14 <UART_WaitOnFlagUntilTimeout>
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8001d42:	2320      	movs	r3, #32
 8001d44:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8001d46:	2003      	movs	r0, #3
 8001d48:	e7ef      	b.n	8001d2a <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d4a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001d4c:	2d00      	cmp	r5, #0
 8001d4e:	d10b      	bne.n	8001d68 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d50:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001d52:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d54:	05db      	lsls	r3, r3, #23
 8001d56:	0ddb      	lsrs	r3, r3, #23
 8001d58:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8001d5a:	9b03      	ldr	r3, [sp, #12]
 8001d5c:	9a03      	ldr	r2, [sp, #12]
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	8013      	strh	r3, [r2, #0]
 8001d66:	e7cf      	b.n	8001d08 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d68:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8001d6a:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d6c:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 8001d6e:	e7f4      	b.n	8001d5a <HAL_UART_Transmit+0xb6>

08001d70 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d70:	0003      	movs	r3, r0
{
 8001d72:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d74:	2500      	movs	r5, #0
{
 8001d76:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d78:	3308      	adds	r3, #8
 8001d7a:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 8001d7c:	f7fe ff5a 	bl	8000c34 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d80:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001d82:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	071b      	lsls	r3, r3, #28
 8001d88:	d51d      	bpl.n	8001dc6 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d8a:	2180      	movs	r1, #128	@ 0x80
 8001d8c:	4b26      	ldr	r3, [pc, #152]	@ (8001e28 <UART_CheckIdleState+0xb8>)
 8001d8e:	002a      	movs	r2, r5
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	0389      	lsls	r1, r1, #14
 8001d94:	0003      	movs	r3, r0
 8001d96:	0020      	movs	r0, r4
 8001d98:	f7ff ff3c 	bl	8001c14 <UART_WaitOnFlagUntilTimeout>
 8001d9c:	42a8      	cmp	r0, r5
 8001d9e:	d012      	beq.n	8001dc6 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001da0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da4:	2301      	movs	r3, #1
 8001da6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001daa:	2080      	movs	r0, #128	@ 0x80
 8001dac:	6822      	ldr	r2, [r4, #0]
 8001dae:	6813      	ldr	r3, [r2, #0]
 8001db0:	4383      	bics	r3, r0
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8001db8:	2320      	movs	r3, #32
 8001dba:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8001dbc:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	3478      	adds	r4, #120	@ 0x78
 8001dc2:	7023      	strb	r3, [r4, #0]
}
 8001dc4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001dc6:	0025      	movs	r5, r4
 8001dc8:	cd08      	ldmia	r5!, {r3}
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	075b      	lsls	r3, r3, #29
 8001dce:	d523      	bpl.n	8001e18 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001dd0:	2180      	movs	r1, #128	@ 0x80
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <UART_CheckIdleState+0xb8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	0020      	movs	r0, r4
 8001dda:	0033      	movs	r3, r6
 8001ddc:	03c9      	lsls	r1, r1, #15
 8001dde:	f7ff ff19 	bl	8001c14 <UART_WaitOnFlagUntilTimeout>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d018      	beq.n	8001e18 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001de6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dea:	2201      	movs	r2, #1
 8001dec:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001df0:	6821      	ldr	r1, [r4, #0]
 8001df2:	4e0e      	ldr	r6, [pc, #56]	@ (8001e2c <UART_CheckIdleState+0xbc>)
 8001df4:	680b      	ldr	r3, [r1, #0]
 8001df6:	4033      	ands	r3, r6
 8001df8:	600b      	str	r3, [r1, #0]
 8001dfa:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dfe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e02:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e06:	6821      	ldr	r1, [r4, #0]
 8001e08:	688b      	ldr	r3, [r1, #8]
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
 8001e0e:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001e12:	2320      	movs	r3, #32
 8001e14:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8001e16:	e7d1      	b.n	8001dbc <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8001e18:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e1a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001e1c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001e1e:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e20:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e22:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8001e24:	e7cb      	b.n	8001dbe <UART_CheckIdleState+0x4e>
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	01ffffff 	.word	0x01ffffff
 8001e2c:	fffffedf 	.word	0xfffffedf

08001e30 <HAL_UART_Init>:
{
 8001e30:	b510      	push	{r4, lr}
 8001e32:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001e34:	d101      	bne.n	8001e3a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001e36:	2001      	movs	r0, #1
}
 8001e38:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e3a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d104      	bne.n	8001e4a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001e40:	0002      	movs	r2, r0
 8001e42:	3278      	adds	r2, #120	@ 0x78
 8001e44:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001e46:	f7fe fe35 	bl	8000ab4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e4a:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e50:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8001e52:	6813      	ldr	r3, [r2, #0]
 8001e54:	438b      	bics	r3, r1
 8001e56:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001e5e:	0020      	movs	r0, r4
 8001e60:	f7ff fe70 	bl	8001b44 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e64:	0020      	movs	r0, r4
 8001e66:	f7ff fd93 	bl	8001990 <UART_SetConfig>
 8001e6a:	2801      	cmp	r0, #1
 8001e6c:	d0e3      	beq.n	8001e36 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	4907      	ldr	r1, [pc, #28]	@ (8001e90 <HAL_UART_Init+0x60>)
 8001e72:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001e74:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e76:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e78:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	438a      	bics	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001e82:	2201      	movs	r2, #1
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001e8a:	f7ff ff71 	bl	8001d70 <UART_CheckIdleState>
 8001e8e:	e7d3      	b.n	8001e38 <HAL_UART_Init+0x8>
 8001e90:	ffffb7ff 	.word	0xffffb7ff

08001e94 <memset>:
 8001e94:	0003      	movs	r3, r0
 8001e96:	1882      	adds	r2, r0, r2
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <memset+0xa>
 8001e9c:	4770      	bx	lr
 8001e9e:	7019      	strb	r1, [r3, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	e7f9      	b.n	8001e98 <memset+0x4>

08001ea4 <__libc_init_array>:
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	2600      	movs	r6, #0
 8001ea8:	4c0c      	ldr	r4, [pc, #48]	@ (8001edc <__libc_init_array+0x38>)
 8001eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8001ee0 <__libc_init_array+0x3c>)
 8001eac:	1b64      	subs	r4, r4, r5
 8001eae:	10a4      	asrs	r4, r4, #2
 8001eb0:	42a6      	cmp	r6, r4
 8001eb2:	d109      	bne.n	8001ec8 <__libc_init_array+0x24>
 8001eb4:	2600      	movs	r6, #0
 8001eb6:	f000 f823 	bl	8001f00 <_init>
 8001eba:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee4 <__libc_init_array+0x40>)
 8001ebc:	4d0a      	ldr	r5, [pc, #40]	@ (8001ee8 <__libc_init_array+0x44>)
 8001ebe:	1b64      	subs	r4, r4, r5
 8001ec0:	10a4      	asrs	r4, r4, #2
 8001ec2:	42a6      	cmp	r6, r4
 8001ec4:	d105      	bne.n	8001ed2 <__libc_init_array+0x2e>
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
 8001ec8:	00b3      	lsls	r3, r6, #2
 8001eca:	58eb      	ldr	r3, [r5, r3]
 8001ecc:	4798      	blx	r3
 8001ece:	3601      	adds	r6, #1
 8001ed0:	e7ee      	b.n	8001eb0 <__libc_init_array+0xc>
 8001ed2:	00b3      	lsls	r3, r6, #2
 8001ed4:	58eb      	ldr	r3, [r5, r3]
 8001ed6:	4798      	blx	r3
 8001ed8:	3601      	adds	r6, #1
 8001eda:	e7f2      	b.n	8001ec2 <__libc_init_array+0x1e>
 8001edc:	080020f0 	.word	0x080020f0
 8001ee0:	080020f0 	.word	0x080020f0
 8001ee4:	080020f4 	.word	0x080020f4
 8001ee8:	080020f0 	.word	0x080020f0

08001eec <memcpy>:
 8001eec:	2300      	movs	r3, #0
 8001eee:	b510      	push	{r4, lr}
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d100      	bne.n	8001ef6 <memcpy+0xa>
 8001ef4:	bd10      	pop	{r4, pc}
 8001ef6:	5ccc      	ldrb	r4, [r1, r3]
 8001ef8:	54c4      	strb	r4, [r0, r3]
 8001efa:	3301      	adds	r3, #1
 8001efc:	e7f8      	b.n	8001ef0 <memcpy+0x4>
	...

08001f00 <_init>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f06:	bc08      	pop	{r3}
 8001f08:	469e      	mov	lr, r3
 8001f0a:	4770      	bx	lr

08001f0c <_fini>:
 8001f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f12:	bc08      	pop	{r3}
 8001f14:	469e      	mov	lr, r3
 8001f16:	4770      	bx	lr
