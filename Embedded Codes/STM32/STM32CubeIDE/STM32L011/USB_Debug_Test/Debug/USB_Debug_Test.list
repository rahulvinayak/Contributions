
USB_Debug_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000169c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800175c  0800175c  0000275c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800178c  0800178c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800178c  0800178c  0000278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001794  08001794  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001794  08001794  00002794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001798  08001798  00002798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800179c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080017a8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080017a8  000030b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000924d  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a2  00000000  00000000  0000c281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  0000d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e9  00000000  00000000  0000ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010882  00000000  00000000  0000e4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abe7  00000000  00000000  0001ed43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064cb8  00000000  00000000  0002992a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008e5e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e30  00000000  00000000  0008e628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00003060  00000000  00000000  0008f458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000924b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001744 	.word	0x08001744

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001744 	.word	0x08001744

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000460:	2220      	movs	r2, #32
 8000462:	2100      	movs	r1, #0
 8000464:	a80c      	add	r0, sp, #48	@ 0x30
 8000466:	f001 f937 	bl	80016d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046a:	2214      	movs	r2, #20
 800046c:	2100      	movs	r1, #0
 800046e:	4668      	mov	r0, sp
 8000470:	f001 f932 	bl	80016d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000474:	2218      	movs	r2, #24
 8000476:	2100      	movs	r1, #0
 8000478:	a805      	add	r0, sp, #20
 800047a:	f001 f92d 	bl	80016d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800047e:	4916      	ldr	r1, [pc, #88]	@ (80004d8 <SystemClock_Config+0x7c>)
 8000480:	4b16      	ldr	r3, [pc, #88]	@ (80004dc <SystemClock_Config+0x80>)
 8000482:	680a      	ldr	r2, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000484:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000486:	401a      	ands	r2, r3
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	011b      	lsls	r3, r3, #4
 800048c:	4313      	orrs	r3, r2
 800048e:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000490:	2310      	movs	r3, #16
 8000492:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000494:	2380      	movs	r3, #128	@ 0x80
 8000496:	02db      	lsls	r3, r3, #11
 8000498:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800049a:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049c:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049e:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80004a0:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80004a4:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a6:	950b      	str	r5, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a8:	960e      	str	r6, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	9514      	str	r5, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ac:	9415      	str	r4, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ae:	f000 fa79 	bl	80009a4 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b4:	0031      	movs	r1, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ba:	3b0c      	subs	r3, #12
 80004bc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004be:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c2:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004c4:	f000 fcbc 	bl	8000e40 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c8:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004ca:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004cc:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ce:	f000 fd95 	bl	8000ffc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80004d2:	b018      	add	sp, #96	@ 0x60
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	40007000 	.word	0x40007000
 80004dc:	ffffe7ff 	.word	0xffffe7ff

080004e0 <main>:
{
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	b086      	sub	sp, #24
  HAL_Init();
 80004e4:	f000 f8f2 	bl	80006cc <HAL_Init>
  SystemClock_Config();
 80004e8:	f7ff ffb8 	bl	800045c <SystemClock_Config>
{
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ec:	2104      	movs	r1, #4
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <main+0x80>)
  huart2.Instance = USART2;
 80004f0:	4c1c      	ldr	r4, [pc, #112]	@ (8000564 <main+0x84>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f4:	0020      	movs	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	430a      	orrs	r2, r1
 80004f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80004fc:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	400a      	ands	r2, r1
 8000500:	9200      	str	r2, [sp, #0]
 8000502:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000506:	3903      	subs	r1, #3
 8000508:	430a      	orrs	r2, r1
 800050a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800050c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  huart2.Init.Mode = UART_MODE_TX_RX;
 800050e:	220c      	movs	r2, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	400b      	ands	r3, r1
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b01      	ldr	r3, [sp, #4]
  huart2.Instance = USART2;
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <main+0x88>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000518:	6162      	str	r2, [r4, #20]
  huart2.Instance = USART2;
 800051a:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 115200;
 800051c:	23e1      	movs	r3, #225	@ 0xe1
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	2300      	movs	r3, #0
    HAL_Delay(1000);
 8000524:	25fa      	movs	r5, #250	@ 0xfa
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000528:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052a:	6123      	str	r3, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052c:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800052e:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000530:	6223      	str	r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000532:	6263      	str	r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000534:	f001 f89e 	bl	8001674 <HAL_UART_Init>
  char message[] = "Hello World\r\n";
 8000538:	220e      	movs	r2, #14
 800053a:	490c      	ldr	r1, [pc, #48]	@ (800056c <main+0x8c>)
 800053c:	a802      	add	r0, sp, #8
 800053e:	f001 f8f7 	bl	8001730 <memcpy>
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000542:	4276      	negs	r6, r6
    HAL_Delay(1000);
 8000544:	00ad      	lsls	r5, r5, #2
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000546:	a802      	add	r0, sp, #8
 8000548:	f7ff fdde 	bl	8000108 <strlen>
 800054c:	0033      	movs	r3, r6
 800054e:	b282      	uxth	r2, r0
 8000550:	a902      	add	r1, sp, #8
 8000552:	0020      	movs	r0, r4
 8000554:	f000 ffc8 	bl	80014e8 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000558:	0028      	movs	r0, r5
 800055a:	f000 f8dd 	bl	8000718 <HAL_Delay>
  while (1)
 800055e:	e7f2      	b.n	8000546 <main+0x66>
 8000560:	40021000 	.word	0x40021000
 8000564:	20000028 	.word	0x20000028
 8000568:	40004400 	.word	0x40004400
 800056c:	0800175c 	.word	0x0800175c

08000570 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000570:	2201      	movs	r2, #1
 8000572:	4b05      	ldr	r3, [pc, #20]	@ (8000588 <HAL_MspInit+0x18>)
 8000574:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800057e:	0552      	lsls	r2, r2, #21
 8000580:	430a      	orrs	r2, r1
 8000582:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000584:	4770      	bx	lr
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800058c:	b510      	push	{r4, lr}
 800058e:	0004      	movs	r4, r0
 8000590:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	2214      	movs	r2, #20
 8000594:	2100      	movs	r1, #0
 8000596:	a801      	add	r0, sp, #4
 8000598:	f001 f89e 	bl	80016d8 <memset>
  if(huart->Instance==USART2)
 800059c:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <HAL_UART_MspInit+0x54>)
 800059e:	6822      	ldr	r2, [r4, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d11a      	bne.n	80005da <HAL_UART_MspInit+0x4e>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <HAL_UART_MspInit+0x58>)
 80005a8:	0292      	lsls	r2, r2, #10
 80005aa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ae:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 80005b2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	430a      	orrs	r2, r1
 80005ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005be:	400b      	ands	r3, r1
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <HAL_UART_MspInit+0x5c>)
 80005c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	2302      	movs	r3, #2
 80005ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005cc:	185b      	adds	r3, r3, r1
 80005ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80005d0:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80005d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f000 f8f5 	bl	80007c4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80005da:	b006      	add	sp, #24
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	40004400 	.word	0x40004400
 80005e4:	40021000 	.word	0x40021000
 80005e8:	00008004 	.word	0x00008004

080005ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005ec:	e7fe      	b.n	80005ec <NMI_Handler>

080005ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler>

080005f0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005f0:	4770      	bx	lr

080005f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80005f2:	4770      	bx	lr

080005f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f6:	f000 f87d 	bl	80006f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fa:	bd10      	pop	{r4, pc}

080005fc <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005fc:	4770      	bx	lr
	...

08000600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000600:	4813      	ldr	r0, [pc, #76]	@ (8000650 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000602:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000604:	f7ff fffa 	bl	80005fc <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000608:	4812      	ldr	r0, [pc, #72]	@ (8000654 <LoopForever+0x6>)
    LDR R1, [R0]
 800060a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800060c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800060e:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <LoopForever+0xa>)
    CMP R1, R2
 8000610:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000612:	d105      	bne.n	8000620 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000614:	4811      	ldr	r0, [pc, #68]	@ (800065c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000616:	4912      	ldr	r1, [pc, #72]	@ (8000660 <LoopForever+0x12>)
    STR R1, [R0]
 8000618:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800061a:	4812      	ldr	r0, [pc, #72]	@ (8000664 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800061c:	4912      	ldr	r1, [pc, #72]	@ (8000668 <LoopForever+0x1a>)
    STR R1, [R0]
 800061e:	6001      	str	r1, [r0, #0]

08000620 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	4812      	ldr	r0, [pc, #72]	@ (800066c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000622:	4913      	ldr	r1, [pc, #76]	@ (8000670 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000624:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <LoopForever+0x26>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a10      	ldr	r2, [pc, #64]	@ (8000678 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000638:	4c10      	ldr	r4, [pc, #64]	@ (800067c <LoopForever+0x2e>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000646:	f001 f84f 	bl	80016e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800064a:	f7ff ff49 	bl	80004e0 <main>

0800064e <LoopForever>:

LoopForever:
    b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
   ldr   r0, =_estack
 8000650:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000654:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000658:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800065c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000660:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000664:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000668:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000674:	0800179c 	.word	0x0800179c
  ldr r2, =_sbss
 8000678:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800067c:	200000b4 	.word	0x200000b4

08000680 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_COMP_IRQHandler>
	...

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	20fa      	movs	r0, #250	@ 0xfa
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <HAL_InitTick+0x3c>)
 800068c:	0080      	lsls	r0, r0, #2
 800068e:	7819      	ldrb	r1, [r3, #0]
 8000690:	f7ff fd42 	bl	8000118 <__udivsi3>
 8000694:	4c0b      	ldr	r4, [pc, #44]	@ (80006c4 <HAL_InitTick+0x40>)
 8000696:	0001      	movs	r1, r0
 8000698:	6820      	ldr	r0, [r4, #0]
 800069a:	f7ff fd3d 	bl	8000118 <__udivsi3>
 800069e:	f000 f877 	bl	8000790 <HAL_SYSTICK_Config>
 80006a2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80006a4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a6:	2c00      	cmp	r4, #0
 80006a8:	d109      	bne.n	80006be <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006aa:	2d03      	cmp	r5, #3
 80006ac:	d807      	bhi.n	80006be <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ae:	3802      	subs	r0, #2
 80006b0:	0022      	movs	r2, r4
 80006b2:	0029      	movs	r1, r5
 80006b4:	f000 f842 	bl	800073c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b8:	0020      	movs	r0, r4
 80006ba:	4b03      	ldr	r3, [pc, #12]	@ (80006c8 <HAL_InitTick+0x44>)
 80006bc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	20000004 	.word	0x20000004
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000008 	.word	0x20000008

080006cc <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006cc:	2340      	movs	r3, #64	@ 0x40
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <HAL_Init+0x24>)
{
 80006d0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006d2:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d4:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006d6:	430b      	orrs	r3, r1
 80006d8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006da:	f7ff ffd3 	bl	8000684 <HAL_InitTick>
 80006de:	1e04      	subs	r4, r0, #0
 80006e0:	d103      	bne.n	80006ea <HAL_Init+0x1e>
    HAL_MspInit();
 80006e2:	f7ff ff45 	bl	8000570 <HAL_MspInit>
}
 80006e6:	0020      	movs	r0, r4
 80006e8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80006ea:	2401      	movs	r4, #1
 80006ec:	e7fb      	b.n	80006e6 <HAL_Init+0x1a>
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006f4:	4a03      	ldr	r2, [pc, #12]	@ (8000704 <HAL_IncTick+0x10>)
 80006f6:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <HAL_IncTick+0x14>)
 80006f8:	6811      	ldr	r1, [r2, #0]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	185b      	adds	r3, r3, r1
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	4770      	bx	lr
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	200000b0 	.word	0x200000b0
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800070c:	4b01      	ldr	r3, [pc, #4]	@ (8000714 <HAL_GetTick+0x8>)
 800070e:	6818      	ldr	r0, [r3, #0]
}
 8000710:	4770      	bx	lr
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	200000b0 	.word	0x200000b0

08000718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800071c:	f7ff fff6 	bl	800070c <HAL_GetTick>
 8000720:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000722:	1c63      	adds	r3, r4, #1
 8000724:	d002      	beq.n	800072c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000726:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <HAL_Delay+0x20>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800072c:	f7ff ffee 	bl	800070c <HAL_GetTick>
 8000730:	1b40      	subs	r0, r0, r5
 8000732:	42a0      	cmp	r0, r4
 8000734:	d3fa      	bcc.n	800072c <HAL_Delay+0x14>
  {
  }
}
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	20000004 	.word	0x20000004

0800073c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800073c:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073e:	24ff      	movs	r4, #255	@ 0xff
 8000740:	2203      	movs	r2, #3
 8000742:	000b      	movs	r3, r1
 8000744:	0021      	movs	r1, r4
 8000746:	4002      	ands	r2, r0
 8000748:	00d2      	lsls	r2, r2, #3
 800074a:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800074c:	019b      	lsls	r3, r3, #6
 800074e:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000750:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000752:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000754:	2800      	cmp	r0, #0
 8000756:	db0a      	blt.n	800076e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000758:	24c0      	movs	r4, #192	@ 0xc0
 800075a:	4a0b      	ldr	r2, [pc, #44]	@ (8000788 <HAL_NVIC_SetPriority+0x4c>)
 800075c:	0880      	lsrs	r0, r0, #2
 800075e:	0080      	lsls	r0, r0, #2
 8000760:	1880      	adds	r0, r0, r2
 8000762:	00a4      	lsls	r4, r4, #2
 8000764:	5902      	ldr	r2, [r0, r4]
 8000766:	400a      	ands	r2, r1
 8000768:	4313      	orrs	r3, r2
 800076a:	5103      	str	r3, [r0, r4]
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800076c:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076e:	220f      	movs	r2, #15
 8000770:	4010      	ands	r0, r2
 8000772:	3808      	subs	r0, #8
 8000774:	4a05      	ldr	r2, [pc, #20]	@ (800078c <HAL_NVIC_SetPriority+0x50>)
 8000776:	0880      	lsrs	r0, r0, #2
 8000778:	0080      	lsls	r0, r0, #2
 800077a:	1880      	adds	r0, r0, r2
 800077c:	69c2      	ldr	r2, [r0, #28]
 800077e:	4011      	ands	r1, r2
 8000780:	4319      	orrs	r1, r3
 8000782:	61c1      	str	r1, [r0, #28]
 8000784:	e7f2      	b.n	800076c <HAL_NVIC_SetPriority+0x30>
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	2280      	movs	r2, #128	@ 0x80
 8000792:	1e43      	subs	r3, r0, #1
 8000794:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	4293      	cmp	r3, r2
 800079a:	d20d      	bcs.n	80007b8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a07      	ldr	r2, [pc, #28]	@ (80007bc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a0:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a4:	6a03      	ldr	r3, [r0, #32]
 80007a6:	0609      	lsls	r1, r1, #24
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	430b      	orrs	r3, r1
 80007ae:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007b8:	4770      	bx	lr
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	e000e010 	.word	0xe000e010
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 80007c4:	2300      	movs	r3, #0
{
 80007c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c8:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80007ca:	680a      	ldr	r2, [r1, #0]
 80007cc:	0014      	movs	r4, r2
 80007ce:	40dc      	lsrs	r4, r3
 80007d0:	d101      	bne.n	80007d6 <HAL_GPIO_Init+0x12>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 80007d2:	b005      	add	sp, #20
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007d6:	2501      	movs	r5, #1
 80007d8:	0014      	movs	r4, r2
 80007da:	409d      	lsls	r5, r3
 80007dc:	402c      	ands	r4, r5
 80007de:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 80007e0:	422a      	tst	r2, r5
 80007e2:	d100      	bne.n	80007e6 <HAL_GPIO_Init+0x22>
 80007e4:	e090      	b.n	8000908 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007e6:	684a      	ldr	r2, [r1, #4]
 80007e8:	005f      	lsls	r7, r3, #1
 80007ea:	4694      	mov	ip, r2
 80007ec:	2203      	movs	r2, #3
 80007ee:	4664      	mov	r4, ip
 80007f0:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80007f2:	2403      	movs	r4, #3
 80007f4:	40bc      	lsls	r4, r7
 80007f6:	43e4      	mvns	r4, r4
 80007f8:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007fa:	1e54      	subs	r4, r2, #1
 80007fc:	2c01      	cmp	r4, #1
 80007fe:	d82e      	bhi.n	800085e <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000800:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000802:	9c01      	ldr	r4, [sp, #4]
 8000804:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000806:	68cc      	ldr	r4, [r1, #12]
 8000808:	40bc      	lsls	r4, r7
 800080a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800080c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800080e:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000810:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000812:	43ac      	bics	r4, r5
 8000814:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000816:	4664      	mov	r4, ip
 8000818:	0924      	lsrs	r4, r4, #4
 800081a:	4034      	ands	r4, r6
 800081c:	409c      	lsls	r4, r3
 800081e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000820:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000822:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000824:	9c01      	ldr	r4, [sp, #4]
 8000826:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000828:	688c      	ldr	r4, [r1, #8]
 800082a:	40bc      	lsls	r4, r7
 800082c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800082e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000830:	2a02      	cmp	r2, #2
 8000832:	d116      	bne.n	8000862 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000834:	2507      	movs	r5, #7
 8000836:	260f      	movs	r6, #15
 8000838:	401d      	ands	r5, r3
 800083a:	00ad      	lsls	r5, r5, #2
 800083c:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 800083e:	08dc      	lsrs	r4, r3, #3
 8000840:	00a4      	lsls	r4, r4, #2
 8000842:	1904      	adds	r4, r0, r4
 8000844:	9402      	str	r4, [sp, #8]
 8000846:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000848:	9603      	str	r6, [sp, #12]
 800084a:	0026      	movs	r6, r4
 800084c:	9c03      	ldr	r4, [sp, #12]
 800084e:	43a6      	bics	r6, r4
 8000850:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000852:	690e      	ldr	r6, [r1, #16]
 8000854:	40ae      	lsls	r6, r5
 8000856:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8000858:	9c02      	ldr	r4, [sp, #8]
 800085a:	6226      	str	r6, [r4, #32]
 800085c:	e001      	b.n	8000862 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800085e:	2a03      	cmp	r2, #3
 8000860:	d1df      	bne.n	8000822 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000862:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000864:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000866:	9d01      	ldr	r5, [sp, #4]
 8000868:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800086a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800086c:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 800086e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000870:	4662      	mov	r2, ip
 8000872:	02a4      	lsls	r4, r4, #10
 8000874:	4222      	tst	r2, r4
 8000876:	d047      	beq.n	8000908 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000878:	2501      	movs	r5, #1
 800087a:	4c24      	ldr	r4, [pc, #144]	@ (800090c <HAL_GPIO_Init+0x148>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800087c:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000880:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	432a      	orrs	r2, r5
 8000884:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000886:	4a22      	ldr	r2, [pc, #136]	@ (8000910 <HAL_GPIO_Init+0x14c>)
 8000888:	089c      	lsrs	r4, r3, #2
 800088a:	00a4      	lsls	r4, r4, #2
 800088c:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800088e:	220f      	movs	r2, #15
 8000890:	3502      	adds	r5, #2
 8000892:	401d      	ands	r5, r3
 8000894:	00ad      	lsls	r5, r5, #2
 8000896:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8000898:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800089a:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800089c:	2200      	movs	r2, #0
 800089e:	42b8      	cmp	r0, r7
 80008a0:	d008      	beq.n	80008b4 <HAL_GPIO_Init+0xf0>
 80008a2:	4f1c      	ldr	r7, [pc, #112]	@ (8000914 <HAL_GPIO_Init+0x150>)
 80008a4:	3201      	adds	r2, #1
 80008a6:	42b8      	cmp	r0, r7
 80008a8:	d004      	beq.n	80008b4 <HAL_GPIO_Init+0xf0>
 80008aa:	4f1b      	ldr	r7, [pc, #108]	@ (8000918 <HAL_GPIO_Init+0x154>)
 80008ac:	3205      	adds	r2, #5
 80008ae:	42b8      	cmp	r0, r7
 80008b0:	d100      	bne.n	80008b4 <HAL_GPIO_Init+0xf0>
 80008b2:	3a04      	subs	r2, #4
 80008b4:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80008b6:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80008b8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008ba:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80008bc:	4a17      	ldr	r2, [pc, #92]	@ (800091c <HAL_GPIO_Init+0x158>)
        temp &= ~((uint32_t)iocurrent);
 80008be:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 80008c0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80008c2:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80008c4:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80008c6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80008c8:	02ff      	lsls	r7, r7, #11
 80008ca:	d401      	bmi.n	80008d0 <HAL_GPIO_Init+0x10c>
        temp &= ~((uint32_t)iocurrent);
 80008cc:	0035      	movs	r5, r6
 80008ce:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80008d0:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80008d2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80008d4:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80008d6:	9d00      	ldr	r5, [sp, #0]
 80008d8:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80008da:	02bf      	lsls	r7, r7, #10
 80008dc:	d401      	bmi.n	80008e2 <HAL_GPIO_Init+0x11e>
        temp &= ~((uint32_t)iocurrent);
 80008de:	0035      	movs	r5, r6
 80008e0:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80008e2:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80008e4:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80008e6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80008e8:	9d00      	ldr	r5, [sp, #0]
 80008ea:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80008ec:	03bf      	lsls	r7, r7, #14
 80008ee:	d401      	bmi.n	80008f4 <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 80008f0:	0035      	movs	r5, r6
 80008f2:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80008f4:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80008f6:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80008f8:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80008fa:	9e00      	ldr	r6, [sp, #0]
 80008fc:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80008fe:	03ff      	lsls	r7, r7, #15
 8000900:	d401      	bmi.n	8000906 <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 8000902:	4025      	ands	r5, r4
 8000904:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000906:	6016      	str	r6, [r2, #0]
    position++;
 8000908:	3301      	adds	r3, #1
 800090a:	e75e      	b.n	80007ca <HAL_GPIO_Init+0x6>
 800090c:	40021000 	.word	0x40021000
 8000910:	40010000 	.word	0x40010000
 8000914:	50000400 	.word	0x50000400
 8000918:	50000800 	.word	0x50000800
 800091c:	40010400 	.word	0x40010400

08000920 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000920:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8000924:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000926:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000928:	400a      	ands	r2, r1
 800092a:	2a08      	cmp	r2, #8
 800092c:	d02c      	beq.n	8000988 <HAL_RCC_GetSysClockFreq+0x68>
 800092e:	2a0c      	cmp	r2, #12
 8000930:	d00c      	beq.n	800094c <HAL_RCC_GetSysClockFreq+0x2c>
 8000932:	2a04      	cmp	r2, #4
 8000934:	d120      	bne.n	8000978 <HAL_RCC_GetSysClockFreq+0x58>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	2310      	movs	r3, #16
 800093a:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800093c:	4243      	negs	r3, r0
 800093e:	4158      	adcs	r0, r3
 8000940:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <HAL_RCC_GetSysClockFreq+0x70>)
 8000942:	4240      	negs	r0, r0
 8000944:	4018      	ands	r0, r3
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <HAL_RCC_GetSysClockFreq+0x74>)
 8000948:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800094a:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800094c:	4812      	ldr	r0, [pc, #72]	@ (8000998 <HAL_RCC_GetSysClockFreq+0x78>)
 800094e:	028a      	lsls	r2, r1, #10
 8000950:	0f12      	lsrs	r2, r2, #28
 8000952:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000954:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000956:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000958:	0f89      	lsrs	r1, r1, #30
 800095a:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800095c:	03c0      	lsls	r0, r0, #15
 800095e:	d504      	bpl.n	800096a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8000960:	480e      	ldr	r0, [pc, #56]	@ (800099c <HAL_RCC_GetSysClockFreq+0x7c>)
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8000962:	4350      	muls	r0, r2
 8000964:	f7ff fbd8 	bl	8000118 <__udivsi3>
 8000968:	e7ef      	b.n	800094a <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	06db      	lsls	r3, r3, #27
 800096e:	d501      	bpl.n	8000974 <HAL_RCC_GetSysClockFreq+0x54>
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8000970:	4808      	ldr	r0, [pc, #32]	@ (8000994 <HAL_RCC_GetSysClockFreq+0x74>)
 8000972:	e7f6      	b.n	8000962 <HAL_RCC_GetSysClockFreq+0x42>
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8000974:	480a      	ldr	r0, [pc, #40]	@ (80009a0 <HAL_RCC_GetSysClockFreq+0x80>)
 8000976:	e7f4      	b.n	8000962 <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000978:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800097a:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800097c:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800097e:	041b      	lsls	r3, r3, #16
 8000980:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000982:	3301      	adds	r3, #1
 8000984:	4098      	lsls	r0, r3
      break;
 8000986:	e7e0      	b.n	800094a <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <HAL_RCC_GetSysClockFreq+0x7c>)
 800098a:	e7de      	b.n	800094a <HAL_RCC_GetSysClockFreq+0x2a>
 800098c:	40021000 	.word	0x40021000
 8000990:	00b71b00 	.word	0x00b71b00
 8000994:	003d0900 	.word	0x003d0900
 8000998:	0800176a 	.word	0x0800176a
 800099c:	007a1200 	.word	0x007a1200
 80009a0:	00f42400 	.word	0x00f42400

080009a4 <HAL_RCC_OscConfig>:
{
 80009a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a6:	0005      	movs	r5, r0
 80009a8:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 80009aa:	2800      	cmp	r0, #0
 80009ac:	d055      	beq.n	8000a5a <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009ae:	230c      	movs	r3, #12
 80009b0:	4cc0      	ldr	r4, [pc, #768]	@ (8000cb4 <HAL_RCC_OscConfig+0x310>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009b2:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009b4:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009b6:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009b8:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009ba:	2380      	movs	r3, #128	@ 0x80
 80009bc:	025b      	lsls	r3, r3, #9
 80009be:	0019      	movs	r1, r3
 80009c0:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009c2:	07d2      	lsls	r2, r2, #31
 80009c4:	d43d      	bmi.n	8000a42 <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009c6:	682b      	ldr	r3, [r5, #0]
 80009c8:	079b      	lsls	r3, r3, #30
 80009ca:	d500      	bpl.n	80009ce <HAL_RCC_OscConfig+0x2a>
 80009cc:	e086      	b.n	8000adc <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	06db      	lsls	r3, r3, #27
 80009d2:	d528      	bpl.n	8000a26 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	d000      	beq.n	80009da <HAL_RCC_OscConfig+0x36>
 80009d8:	e0df      	b.n	8000b9a <HAL_RCC_OscConfig+0x1f6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	059b      	lsls	r3, r3, #22
 80009de:	d502      	bpl.n	80009e6 <HAL_RCC_OscConfig+0x42>
 80009e0:	69ab      	ldr	r3, [r5, #24]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d039      	beq.n	8000a5a <HAL_RCC_OscConfig+0xb6>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80009e6:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009e8:	6862      	ldr	r2, [r4, #4]
 80009ea:	49b3      	ldr	r1, [pc, #716]	@ (8000cb8 <HAL_RCC_OscConfig+0x314>)
 80009ec:	6a2b      	ldr	r3, [r5, #32]
 80009ee:	400a      	ands	r2, r1
 80009f0:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80009f2:	0b5b      	lsrs	r3, r3, #13
 80009f4:	3301      	adds	r3, #1
 80009f6:	023f      	lsls	r7, r7, #8
 80009f8:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009fa:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009fc:	6861      	ldr	r1, [r4, #4]
 80009fe:	69ea      	ldr	r2, [r5, #28]
 8000a00:	0209      	lsls	r1, r1, #8
 8000a02:	0a09      	lsrs	r1, r1, #8
 8000a04:	0612      	lsls	r2, r2, #24
 8000a06:	430a      	orrs	r2, r1
 8000a08:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000a0a:	68e1      	ldr	r1, [r4, #12]
 8000a0c:	48ab      	ldr	r0, [pc, #684]	@ (8000cbc <HAL_RCC_OscConfig+0x318>)
 8000a0e:	060b      	lsls	r3, r1, #24
 8000a10:	0f1b      	lsrs	r3, r3, #28
 8000a12:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000a14:	4aaa      	ldr	r2, [pc, #680]	@ (8000cc0 <HAL_RCC_OscConfig+0x31c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000a16:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8000a18:	4baa      	ldr	r3, [pc, #680]	@ (8000cc4 <HAL_RCC_OscConfig+0x320>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000a1a:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	f7ff fe31 	bl	8000684 <HAL_InitTick>
        if(status != HAL_OK)
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d130      	bne.n	8000a88 <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a26:	682b      	ldr	r3, [r5, #0]
 8000a28:	071b      	lsls	r3, r3, #28
 8000a2a:	d500      	bpl.n	8000a2e <HAL_RCC_OscConfig+0x8a>
 8000a2c:	e0ec      	b.n	8000c08 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a2e:	682b      	ldr	r3, [r5, #0]
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	d500      	bpl.n	8000a36 <HAL_RCC_OscConfig+0x92>
 8000a34:	e10e      	b.n	8000c54 <HAL_RCC_OscConfig+0x2b0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a36:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d000      	beq.n	8000a3e <HAL_RCC_OscConfig+0x9a>
 8000a3c:	e193      	b.n	8000d66 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8000a3e:	2000      	movs	r0, #0
 8000a40:	e022      	b.n	8000a88 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a42:	2e08      	cmp	r6, #8
 8000a44:	d003      	beq.n	8000a4e <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000a46:	2e0c      	cmp	r6, #12
 8000a48:	d109      	bne.n	8000a5e <HAL_RCC_OscConfig+0xba>
 8000a4a:	2f00      	cmp	r7, #0
 8000a4c:	d007      	beq.n	8000a5e <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	039b      	lsls	r3, r3, #14
 8000a52:	d5b8      	bpl.n	80009c6 <HAL_RCC_OscConfig+0x22>
 8000a54:	686b      	ldr	r3, [r5, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1b5      	bne.n	80009c6 <HAL_RCC_OscConfig+0x22>
    return HAL_ERROR;
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	e014      	b.n	8000a88 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a5e:	686a      	ldr	r2, [r5, #4]
 8000a60:	428a      	cmp	r2, r1
 8000a62:	d113      	bne.n	8000a8c <HAL_RCC_OscConfig+0xe8>
 8000a64:	6822      	ldr	r2, [r4, #0]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a6a:	f7ff fe4f 	bl	800070c <HAL_GetTick>
 8000a6e:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a70:	2280      	movs	r2, #128	@ 0x80
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	0292      	lsls	r2, r2, #10
 8000a76:	4213      	tst	r3, r2
 8000a78:	d1a5      	bne.n	80009c6 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a7a:	f7ff fe47 	bl	800070c <HAL_GetTick>
 8000a7e:	9b00      	ldr	r3, [sp, #0]
 8000a80:	1ac0      	subs	r0, r0, r3
 8000a82:	2864      	cmp	r0, #100	@ 0x64
 8000a84:	d9f4      	bls.n	8000a70 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000a86:	2003      	movs	r0, #3
}
 8000a88:	b005      	add	sp, #20
 8000a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a8c:	21a0      	movs	r1, #160	@ 0xa0
 8000a8e:	02c9      	lsls	r1, r1, #11
 8000a90:	428a      	cmp	r2, r1
 8000a92:	d105      	bne.n	8000aa0 <HAL_RCC_OscConfig+0xfc>
 8000a94:	2280      	movs	r2, #128	@ 0x80
 8000a96:	6821      	ldr	r1, [r4, #0]
 8000a98:	02d2      	lsls	r2, r2, #11
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	6022      	str	r2, [r4, #0]
 8000a9e:	e7e1      	b.n	8000a64 <HAL_RCC_OscConfig+0xc0>
 8000aa0:	6821      	ldr	r1, [r4, #0]
 8000aa2:	4889      	ldr	r0, [pc, #548]	@ (8000cc8 <HAL_RCC_OscConfig+0x324>)
 8000aa4:	4001      	ands	r1, r0
 8000aa6:	6021      	str	r1, [r4, #0]
 8000aa8:	6821      	ldr	r1, [r4, #0]
 8000aaa:	400b      	ands	r3, r1
 8000aac:	9303      	str	r3, [sp, #12]
 8000aae:	9b03      	ldr	r3, [sp, #12]
 8000ab0:	4986      	ldr	r1, [pc, #536]	@ (8000ccc <HAL_RCC_OscConfig+0x328>)
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	400b      	ands	r3, r1
 8000ab6:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d1d6      	bne.n	8000a6a <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 8000abc:	f7ff fe26 	bl	800070c <HAL_GetTick>
 8000ac0:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	6823      	ldr	r3, [r4, #0]
 8000ac6:	0292      	lsls	r2, r2, #10
 8000ac8:	4213      	tst	r3, r2
 8000aca:	d100      	bne.n	8000ace <HAL_RCC_OscConfig+0x12a>
 8000acc:	e77b      	b.n	80009c6 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ace:	f7ff fe1d 	bl	800070c <HAL_GetTick>
 8000ad2:	9b00      	ldr	r3, [sp, #0]
 8000ad4:	1ac0      	subs	r0, r0, r3
 8000ad6:	2864      	cmp	r0, #100	@ 0x64
 8000ad8:	d9f3      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x11e>
 8000ada:	e7d4      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000adc:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8000ade:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000ae0:	4213      	tst	r3, r2
 8000ae2:	d003      	beq.n	8000aec <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000ae4:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000ae6:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000ae8:	4311      	orrs	r1, r2
 8000aea:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000aec:	2e04      	cmp	r6, #4
 8000aee:	d003      	beq.n	8000af8 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000af0:	2e0c      	cmp	r6, #12
 8000af2:	d124      	bne.n	8000b3e <HAL_RCC_OscConfig+0x19a>
 8000af4:	2f00      	cmp	r7, #0
 8000af6:	d122      	bne.n	8000b3e <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000af8:	6822      	ldr	r2, [r4, #0]
 8000afa:	0752      	lsls	r2, r2, #29
 8000afc:	d501      	bpl.n	8000b02 <HAL_RCC_OscConfig+0x15e>
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0ab      	beq.n	8000a5a <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b02:	6861      	ldr	r1, [r4, #4]
 8000b04:	692a      	ldr	r2, [r5, #16]
 8000b06:	4872      	ldr	r0, [pc, #456]	@ (8000cd0 <HAL_RCC_OscConfig+0x32c>)
 8000b08:	0212      	lsls	r2, r2, #8
 8000b0a:	4001      	ands	r1, r0
 8000b0c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b0e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b10:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b12:	6822      	ldr	r2, [r4, #0]
 8000b14:	438a      	bics	r2, r1
 8000b16:	4313      	orrs	r3, r2
 8000b18:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b1a:	f7ff ff01 	bl	8000920 <HAL_RCC_GetSysClockFreq>
 8000b1e:	68e3      	ldr	r3, [r4, #12]
 8000b20:	4a66      	ldr	r2, [pc, #408]	@ (8000cbc <HAL_RCC_OscConfig+0x318>)
 8000b22:	061b      	lsls	r3, r3, #24
 8000b24:	0f1b      	lsrs	r3, r3, #28
 8000b26:	5cd3      	ldrb	r3, [r2, r3]
 8000b28:	4965      	ldr	r1, [pc, #404]	@ (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 8000b2a:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8000b2c:	4b65      	ldr	r3, [pc, #404]	@ (8000cc4 <HAL_RCC_OscConfig+0x320>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b2e:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	f7ff fda7 	bl	8000684 <HAL_InitTick>
      if(status != HAL_OK)
 8000b36:	2800      	cmp	r0, #0
 8000b38:	d100      	bne.n	8000b3c <HAL_RCC_OscConfig+0x198>
 8000b3a:	e748      	b.n	80009ce <HAL_RCC_OscConfig+0x2a>
 8000b3c:	e7a4      	b.n	8000a88 <HAL_RCC_OscConfig+0xe4>
      if(hsi_state != RCC_HSI_OFF)
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d019      	beq.n	8000b76 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b42:	2109      	movs	r1, #9
 8000b44:	6822      	ldr	r2, [r4, #0]
 8000b46:	438a      	bics	r2, r1
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b4c:	f7ff fdde 	bl	800070c <HAL_GetTick>
 8000b50:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b52:	2204      	movs	r2, #4
 8000b54:	6823      	ldr	r3, [r4, #0]
 8000b56:	4213      	tst	r3, r2
 8000b58:	d007      	beq.n	8000b6a <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b5a:	6862      	ldr	r2, [r4, #4]
 8000b5c:	692b      	ldr	r3, [r5, #16]
 8000b5e:	495c      	ldr	r1, [pc, #368]	@ (8000cd0 <HAL_RCC_OscConfig+0x32c>)
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	400a      	ands	r2, r1
 8000b64:	4313      	orrs	r3, r2
 8000b66:	6063      	str	r3, [r4, #4]
 8000b68:	e731      	b.n	80009ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b6a:	f7ff fdcf 	bl	800070c <HAL_GetTick>
 8000b6e:	1bc0      	subs	r0, r0, r7
 8000b70:	2802      	cmp	r0, #2
 8000b72:	d9ee      	bls.n	8000b52 <HAL_RCC_OscConfig+0x1ae>
 8000b74:	e787      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8000b76:	2201      	movs	r2, #1
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	4393      	bics	r3, r2
 8000b7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b7e:	f7ff fdc5 	bl	800070c <HAL_GetTick>
 8000b82:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000b84:	2204      	movs	r2, #4
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	4213      	tst	r3, r2
 8000b8a:	d100      	bne.n	8000b8e <HAL_RCC_OscConfig+0x1ea>
 8000b8c:	e71f      	b.n	80009ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b8e:	f7ff fdbd 	bl	800070c <HAL_GetTick>
 8000b92:	1bc0      	subs	r0, r0, r7
 8000b94:	2802      	cmp	r0, #2
 8000b96:	d9f5      	bls.n	8000b84 <HAL_RCC_OscConfig+0x1e0>
 8000b98:	e775      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b9a:	69ab      	ldr	r3, [r5, #24]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d020      	beq.n	8000be2 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_MSI_ENABLE();
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	6822      	ldr	r2, [r4, #0]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000baa:	f7ff fdaf 	bl	800070c <HAL_GetTick>
 8000bae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000bb0:	2280      	movs	r2, #128	@ 0x80
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	0092      	lsls	r2, r2, #2
 8000bb6:	4213      	tst	r3, r2
 8000bb8:	d00d      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bba:	6863      	ldr	r3, [r4, #4]
 8000bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8000cb8 <HAL_RCC_OscConfig+0x314>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	6a2a      	ldr	r2, [r5, #32]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bc6:	6862      	ldr	r2, [r4, #4]
 8000bc8:	69eb      	ldr	r3, [r5, #28]
 8000bca:	0212      	lsls	r2, r2, #8
 8000bcc:	061b      	lsls	r3, r3, #24
 8000bce:	0a12      	lsrs	r2, r2, #8
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	6063      	str	r3, [r4, #4]
 8000bd4:	e727      	b.n	8000a26 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bd6:	f7ff fd99 	bl	800070c <HAL_GetTick>
 8000bda:	1bc0      	subs	r0, r0, r7
 8000bdc:	2802      	cmp	r0, #2
 8000bde:	d9e7      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x20c>
 8000be0:	e751      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	4a3b      	ldr	r2, [pc, #236]	@ (8000cd4 <HAL_RCC_OscConfig+0x330>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bea:	f7ff fd8f 	bl	800070c <HAL_GetTick>
 8000bee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000bf0:	2280      	movs	r2, #128	@ 0x80
 8000bf2:	6823      	ldr	r3, [r4, #0]
 8000bf4:	0092      	lsls	r2, r2, #2
 8000bf6:	4213      	tst	r3, r2
 8000bf8:	d100      	bne.n	8000bfc <HAL_RCC_OscConfig+0x258>
 8000bfa:	e714      	b.n	8000a26 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bfc:	f7ff fd86 	bl	800070c <HAL_GetTick>
 8000c00:	1bc0      	subs	r0, r0, r7
 8000c02:	2802      	cmp	r0, #2
 8000c04:	d9f4      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x24c>
 8000c06:	e73e      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c08:	696a      	ldr	r2, [r5, #20]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	d010      	beq.n	8000c32 <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSI_ENABLE();
 8000c10:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000c12:	4313      	orrs	r3, r2
 8000c14:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8000c16:	f7ff fd79 	bl	800070c <HAL_GetTick>
 8000c1a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000c20:	4213      	tst	r3, r2
 8000c22:	d000      	beq.n	8000c26 <HAL_RCC_OscConfig+0x282>
 8000c24:	e703      	b.n	8000a2e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c26:	f7ff fd71 	bl	800070c <HAL_GetTick>
 8000c2a:	1bc0      	subs	r0, r0, r7
 8000c2c:	2802      	cmp	r0, #2
 8000c2e:	d9f5      	bls.n	8000c1c <HAL_RCC_OscConfig+0x278>
 8000c30:	e729      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 8000c32:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000c34:	439a      	bics	r2, r3
 8000c36:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8000c38:	f7ff fd68 	bl	800070c <HAL_GetTick>
 8000c3c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000c42:	4213      	tst	r3, r2
 8000c44:	d100      	bne.n	8000c48 <HAL_RCC_OscConfig+0x2a4>
 8000c46:	e6f2      	b.n	8000a2e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c48:	f7ff fd60 	bl	800070c <HAL_GetTick>
 8000c4c:	1bc0      	subs	r0, r0, r7
 8000c4e:	2802      	cmp	r0, #2
 8000c50:	d9f5      	bls.n	8000c3e <HAL_RCC_OscConfig+0x29a>
 8000c52:	e718      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c54:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000c56:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c58:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000c5a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000c5c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c5e:	421a      	tst	r2, r3
 8000c60:	d104      	bne.n	8000c6c <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000c64:	4313      	orrs	r3, r2
 8000c66:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c6c:	2280      	movs	r2, #128	@ 0x80
 8000c6e:	4f1a      	ldr	r7, [pc, #104]	@ (8000cd8 <HAL_RCC_OscConfig+0x334>)
 8000c70:	0052      	lsls	r2, r2, #1
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	4213      	tst	r3, r2
 8000c76:	d008      	beq.n	8000c8a <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	68ab      	ldr	r3, [r5, #8]
 8000c7c:	0052      	lsls	r2, r2, #1
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12c      	bne.n	8000cdc <HAL_RCC_OscConfig+0x338>
 8000c82:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000c84:	4313      	orrs	r3, r2
 8000c86:	6523      	str	r3, [r4, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c88:	e04d      	b.n	8000d26 <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c8a:	2280      	movs	r2, #128	@ 0x80
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	0052      	lsls	r2, r2, #1
 8000c90:	4313      	orrs	r3, r2
 8000c92:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000c94:	f7ff fd3a 	bl	800070c <HAL_GetTick>
 8000c98:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c9a:	2280      	movs	r2, #128	@ 0x80
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	0052      	lsls	r2, r2, #1
 8000ca0:	4213      	tst	r3, r2
 8000ca2:	d1e9      	bne.n	8000c78 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ca4:	f7ff fd32 	bl	800070c <HAL_GetTick>
 8000ca8:	9b01      	ldr	r3, [sp, #4]
 8000caa:	1ac0      	subs	r0, r0, r3
 8000cac:	2864      	cmp	r0, #100	@ 0x64
 8000cae:	d9f4      	bls.n	8000c9a <HAL_RCC_OscConfig+0x2f6>
 8000cb0:	e6e9      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	ffff1fff 	.word	0xffff1fff
 8000cbc:	0800177b 	.word	0x0800177b
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	fffeffff 	.word	0xfffeffff
 8000ccc:	fffbffff 	.word	0xfffbffff
 8000cd0:	ffffe0ff 	.word	0xffffe0ff
 8000cd4:	fffffeff 	.word	0xfffffeff
 8000cd8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d116      	bne.n	8000d0e <HAL_RCC_OscConfig+0x36a>
 8000ce0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000ce2:	4a51      	ldr	r2, [pc, #324]	@ (8000e28 <HAL_RCC_OscConfig+0x484>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	6523      	str	r3, [r4, #80]	@ 0x50
 8000ce8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000cea:	4a50      	ldr	r2, [pc, #320]	@ (8000e2c <HAL_RCC_OscConfig+0x488>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8000cf0:	f7ff fd0c 	bl	800070c <HAL_GetTick>
 8000cf4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000cf6:	2280      	movs	r2, #128	@ 0x80
 8000cf8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000cfa:	0092      	lsls	r2, r2, #2
 8000cfc:	4213      	tst	r3, r2
 8000cfe:	d01a      	beq.n	8000d36 <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d00:	f7ff fd04 	bl	800070c <HAL_GetTick>
 8000d04:	4b4a      	ldr	r3, [pc, #296]	@ (8000e30 <HAL_RCC_OscConfig+0x48c>)
 8000d06:	1bc0      	subs	r0, r0, r7
 8000d08:	4298      	cmp	r0, r3
 8000d0a:	d9f4      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x352>
 8000d0c:	e6bb      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d0e:	21a0      	movs	r1, #160	@ 0xa0
 8000d10:	00c9      	lsls	r1, r1, #3
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d118      	bne.n	8000d48 <HAL_RCC_OscConfig+0x3a4>
 8000d16:	2380      	movs	r3, #128	@ 0x80
 8000d18:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	6523      	str	r3, [r4, #80]	@ 0x50
 8000d20:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000d22:	431a      	orrs	r2, r3
 8000d24:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8000d26:	f7ff fcf1 	bl	800070c <HAL_GetTick>
 8000d2a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000d2c:	2280      	movs	r2, #128	@ 0x80
 8000d2e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	4213      	tst	r3, r2
 8000d34:	d010      	beq.n	8000d58 <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 8000d36:	9b00      	ldr	r3, [sp, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d000      	beq.n	8000d3e <HAL_RCC_OscConfig+0x39a>
 8000d3c:	e67b      	b.n	8000a36 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8000d40:	4a3c      	ldr	r2, [pc, #240]	@ (8000e34 <HAL_RCC_OscConfig+0x490>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000d46:	e676      	b.n	8000a36 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d48:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000d4a:	4a37      	ldr	r2, [pc, #220]	@ (8000e28 <HAL_RCC_OscConfig+0x484>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	6523      	str	r3, [r4, #80]	@ 0x50
 8000d50:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000d52:	4a36      	ldr	r2, [pc, #216]	@ (8000e2c <HAL_RCC_OscConfig+0x488>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	e796      	b.n	8000c86 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d58:	f7ff fcd8 	bl	800070c <HAL_GetTick>
 8000d5c:	4b34      	ldr	r3, [pc, #208]	@ (8000e30 <HAL_RCC_OscConfig+0x48c>)
 8000d5e:	1bc0      	subs	r0, r0, r7
 8000d60:	4298      	cmp	r0, r3
 8000d62:	d9e3      	bls.n	8000d2c <HAL_RCC_OscConfig+0x388>
 8000d64:	e68f      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d66:	2e0c      	cmp	r6, #12
 8000d68:	d043      	beq.n	8000df2 <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d6a:	4a33      	ldr	r2, [pc, #204]	@ (8000e38 <HAL_RCC_OscConfig+0x494>)
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d12e      	bne.n	8000dce <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 8000d70:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000d72:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000d74:	4013      	ands	r3, r2
 8000d76:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d78:	f7ff fcc8 	bl	800070c <HAL_GetTick>
 8000d7c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000d7e:	04bf      	lsls	r7, r7, #18
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	423b      	tst	r3, r7
 8000d84:	d11d      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d86:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8000d88:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000d8a:	68e2      	ldr	r2, [r4, #12]
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	492b      	ldr	r1, [pc, #172]	@ (8000e3c <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000d90:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d92:	400a      	ands	r2, r1
 8000d94:	4313      	orrs	r3, r2
 8000d96:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000d98:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000d9e:	2380      	movs	r3, #128	@ 0x80
 8000da0:	6822      	ldr	r2, [r4, #0]
 8000da2:	045b      	lsls	r3, r3, #17
 8000da4:	4313      	orrs	r3, r2
 8000da6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000da8:	f7ff fcb0 	bl	800070c <HAL_GetTick>
 8000dac:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	4233      	tst	r3, r6
 8000db2:	d000      	beq.n	8000db6 <HAL_RCC_OscConfig+0x412>
 8000db4:	e643      	b.n	8000a3e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db6:	f7ff fca9 	bl	800070c <HAL_GetTick>
 8000dba:	1b40      	subs	r0, r0, r5
 8000dbc:	2802      	cmp	r0, #2
 8000dbe:	d9f6      	bls.n	8000dae <HAL_RCC_OscConfig+0x40a>
 8000dc0:	e661      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc2:	f7ff fca3 	bl	800070c <HAL_GetTick>
 8000dc6:	1b80      	subs	r0, r0, r6
 8000dc8:	2802      	cmp	r0, #2
 8000dca:	d9d9      	bls.n	8000d80 <HAL_RCC_OscConfig+0x3dc>
 8000dcc:	e65b      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 8000dce:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000dd0:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dd6:	f7ff fc99 	bl	800070c <HAL_GetTick>
 8000dda:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000ddc:	04b6      	lsls	r6, r6, #18
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	4233      	tst	r3, r6
 8000de2:	d100      	bne.n	8000de6 <HAL_RCC_OscConfig+0x442>
 8000de4:	e62b      	b.n	8000a3e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de6:	f7ff fc91 	bl	800070c <HAL_GetTick>
 8000dea:	1b40      	subs	r0, r0, r5
 8000dec:	2802      	cmp	r0, #2
 8000dee:	d9f6      	bls.n	8000dde <HAL_RCC_OscConfig+0x43a>
 8000df0:	e649      	b.n	8000a86 <HAL_RCC_OscConfig+0xe2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d100      	bne.n	8000df8 <HAL_RCC_OscConfig+0x454>
 8000df6:	e630      	b.n	8000a5a <HAL_RCC_OscConfig+0xb6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df8:	2380      	movs	r3, #128	@ 0x80
        pll_config = RCC->CFGR;
 8000dfa:	68e0      	ldr	r0, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dfc:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8000dfe:	025b      	lsls	r3, r3, #9
 8000e00:	4003      	ands	r3, r0
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d000      	beq.n	8000e08 <HAL_RCC_OscConfig+0x464>
 8000e06:	e628      	b.n	8000a5a <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000e08:	23f0      	movs	r3, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e0a:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000e0c:	039b      	lsls	r3, r3, #14
 8000e0e:	4003      	ands	r3, r0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d000      	beq.n	8000e16 <HAL_RCC_OscConfig+0x472>
 8000e14:	e621      	b.n	8000a5a <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000e16:	23c0      	movs	r3, #192	@ 0xc0
 8000e18:	041b      	lsls	r3, r3, #16
 8000e1a:	4018      	ands	r0, r3
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000e1c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000e1e:	1ac0      	subs	r0, r0, r3
 8000e20:	1e43      	subs	r3, r0, #1
 8000e22:	4198      	sbcs	r0, r3
 8000e24:	b2c0      	uxtb	r0, r0
 8000e26:	e62f      	b.n	8000a88 <HAL_RCC_OscConfig+0xe4>
 8000e28:	fffffeff 	.word	0xfffffeff
 8000e2c:	fffffbff 	.word	0xfffffbff
 8000e30:	00001388 	.word	0x00001388
 8000e34:	efffffff 	.word	0xefffffff
 8000e38:	feffffff 	.word	0xfeffffff
 8000e3c:	ff02ffff 	.word	0xff02ffff

08000e40 <HAL_RCC_ClockConfig>:
{
 8000e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e42:	1e04      	subs	r4, r0, #0
 8000e44:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000e46:	d101      	bne.n	8000e4c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000e48:	2001      	movs	r0, #1
}
 8000e4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e4c:	2501      	movs	r5, #1
 8000e4e:	4e5b      	ldr	r6, [pc, #364]	@ (8000fbc <HAL_RCC_ClockConfig+0x17c>)
 8000e50:	9a01      	ldr	r2, [sp, #4]
 8000e52:	6833      	ldr	r3, [r6, #0]
 8000e54:	402b      	ands	r3, r5
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d331      	bcc.n	8000ebe <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e5a:	6822      	ldr	r2, [r4, #0]
 8000e5c:	0793      	lsls	r3, r2, #30
 8000e5e:	d443      	bmi.n	8000ee8 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e60:	07d2      	lsls	r2, r2, #31
 8000e62:	d449      	bmi.n	8000ef8 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e64:	2501      	movs	r5, #1
 8000e66:	6833      	ldr	r3, [r6, #0]
 8000e68:	9a01      	ldr	r2, [sp, #4]
 8000e6a:	402b      	ands	r3, r5
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d909      	bls.n	8000e84 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e70:	6833      	ldr	r3, [r6, #0]
 8000e72:	43ab      	bics	r3, r5
 8000e74:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000e76:	f7ff fc49 	bl	800070c <HAL_GetTick>
 8000e7a:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e7c:	6833      	ldr	r3, [r6, #0]
 8000e7e:	422b      	tst	r3, r5
 8000e80:	d000      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x44>
 8000e82:	e08c      	b.n	8000f9e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e84:	6822      	ldr	r2, [r4, #0]
 8000e86:	4d4e      	ldr	r5, [pc, #312]	@ (8000fc0 <HAL_RCC_ClockConfig+0x180>)
 8000e88:	0753      	lsls	r3, r2, #29
 8000e8a:	d500      	bpl.n	8000e8e <HAL_RCC_ClockConfig+0x4e>
 8000e8c:	e08f      	b.n	8000fae <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e8e:	0712      	lsls	r2, r2, #28
 8000e90:	d506      	bpl.n	8000ea0 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e92:	68ea      	ldr	r2, [r5, #12]
 8000e94:	6923      	ldr	r3, [r4, #16]
 8000e96:	494b      	ldr	r1, [pc, #300]	@ (8000fc4 <HAL_RCC_ClockConfig+0x184>)
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ea0:	f7ff fd3e 	bl	8000920 <HAL_RCC_GetSysClockFreq>
 8000ea4:	68eb      	ldr	r3, [r5, #12]
 8000ea6:	4a48      	ldr	r2, [pc, #288]	@ (8000fc8 <HAL_RCC_ClockConfig+0x188>)
 8000ea8:	061b      	lsls	r3, r3, #24
 8000eaa:	0f1b      	lsrs	r3, r3, #28
 8000eac:	5cd3      	ldrb	r3, [r2, r3]
 8000eae:	4947      	ldr	r1, [pc, #284]	@ (8000fcc <HAL_RCC_ClockConfig+0x18c>)
 8000eb0:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8000eb2:	4b47      	ldr	r3, [pc, #284]	@ (8000fd0 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000eb4:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f7ff fbe4 	bl	8000684 <HAL_InitTick>
  if(status != HAL_OK)
 8000ebc:	e7c5      	b.n	8000e4a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ebe:	6833      	ldr	r3, [r6, #0]
 8000ec0:	9a01      	ldr	r2, [sp, #4]
 8000ec2:	43ab      	bics	r3, r5
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000ec8:	f7ff fc20 	bl	800070c <HAL_GetTick>
 8000ecc:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ece:	6833      	ldr	r3, [r6, #0]
 8000ed0:	9a01      	ldr	r2, [sp, #4]
 8000ed2:	402b      	ands	r3, r5
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d0c0      	beq.n	8000e5a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed8:	f7ff fc18 	bl	800070c <HAL_GetTick>
 8000edc:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd4 <HAL_RCC_ClockConfig+0x194>)
 8000ede:	1bc0      	subs	r0, r0, r7
 8000ee0:	4298      	cmp	r0, r3
 8000ee2:	d9f4      	bls.n	8000ece <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	e7b0      	b.n	8000e4a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ee8:	20f0      	movs	r0, #240	@ 0xf0
 8000eea:	4935      	ldr	r1, [pc, #212]	@ (8000fc0 <HAL_RCC_ClockConfig+0x180>)
 8000eec:	68cb      	ldr	r3, [r1, #12]
 8000eee:	4383      	bics	r3, r0
 8000ef0:	68a0      	ldr	r0, [r4, #8]
 8000ef2:	4303      	orrs	r3, r0
 8000ef4:	60cb      	str	r3, [r1, #12]
 8000ef6:	e7b3      	b.n	8000e60 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef8:	4d31      	ldr	r5, [pc, #196]	@ (8000fc0 <HAL_RCC_ClockConfig+0x180>)
 8000efa:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000efc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	d118      	bne.n	8000f34 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f02:	039b      	lsls	r3, r3, #14
 8000f04:	d5a0      	bpl.n	8000e48 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f06:	2103      	movs	r1, #3
 8000f08:	68eb      	ldr	r3, [r5, #12]
 8000f0a:	438b      	bics	r3, r1
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000f10:	f7ff fbfc 	bl	800070c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f14:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000f16:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d118      	bne.n	8000f4e <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f1c:	220c      	movs	r2, #12
 8000f1e:	68eb      	ldr	r3, [r5, #12]
 8000f20:	4013      	ands	r3, r2
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d09e      	beq.n	8000e64 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f26:	f7ff fbf1 	bl	800070c <HAL_GetTick>
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <HAL_RCC_ClockConfig+0x194>)
 8000f2c:	1bc0      	subs	r0, r0, r7
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	d9f4      	bls.n	8000f1c <HAL_RCC_ClockConfig+0xdc>
 8000f32:	e7d7      	b.n	8000ee4 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f34:	2a03      	cmp	r2, #3
 8000f36:	d102      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000f38:	019b      	lsls	r3, r3, #6
 8000f3a:	d4e4      	bmi.n	8000f06 <HAL_RCC_ClockConfig+0xc6>
 8000f3c:	e784      	b.n	8000e48 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f3e:	2a01      	cmp	r2, #1
 8000f40:	d102      	bne.n	8000f48 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f42:	075b      	lsls	r3, r3, #29
 8000f44:	d4df      	bmi.n	8000f06 <HAL_RCC_ClockConfig+0xc6>
 8000f46:	e77f      	b.n	8000e48 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f48:	059b      	lsls	r3, r3, #22
 8000f4a:	d4dc      	bmi.n	8000f06 <HAL_RCC_ClockConfig+0xc6>
 8000f4c:	e77c      	b.n	8000e48 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d10b      	bne.n	8000f6a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f52:	220c      	movs	r2, #12
 8000f54:	68eb      	ldr	r3, [r5, #12]
 8000f56:	4013      	ands	r3, r2
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d083      	beq.n	8000e64 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f5c:	f7ff fbd6 	bl	800070c <HAL_GetTick>
 8000f60:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <HAL_RCC_ClockConfig+0x194>)
 8000f62:	1bc0      	subs	r0, r0, r7
 8000f64:	4298      	cmp	r0, r3
 8000f66:	d9f4      	bls.n	8000f52 <HAL_RCC_ClockConfig+0x112>
 8000f68:	e7bc      	b.n	8000ee4 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d011      	beq.n	8000f92 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	68eb      	ldr	r3, [r5, #12]
 8000f72:	4213      	tst	r3, r2
 8000f74:	d100      	bne.n	8000f78 <HAL_RCC_ClockConfig+0x138>
 8000f76:	e775      	b.n	8000e64 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f78:	f7ff fbc8 	bl	800070c <HAL_GetTick>
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <HAL_RCC_ClockConfig+0x194>)
 8000f7e:	1bc0      	subs	r0, r0, r7
 8000f80:	4298      	cmp	r0, r3
 8000f82:	d9f4      	bls.n	8000f6e <HAL_RCC_ClockConfig+0x12e>
 8000f84:	e7ae      	b.n	8000ee4 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f86:	f7ff fbc1 	bl	800070c <HAL_GetTick>
 8000f8a:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <HAL_RCC_ClockConfig+0x194>)
 8000f8c:	1bc0      	subs	r0, r0, r7
 8000f8e:	4298      	cmp	r0, r3
 8000f90:	d8a8      	bhi.n	8000ee4 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f92:	220c      	movs	r2, #12
 8000f94:	68eb      	ldr	r3, [r5, #12]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d1f4      	bne.n	8000f86 <HAL_RCC_ClockConfig+0x146>
 8000f9c:	e762      	b.n	8000e64 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f9e:	f7ff fbb5 	bl	800070c <HAL_GetTick>
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <HAL_RCC_ClockConfig+0x194>)
 8000fa4:	1bc0      	subs	r0, r0, r7
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	d800      	bhi.n	8000fac <HAL_RCC_ClockConfig+0x16c>
 8000faa:	e767      	b.n	8000e7c <HAL_RCC_ClockConfig+0x3c>
 8000fac:	e79a      	b.n	8000ee4 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fae:	68eb      	ldr	r3, [r5, #12]
 8000fb0:	4909      	ldr	r1, [pc, #36]	@ (8000fd8 <HAL_RCC_ClockConfig+0x198>)
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	68e1      	ldr	r1, [r4, #12]
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	60eb      	str	r3, [r5, #12]
 8000fba:	e768      	b.n	8000e8e <HAL_RCC_ClockConfig+0x4e>
 8000fbc:	40022000 	.word	0x40022000
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	ffffc7ff 	.word	0xffffc7ff
 8000fc8:	0800177b 	.word	0x0800177b
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	00001388 	.word	0x00001388
 8000fd8:	fffff8ff 	.word	0xfffff8ff

08000fdc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fdc:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	4905      	ldr	r1, [pc, #20]	@ (8000ff8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fe4:	055b      	lsls	r3, r3, #21
 8000fe6:	0f5b      	lsrs	r3, r3, #29
 8000fe8:	5ccb      	ldrb	r3, [r1, r3]
 8000fea:	6810      	ldr	r0, [r2, #0]
 8000fec:	40d8      	lsrs	r0, r3
}
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	08001773 	.word	0x08001773

08000ffc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000ffc:	6803      	ldr	r3, [r0, #0]
{
 8000ffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001000:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001002:	069b      	lsls	r3, r3, #26
 8001004:	d52b      	bpl.n	800105e <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001006:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 8001008:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100a:	4c51      	ldr	r4, [pc, #324]	@ (8001150 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800100c:	055b      	lsls	r3, r3, #21
 800100e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 8001010:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001012:	421a      	tst	r2, r3
 8001014:	d104      	bne.n	8001020 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001018:	4313      	orrs	r3, r2
 800101a:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 800101c:	2301      	movs	r3, #1
 800101e:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	2780      	movs	r7, #128	@ 0x80
 8001022:	4e4c      	ldr	r6, [pc, #304]	@ (8001154 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001024:	007f      	lsls	r7, r7, #1
 8001026:	6833      	ldr	r3, [r6, #0]
 8001028:	423b      	tst	r3, r7
 800102a:	d038      	beq.n	800109e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800102c:	20c0      	movs	r0, #192	@ 0xc0
 800102e:	22c0      	movs	r2, #192	@ 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001030:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001032:	686b      	ldr	r3, [r5, #4]
 8001034:	0380      	lsls	r0, r0, #14
 8001036:	4059      	eors	r1, r3
 8001038:	0292      	lsls	r2, r2, #10
 800103a:	4201      	tst	r1, r0
 800103c:	d140      	bne.n	80010c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800103e:	6d20      	ldr	r0, [r4, #80]	@ 0x50

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001040:	6829      	ldr	r1, [r5, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001042:	0006      	movs	r6, r0
 8001044:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001046:	4210      	tst	r0, r2
 8001048:	d143      	bne.n	80010d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	069b      	lsls	r3, r3, #26
 800104e:	d454      	bmi.n	80010fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001050:	9b00      	ldr	r3, [sp, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d103      	bne.n	800105e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001056:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001058:	4a3f      	ldr	r2, [pc, #252]	@ (8001158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800105a:	4013      	ands	r3, r2
 800105c:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800105e:	682b      	ldr	r3, [r5, #0]
 8001060:	079a      	lsls	r2, r3, #30
 8001062:	d506      	bpl.n	8001072 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001064:	200c      	movs	r0, #12
 8001066:	493a      	ldr	r1, [pc, #232]	@ (8001150 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001068:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800106a:	4382      	bics	r2, r0
 800106c:	68a8      	ldr	r0, [r5, #8]
 800106e:	4302      	orrs	r2, r0
 8001070:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001072:	075a      	lsls	r2, r3, #29
 8001074:	d506      	bpl.n	8001084 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001076:	4936      	ldr	r1, [pc, #216]	@ (8001150 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001078:	4838      	ldr	r0, [pc, #224]	@ (800115c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800107a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800107c:	4002      	ands	r2, r0
 800107e:	68e8      	ldr	r0, [r5, #12]
 8001080:	4302      	orrs	r2, r0
 8001082:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001084:	071a      	lsls	r2, r3, #28
 8001086:	d506      	bpl.n	8001096 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001088:	4931      	ldr	r1, [pc, #196]	@ (8001150 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800108a:	4835      	ldr	r0, [pc, #212]	@ (8001160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800108c:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800108e:	4002      	ands	r2, r0
 8001090:	6928      	ldr	r0, [r5, #16]
 8001092:	4302      	orrs	r2, r0
 8001094:	64ca      	str	r2, [r1, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001096:	061b      	lsls	r3, r3, #24
 8001098:	d452      	bmi.n	8001140 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800109a:	2000      	movs	r0, #0
 800109c:	e00f      	b.n	80010be <HAL_RCCEx_PeriphCLKConfig+0xc2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800109e:	6833      	ldr	r3, [r6, #0]
 80010a0:	433b      	orrs	r3, r7
 80010a2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010a4:	f7ff fb32 	bl	800070c <HAL_GetTick>
 80010a8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010aa:	6833      	ldr	r3, [r6, #0]
 80010ac:	423b      	tst	r3, r7
 80010ae:	d1bd      	bne.n	800102c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b0:	f7ff fb2c 	bl	800070c <HAL_GetTick>
 80010b4:	9b01      	ldr	r3, [sp, #4]
 80010b6:	1ac0      	subs	r0, r0, r3
 80010b8:	2864      	cmp	r0, #100	@ 0x64
 80010ba:	d9f6      	bls.n	80010aa <HAL_RCCEx_PeriphCLKConfig+0xae>
          return HAL_TIMEOUT;
 80010bc:	2003      	movs	r0, #3
}
 80010be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80010c0:	0019      	movs	r1, r3
 80010c2:	4011      	ands	r1, r2
 80010c4:	4291      	cmp	r1, r2
 80010c6:	d1ba      	bne.n	800103e <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80010c8:	6821      	ldr	r1, [r4, #0]
          return HAL_ERROR;
 80010ca:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80010cc:	0389      	lsls	r1, r1, #14
 80010ce:	d5b6      	bpl.n	800103e <HAL_RCCEx_PeriphCLKConfig+0x42>
 80010d0:	e7f5      	b.n	80010be <HAL_RCCEx_PeriphCLKConfig+0xc2>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80010d2:	4013      	ands	r3, r2
 80010d4:	42b3      	cmp	r3, r6
 80010d6:	d0b8      	beq.n	800104a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010d8:	0689      	lsls	r1, r1, #26
 80010da:	d5b9      	bpl.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 80010dc:	2180      	movs	r1, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80010de:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80010e0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80010e2:	0309      	lsls	r1, r1, #12
 80010e4:	4301      	orrs	r1, r0
 80010e6:	6521      	str	r1, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010e8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80010ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001164 <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010ec:	481e      	ldr	r0, [pc, #120]	@ (8001168 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80010ee:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010f0:	4001      	ands	r1, r0
 80010f2:	6521      	str	r1, [r4, #80]	@ 0x50
      RCC->CSR = temp_reg;
 80010f4:	6522      	str	r2, [r4, #80]	@ 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	d412      	bmi.n	8001120 <HAL_RCCEx_PeriphCLKConfig+0x124>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80010fa:	6869      	ldr	r1, [r5, #4]
 80010fc:	23c0      	movs	r3, #192	@ 0xc0
 80010fe:	000a      	movs	r2, r1
 8001100:	029b      	lsls	r3, r3, #10
 8001102:	401a      	ands	r2, r3
 8001104:	429a      	cmp	r2, r3
 8001106:	d107      	bne.n	8001118 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	4818      	ldr	r0, [pc, #96]	@ (800116c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800110c:	4003      	ands	r3, r0
 800110e:	20c0      	movs	r0, #192	@ 0xc0
 8001110:	0380      	lsls	r0, r0, #14
 8001112:	4001      	ands	r1, r0
 8001114:	430b      	orrs	r3, r1
 8001116:	6023      	str	r3, [r4, #0]
 8001118:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800111a:	431a      	orrs	r2, r3
 800111c:	6522      	str	r2, [r4, #80]	@ 0x50
 800111e:	e797      	b.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8001120:	f7ff faf4 	bl	800070c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001124:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001126:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001128:	00bf      	lsls	r7, r7, #2
 800112a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800112c:	423b      	tst	r3, r7
 800112e:	d000      	beq.n	8001132 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001130:	e78b      	b.n	800104a <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001132:	f7ff faeb 	bl	800070c <HAL_GetTick>
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8001138:	1b80      	subs	r0, r0, r6
 800113a:	4298      	cmp	r0, r3
 800113c:	d9f5      	bls.n	800112a <HAL_RCCEx_PeriphCLKConfig+0x12e>
 800113e:	e7bd      	b.n	80010bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001140:	4a03      	ldr	r2, [pc, #12]	@ (8001150 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001142:	490c      	ldr	r1, [pc, #48]	@ (8001174 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001144:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8001146:	400b      	ands	r3, r1
 8001148:	6969      	ldr	r1, [r5, #20]
 800114a:	430b      	orrs	r3, r1
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	e7a4      	b.n	800109a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001150:	40021000 	.word	0x40021000
 8001154:	40007000 	.word	0x40007000
 8001158:	efffffff 	.word	0xefffffff
 800115c:	fffff3ff 	.word	0xfffff3ff
 8001160:	ffffcfff 	.word	0xffffcfff
 8001164:	fffcffff 	.word	0xfffcffff
 8001168:	fff7ffff 	.word	0xfff7ffff
 800116c:	ffcfffff 	.word	0xffcfffff
 8001170:	00001388 	.word	0x00001388
 8001174:	fff3ffff 	.word	0xfff3ffff

08001178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001178:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800117a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800117e:	2201      	movs	r2, #1
 8001180:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001184:	6801      	ldr	r1, [r0, #0]
 8001186:	4d12      	ldr	r5, [pc, #72]	@ (80011d0 <UART_EndRxTransfer+0x58>)
 8001188:	680b      	ldr	r3, [r1, #0]
 800118a:	402b      	ands	r3, r5
 800118c:	600b      	str	r3, [r1, #0]
 800118e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001192:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001196:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800119a:	6801      	ldr	r1, [r0, #0]
 800119c:	688b      	ldr	r3, [r1, #8]
 800119e:	4393      	bics	r3, r2
 80011a0:	608b      	str	r3, [r1, #8]
 80011a2:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80011a6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d10a      	bne.n	80011c2 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011b0:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80011b4:	2410      	movs	r4, #16
 80011b6:	6802      	ldr	r2, [r0, #0]
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	43a3      	bics	r3, r4
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80011c2:	2220      	movs	r2, #32
 80011c4:	1d03      	adds	r3, r0, #4
 80011c6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80011c8:	2300      	movs	r3, #0
 80011ca:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80011cc:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80011ce:	bd30      	pop	{r4, r5, pc}
 80011d0:	fffffedf 	.word	0xfffffedf

080011d4 <UART_SetConfig>:
{
 80011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011d8:	6925      	ldr	r5, [r4, #16]
 80011da:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80011dc:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011de:	4329      	orrs	r1, r5
 80011e0:	6965      	ldr	r5, [r4, #20]
 80011e2:	69c3      	ldr	r3, [r0, #28]
 80011e4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80011e6:	6810      	ldr	r0, [r2, #0]
 80011e8:	4d5c      	ldr	r5, [pc, #368]	@ (800135c <UART_SetConfig+0x188>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011ea:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80011ec:	4028      	ands	r0, r5
 80011ee:	4301      	orrs	r1, r0
 80011f0:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011f2:	6851      	ldr	r1, [r2, #4]
 80011f4:	485a      	ldr	r0, [pc, #360]	@ (8001360 <UART_SetConfig+0x18c>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80011f6:	4d5b      	ldr	r5, [pc, #364]	@ (8001364 <UART_SetConfig+0x190>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011f8:	4001      	ands	r1, r0
 80011fa:	68e0      	ldr	r0, [r4, #12]
 80011fc:	4301      	orrs	r1, r0
 80011fe:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001200:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001202:	42aa      	cmp	r2, r5
 8001204:	d001      	beq.n	800120a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8001206:	6a21      	ldr	r1, [r4, #32]
 8001208:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800120a:	6891      	ldr	r1, [r2, #8]
 800120c:	4e56      	ldr	r6, [pc, #344]	@ (8001368 <UART_SetConfig+0x194>)
 800120e:	4031      	ands	r1, r6
 8001210:	4301      	orrs	r1, r0
 8001212:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001214:	4955      	ldr	r1, [pc, #340]	@ (800136c <UART_SetConfig+0x198>)
 8001216:	428a      	cmp	r2, r1
 8001218:	d118      	bne.n	800124c <UART_SetConfig+0x78>
 800121a:	200c      	movs	r0, #12
 800121c:	4954      	ldr	r1, [pc, #336]	@ (8001370 <UART_SetConfig+0x19c>)
 800121e:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001220:	4002      	ands	r2, r0
 8001222:	2a08      	cmp	r2, #8
 8001224:	d100      	bne.n	8001228 <UART_SetConfig+0x54>
 8001226:	e082      	b.n	800132e <UART_SetConfig+0x15a>
 8001228:	d80b      	bhi.n	8001242 <UART_SetConfig+0x6e>
 800122a:	2180      	movs	r1, #128	@ 0x80
 800122c:	0209      	lsls	r1, r1, #8
 800122e:	2a00      	cmp	r2, #0
 8001230:	d000      	beq.n	8001234 <UART_SetConfig+0x60>
 8001232:	e072      	b.n	800131a <UART_SetConfig+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001234:	428b      	cmp	r3, r1
 8001236:	d04a      	beq.n	80012ce <UART_SetConfig+0xfa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001238:	f7ff fed0 	bl	8000fdc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800123c:	2800      	cmp	r0, #0
 800123e:	d017      	beq.n	8001270 <UART_SetConfig+0x9c>
 8001240:	e083      	b.n	800134a <UART_SetConfig+0x176>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001242:	2a0c      	cmp	r2, #12
 8001244:	d100      	bne.n	8001248 <UART_SetConfig+0x74>
 8001246:	e06d      	b.n	8001324 <UART_SetConfig+0x150>
          pclk = (uint32_t) HSI_VALUE;
 8001248:	2001      	movs	r0, #1
 800124a:	e012      	b.n	8001272 <UART_SetConfig+0x9e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800124c:	42aa      	cmp	r2, r5
 800124e:	d1fb      	bne.n	8001248 <UART_SetConfig+0x74>
 8001250:	21c0      	movs	r1, #192	@ 0xc0
 8001252:	2080      	movs	r0, #128	@ 0x80
 8001254:	4a46      	ldr	r2, [pc, #280]	@ (8001370 <UART_SetConfig+0x19c>)
 8001256:	0109      	lsls	r1, r1, #4
 8001258:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800125a:	0100      	lsls	r0, r0, #4
 800125c:	400b      	ands	r3, r1
 800125e:	4283      	cmp	r3, r0
 8001260:	d010      	beq.n	8001284 <UART_SetConfig+0xb0>
 8001262:	d80a      	bhi.n	800127a <UART_SetConfig+0xa6>
 8001264:	2b00      	cmp	r3, #0
 8001266:	d12f      	bne.n	80012c8 <UART_SetConfig+0xf4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001268:	f7ff feb8 	bl	8000fdc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800126c:	2800      	cmp	r0, #0
 800126e:	d110      	bne.n	8001292 <UART_SetConfig+0xbe>
          pclk = (uint32_t) HSI_VALUE;
 8001270:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001272:	2300      	movs	r3, #0
 8001274:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8001276:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8001278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800127a:	428b      	cmp	r3, r1
 800127c:	d1e4      	bne.n	8001248 <UART_SetConfig+0x74>
 800127e:	2080      	movs	r0, #128	@ 0x80
 8001280:	0200      	lsls	r0, r0, #8
 8001282:	e006      	b.n	8001292 <UART_SetConfig+0xbe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001284:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 8001286:	4b3b      	ldr	r3, [pc, #236]	@ (8001374 <UART_SetConfig+0x1a0>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001288:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 800128a:	17c0      	asrs	r0, r0, #31
 800128c:	4018      	ands	r0, r3
 800128e:	4b3a      	ldr	r3, [pc, #232]	@ (8001378 <UART_SetConfig+0x1a4>)
 8001290:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001292:	2303      	movs	r3, #3
 8001294:	6862      	ldr	r2, [r4, #4]
 8001296:	4353      	muls	r3, r2
 8001298:	4283      	cmp	r3, r0
 800129a:	d8d5      	bhi.n	8001248 <UART_SetConfig+0x74>
          (pclk > (4096U * huart->Init.BaudRate)))
 800129c:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800129e:	4283      	cmp	r3, r0
 80012a0:	d3d2      	bcc.n	8001248 <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80012a2:	2100      	movs	r1, #0
 80012a4:	0e07      	lsrs	r7, r0, #24
 80012a6:	0206      	lsls	r6, r0, #8
 80012a8:	0850      	lsrs	r0, r2, #1
 80012aa:	1836      	adds	r6, r6, r0
 80012ac:	414f      	adcs	r7, r1
 80012ae:	000b      	movs	r3, r1
 80012b0:	0030      	movs	r0, r6
 80012b2:	0039      	movs	r1, r7
 80012b4:	f7fe ffbc 	bl	8000230 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80012b8:	4b30      	ldr	r3, [pc, #192]	@ (800137c <UART_SetConfig+0x1a8>)
 80012ba:	18c2      	adds	r2, r0, r3
 80012bc:	4b30      	ldr	r3, [pc, #192]	@ (8001380 <UART_SetConfig+0x1ac>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80012be:	429a      	cmp	r2, r3
 80012c0:	d8c2      	bhi.n	8001248 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	60d8      	str	r0, [r3, #12]
 80012c6:	e7d3      	b.n	8001270 <UART_SetConfig+0x9c>
        pclk = HAL_RCC_GetSysClockFreq();
 80012c8:	f7ff fb2a 	bl	8000920 <HAL_RCC_GetSysClockFreq>
        break;
 80012cc:	e7ce      	b.n	800126c <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 80012ce:	f7ff fe85 	bl	8000fdc <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80012d2:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80012d4:	d0cc      	beq.n	8001270 <UART_SetConfig+0x9c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80012d6:	6861      	ldr	r1, [r4, #4]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	0848      	lsrs	r0, r1, #1
 80012dc:	1818      	adds	r0, r3, r0
 80012de:	f7fe ff1b 	bl	8000118 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80012e2:	0002      	movs	r2, r0
 80012e4:	4b27      	ldr	r3, [pc, #156]	@ (8001384 <UART_SetConfig+0x1b0>)
 80012e6:	3a10      	subs	r2, #16
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8ad      	bhi.n	8001248 <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80012ec:	230f      	movs	r3, #15
 80012ee:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80012f0:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80012f2:	439a      	bics	r2, r3
 80012f4:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80012f6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80012f8:	6822      	ldr	r2, [r4, #0]
 80012fa:	4303      	orrs	r3, r0
 80012fc:	60d3      	str	r3, [r2, #12]
 80012fe:	e7b7      	b.n	8001270 <UART_SetConfig+0x9c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001300:	f7ff fb0e 	bl	8000920 <HAL_RCC_GetSysClockFreq>
 8001304:	e7e5      	b.n	80012d2 <UART_SetConfig+0xfe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001306:	680b      	ldr	r3, [r1, #0]
 8001308:	4013      	ands	r3, r2
          pclk = (uint32_t) HSI_VALUE;
 800130a:	1e5a      	subs	r2, r3, #1
 800130c:	4193      	sbcs	r3, r2
 800130e:	4a19      	ldr	r2, [pc, #100]	@ (8001374 <UART_SetConfig+0x1a0>)
 8001310:	425b      	negs	r3, r3
 8001312:	4013      	ands	r3, r2
 8001314:	4a18      	ldr	r2, [pc, #96]	@ (8001378 <UART_SetConfig+0x1a4>)
 8001316:	189b      	adds	r3, r3, r2
 8001318:	e7dd      	b.n	80012d6 <UART_SetConfig+0x102>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800131a:	428b      	cmp	r3, r1
 800131c:	d0f0      	beq.n	8001300 <UART_SetConfig+0x12c>
        pclk = HAL_RCC_GetSysClockFreq();
 800131e:	f7ff faff 	bl	8000920 <HAL_RCC_GetSysClockFreq>
        break;
 8001322:	e78b      	b.n	800123c <UART_SetConfig+0x68>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001324:	2080      	movs	r0, #128	@ 0x80
 8001326:	0200      	lsls	r0, r0, #8
 8001328:	4283      	cmp	r3, r0
 800132a:	d0d4      	beq.n	80012d6 <UART_SetConfig+0x102>
 800132c:	e00d      	b.n	800134a <UART_SetConfig+0x176>
 800132e:	2080      	movs	r0, #128	@ 0x80
 8001330:	2210      	movs	r2, #16
 8001332:	0200      	lsls	r0, r0, #8
 8001334:	4283      	cmp	r3, r0
 8001336:	d0e6      	beq.n	8001306 <UART_SetConfig+0x132>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001338:	6808      	ldr	r0, [r1, #0]
 800133a:	4010      	ands	r0, r2
          pclk = (uint32_t) HSI_VALUE;
 800133c:	1e43      	subs	r3, r0, #1
 800133e:	4198      	sbcs	r0, r3
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <UART_SetConfig+0x1a0>)
 8001342:	4240      	negs	r0, r0
 8001344:	4018      	ands	r0, r3
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <UART_SetConfig+0x1a4>)
 8001348:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800134a:	6861      	ldr	r1, [r4, #4]
 800134c:	084b      	lsrs	r3, r1, #1
 800134e:	1818      	adds	r0, r3, r0
 8001350:	f7fe fee2 	bl	8000118 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001354:	0002      	movs	r2, r0
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <UART_SetConfig+0x1b0>)
 8001358:	3a10      	subs	r2, #16
 800135a:	e7b0      	b.n	80012be <UART_SetConfig+0xea>
 800135c:	efff69f3 	.word	0xefff69f3
 8001360:	ffffcfff 	.word	0xffffcfff
 8001364:	40004800 	.word	0x40004800
 8001368:	fffff4ff 	.word	0xfffff4ff
 800136c:	40004400 	.word	0x40004400
 8001370:	40021000 	.word	0x40021000
 8001374:	ff48e500 	.word	0xff48e500
 8001378:	00f42400 	.word	0x00f42400
 800137c:	fffffd00 	.word	0xfffffd00
 8001380:	000ffcff 	.word	0x000ffcff
 8001384:	0000ffef 	.word	0x0000ffef

08001388 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001388:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800138a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800138c:	071a      	lsls	r2, r3, #28
 800138e:	d506      	bpl.n	800139e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001390:	6801      	ldr	r1, [r0, #0]
 8001392:	4c28      	ldr	r4, [pc, #160]	@ (8001434 <UART_AdvFeatureConfig+0xac>)
 8001394:	684a      	ldr	r2, [r1, #4]
 8001396:	4022      	ands	r2, r4
 8001398:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800139a:	4322      	orrs	r2, r4
 800139c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800139e:	07da      	lsls	r2, r3, #31
 80013a0:	d506      	bpl.n	80013b0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80013a2:	6801      	ldr	r1, [r0, #0]
 80013a4:	4c24      	ldr	r4, [pc, #144]	@ (8001438 <UART_AdvFeatureConfig+0xb0>)
 80013a6:	684a      	ldr	r2, [r1, #4]
 80013a8:	4022      	ands	r2, r4
 80013aa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80013ac:	4322      	orrs	r2, r4
 80013ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80013b0:	079a      	lsls	r2, r3, #30
 80013b2:	d506      	bpl.n	80013c2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80013b4:	6801      	ldr	r1, [r0, #0]
 80013b6:	4c21      	ldr	r4, [pc, #132]	@ (800143c <UART_AdvFeatureConfig+0xb4>)
 80013b8:	684a      	ldr	r2, [r1, #4]
 80013ba:	4022      	ands	r2, r4
 80013bc:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80013be:	4322      	orrs	r2, r4
 80013c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80013c2:	075a      	lsls	r2, r3, #29
 80013c4:	d506      	bpl.n	80013d4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80013c6:	6801      	ldr	r1, [r0, #0]
 80013c8:	4c1d      	ldr	r4, [pc, #116]	@ (8001440 <UART_AdvFeatureConfig+0xb8>)
 80013ca:	684a      	ldr	r2, [r1, #4]
 80013cc:	4022      	ands	r2, r4
 80013ce:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80013d0:	4322      	orrs	r2, r4
 80013d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80013d4:	06da      	lsls	r2, r3, #27
 80013d6:	d506      	bpl.n	80013e6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80013d8:	6801      	ldr	r1, [r0, #0]
 80013da:	4c1a      	ldr	r4, [pc, #104]	@ (8001444 <UART_AdvFeatureConfig+0xbc>)
 80013dc:	688a      	ldr	r2, [r1, #8]
 80013de:	4022      	ands	r2, r4
 80013e0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80013e2:	4322      	orrs	r2, r4
 80013e4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80013e6:	069a      	lsls	r2, r3, #26
 80013e8:	d506      	bpl.n	80013f8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80013ea:	6801      	ldr	r1, [r0, #0]
 80013ec:	4c16      	ldr	r4, [pc, #88]	@ (8001448 <UART_AdvFeatureConfig+0xc0>)
 80013ee:	688a      	ldr	r2, [r1, #8]
 80013f0:	4022      	ands	r2, r4
 80013f2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80013f4:	4322      	orrs	r2, r4
 80013f6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80013f8:	065a      	lsls	r2, r3, #25
 80013fa:	d510      	bpl.n	800141e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80013fc:	6801      	ldr	r1, [r0, #0]
 80013fe:	4d13      	ldr	r5, [pc, #76]	@ (800144c <UART_AdvFeatureConfig+0xc4>)
 8001400:	684a      	ldr	r2, [r1, #4]
 8001402:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8001404:	402a      	ands	r2, r5
 8001406:	4322      	orrs	r2, r4
 8001408:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800140a:	2280      	movs	r2, #128	@ 0x80
 800140c:	0352      	lsls	r2, r2, #13
 800140e:	4294      	cmp	r4, r2
 8001410:	d105      	bne.n	800141e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001412:	684a      	ldr	r2, [r1, #4]
 8001414:	4c0e      	ldr	r4, [pc, #56]	@ (8001450 <UART_AdvFeatureConfig+0xc8>)
 8001416:	4022      	ands	r2, r4
 8001418:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800141a:	4322      	orrs	r2, r4
 800141c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800141e:	061b      	lsls	r3, r3, #24
 8001420:	d506      	bpl.n	8001430 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001422:	6802      	ldr	r2, [r0, #0]
 8001424:	490b      	ldr	r1, [pc, #44]	@ (8001454 <UART_AdvFeatureConfig+0xcc>)
 8001426:	6853      	ldr	r3, [r2, #4]
 8001428:	400b      	ands	r3, r1
 800142a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800142c:	430b      	orrs	r3, r1
 800142e:	6053      	str	r3, [r2, #4]
}
 8001430:	bd30      	pop	{r4, r5, pc}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	ffff7fff 	.word	0xffff7fff
 8001438:	fffdffff 	.word	0xfffdffff
 800143c:	fffeffff 	.word	0xfffeffff
 8001440:	fffbffff 	.word	0xfffbffff
 8001444:	ffffefff 	.word	0xffffefff
 8001448:	ffffdfff 	.word	0xffffdfff
 800144c:	ffefffff 	.word	0xffefffff
 8001450:	ff9fffff 	.word	0xff9fffff
 8001454:	fff7ffff 	.word	0xfff7ffff

08001458 <UART_WaitOnFlagUntilTimeout>:
{
 8001458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800145a:	0004      	movs	r4, r0
 800145c:	000d      	movs	r5, r1
 800145e:	0017      	movs	r7, r2
 8001460:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001462:	6822      	ldr	r2, [r4, #0]
 8001464:	69d3      	ldr	r3, [r2, #28]
 8001466:	402b      	ands	r3, r5
 8001468:	1b5b      	subs	r3, r3, r5
 800146a:	4259      	negs	r1, r3
 800146c:	414b      	adcs	r3, r1
 800146e:	42bb      	cmp	r3, r7
 8001470:	d001      	beq.n	8001476 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001472:	2000      	movs	r0, #0
 8001474:	e025      	b.n	80014c2 <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001476:	9b08      	ldr	r3, [sp, #32]
 8001478:	3301      	adds	r3, #1
 800147a:	d0f3      	beq.n	8001464 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800147c:	f7ff f946 	bl	800070c <HAL_GetTick>
 8001480:	9b00      	ldr	r3, [sp, #0]
 8001482:	1ac0      	subs	r0, r0, r3
 8001484:	9b08      	ldr	r3, [sp, #32]
 8001486:	4298      	cmp	r0, r3
 8001488:	d82c      	bhi.n	80014e4 <UART_WaitOnFlagUntilTimeout+0x8c>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d02a      	beq.n	80014e4 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	0752      	lsls	r2, r2, #29
 8001494:	d5e5      	bpl.n	8001462 <UART_WaitOnFlagUntilTimeout+0xa>
 8001496:	002a      	movs	r2, r5
 8001498:	2140      	movs	r1, #64	@ 0x40
 800149a:	3a40      	subs	r2, #64	@ 0x40
 800149c:	438a      	bics	r2, r1
 800149e:	d0e0      	beq.n	8001462 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	2608      	movs	r6, #8
 80014a4:	0011      	movs	r1, r2
 80014a6:	4031      	ands	r1, r6
 80014a8:	9101      	str	r1, [sp, #4]
 80014aa:	4232      	tst	r2, r6
 80014ac:	d00a      	beq.n	80014c4 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 80014ae:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80014b0:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 80014b2:	f7ff fe61 	bl	8001178 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80014b6:	19a3      	adds	r3, r4, r6
 80014b8:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80014ba:	2300      	movs	r3, #0
          return HAL_ERROR;
 80014bc:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 80014be:	3478      	adds	r4, #120	@ 0x78
 80014c0:	7023      	strb	r3, [r4, #0]
}
 80014c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80014c4:	2280      	movs	r2, #128	@ 0x80
 80014c6:	69d9      	ldr	r1, [r3, #28]
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	4211      	tst	r1, r2
 80014cc:	d0c9      	beq.n	8001462 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80014ce:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80014d0:	0020      	movs	r0, r4
 80014d2:	f7ff fe51 	bl	8001178 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80014d6:	0023      	movs	r3, r4
 80014d8:	2220      	movs	r2, #32
 80014da:	3308      	adds	r3, #8
 80014dc:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80014de:	9b01      	ldr	r3, [sp, #4]
 80014e0:	3478      	adds	r4, #120	@ 0x78
 80014e2:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80014e4:	2003      	movs	r0, #3
 80014e6:	e7ec      	b.n	80014c2 <UART_WaitOnFlagUntilTimeout+0x6a>

080014e8 <HAL_UART_Transmit>:
{
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	b087      	sub	sp, #28
 80014ec:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80014ee:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 80014f0:	0004      	movs	r4, r0
 80014f2:	000d      	movs	r5, r1
 80014f4:	0017      	movs	r7, r2
    return HAL_BUSY;
 80014f6:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80014f8:	2b20      	cmp	r3, #32
 80014fa:	d138      	bne.n	800156e <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 80014fc:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80014fe:	2900      	cmp	r1, #0
 8001500:	d035      	beq.n	800156e <HAL_UART_Transmit+0x86>
 8001502:	2a00      	cmp	r2, #0
 8001504:	d033      	beq.n	800156e <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001506:	2380      	movs	r3, #128	@ 0x80
 8001508:	68a2      	ldr	r2, [r4, #8]
 800150a:	015b      	lsls	r3, r3, #5
 800150c:	429a      	cmp	r2, r3
 800150e:	d104      	bne.n	800151a <HAL_UART_Transmit+0x32>
 8001510:	6923      	ldr	r3, [r4, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001516:	4201      	tst	r1, r0
 8001518:	d129      	bne.n	800156e <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800151a:	0023      	movs	r3, r4
 800151c:	2600      	movs	r6, #0
 800151e:	3308      	adds	r3, #8
 8001520:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001522:	2321      	movs	r3, #33	@ 0x21
 8001524:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8001526:	f7ff f8f1 	bl	800070c <HAL_GetTick>
    huart->TxXferSize  = Size;
 800152a:	0023      	movs	r3, r4
 800152c:	3350      	adds	r3, #80	@ 0x50
 800152e:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8001530:	3302      	adds	r3, #2
 8001532:	9303      	str	r3, [sp, #12]
 8001534:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001536:	2380      	movs	r3, #128	@ 0x80
 8001538:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800153a:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800153c:	015b      	lsls	r3, r3, #5
 800153e:	429a      	cmp	r2, r3
 8001540:	d104      	bne.n	800154c <HAL_UART_Transmit+0x64>
 8001542:	6923      	ldr	r3, [r4, #16]
 8001544:	42b3      	cmp	r3, r6
 8001546:	d101      	bne.n	800154c <HAL_UART_Transmit+0x64>
      pdata16bits = (const uint16_t *) pData;
 8001548:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800154a:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800154c:	0023      	movs	r3, r4
 800154e:	3352      	adds	r3, #82	@ 0x52
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	b29a      	uxth	r2, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10c      	bne.n	8001572 <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001558:	9b05      	ldr	r3, [sp, #20]
 800155a:	2140      	movs	r1, #64	@ 0x40
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	0020      	movs	r0, r4
 8001560:	9b04      	ldr	r3, [sp, #16]
 8001562:	f7ff ff79 	bl	8001458 <UART_WaitOnFlagUntilTimeout>
 8001566:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8001568:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800156a:	2800      	cmp	r0, #0
 800156c:	d10d      	bne.n	800158a <HAL_UART_Transmit+0xa2>
}
 800156e:	b007      	add	sp, #28
 8001570:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001572:	9b05      	ldr	r3, [sp, #20]
 8001574:	2200      	movs	r2, #0
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2180      	movs	r1, #128	@ 0x80
 800157a:	0020      	movs	r0, r4
 800157c:	9b04      	ldr	r3, [sp, #16]
 800157e:	f7ff ff6b 	bl	8001458 <UART_WaitOnFlagUntilTimeout>
 8001582:	2800      	cmp	r0, #0
 8001584:	d003      	beq.n	800158e <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8001586:	2320      	movs	r3, #32
 8001588:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800158a:	2003      	movs	r0, #3
 800158c:	e7ef      	b.n	800156e <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800158e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001590:	2d00      	cmp	r5, #0
 8001592:	d10b      	bne.n	80015ac <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001594:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001596:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001598:	05db      	lsls	r3, r3, #23
 800159a:	0ddb      	lsrs	r3, r3, #23
 800159c:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800159e:	9b03      	ldr	r3, [sp, #12]
 80015a0:	9a03      	ldr	r2, [sp, #12]
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	8013      	strh	r3, [r2, #0]
 80015aa:	e7cf      	b.n	800154c <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80015ac:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80015ae:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80015b0:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 80015b2:	e7f4      	b.n	800159e <HAL_UART_Transmit+0xb6>

080015b4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b4:	0003      	movs	r3, r0
{
 80015b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b8:	2500      	movs	r5, #0
{
 80015ba:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015bc:	3308      	adds	r3, #8
 80015be:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80015c0:	f7ff f8a4 	bl	800070c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80015c4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80015c6:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	071b      	lsls	r3, r3, #28
 80015cc:	d51d      	bpl.n	800160a <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80015ce:	2180      	movs	r1, #128	@ 0x80
 80015d0:	4b26      	ldr	r3, [pc, #152]	@ (800166c <UART_CheckIdleState+0xb8>)
 80015d2:	002a      	movs	r2, r5
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	0389      	lsls	r1, r1, #14
 80015d8:	0003      	movs	r3, r0
 80015da:	0020      	movs	r0, r4
 80015dc:	f7ff ff3c 	bl	8001458 <UART_WaitOnFlagUntilTimeout>
 80015e0:	42a8      	cmp	r0, r5
 80015e2:	d012      	beq.n	800160a <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015e4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015e8:	2301      	movs	r3, #1
 80015ea:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80015ee:	2080      	movs	r0, #128	@ 0x80
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	6813      	ldr	r3, [r2, #0]
 80015f4:	4383      	bics	r3, r0
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80015fc:	2320      	movs	r3, #32
 80015fe:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8001600:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8001602:	2300      	movs	r3, #0
 8001604:	3478      	adds	r4, #120	@ 0x78
 8001606:	7023      	strb	r3, [r4, #0]
}
 8001608:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800160a:	0025      	movs	r5, r4
 800160c:	cd08      	ldmia	r5!, {r3}
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	075b      	lsls	r3, r3, #29
 8001612:	d523      	bpl.n	800165c <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001614:	2180      	movs	r1, #128	@ 0x80
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <UART_CheckIdleState+0xb8>)
 8001618:	2200      	movs	r2, #0
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	0020      	movs	r0, r4
 800161e:	0033      	movs	r3, r6
 8001620:	03c9      	lsls	r1, r1, #15
 8001622:	f7ff ff19 	bl	8001458 <UART_WaitOnFlagUntilTimeout>
 8001626:	2800      	cmp	r0, #0
 8001628:	d018      	beq.n	800165c <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800162a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800162e:	2201      	movs	r2, #1
 8001630:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001634:	6821      	ldr	r1, [r4, #0]
 8001636:	4e0e      	ldr	r6, [pc, #56]	@ (8001670 <UART_CheckIdleState+0xbc>)
 8001638:	680b      	ldr	r3, [r1, #0]
 800163a:	4033      	ands	r3, r6
 800163c:	600b      	str	r3, [r1, #0]
 800163e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001642:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001646:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800164a:	6821      	ldr	r1, [r4, #0]
 800164c:	688b      	ldr	r3, [r1, #8]
 800164e:	4393      	bics	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
 8001652:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001656:	2320      	movs	r3, #32
 8001658:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800165a:	e7d1      	b.n	8001600 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 800165c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800165e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001660:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001662:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001664:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001666:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8001668:	e7cb      	b.n	8001602 <UART_CheckIdleState+0x4e>
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	01ffffff 	.word	0x01ffffff
 8001670:	fffffedf 	.word	0xfffffedf

08001674 <HAL_UART_Init>:
{
 8001674:	b510      	push	{r4, lr}
 8001676:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001678:	d101      	bne.n	800167e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800167a:	2001      	movs	r0, #1
}
 800167c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800167e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001680:	2b00      	cmp	r3, #0
 8001682:	d104      	bne.n	800168e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001684:	0002      	movs	r2, r0
 8001686:	3278      	adds	r2, #120	@ 0x78
 8001688:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800168a:	f7fe ff7f 	bl	800058c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800168e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8001690:	2101      	movs	r1, #1
 8001692:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001694:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	438b      	bics	r3, r1
 800169a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800169c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80016a2:	0020      	movs	r0, r4
 80016a4:	f7ff fe70 	bl	8001388 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80016a8:	0020      	movs	r0, r4
 80016aa:	f7ff fd93 	bl	80011d4 <UART_SetConfig>
 80016ae:	2801      	cmp	r0, #1
 80016b0:	d0e3      	beq.n	800167a <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	4907      	ldr	r1, [pc, #28]	@ (80016d4 <HAL_UART_Init+0x60>)
 80016b6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80016b8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016ba:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016bc:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	438a      	bics	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80016c6:	2201      	movs	r2, #1
 80016c8:	6819      	ldr	r1, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80016ce:	f7ff ff71 	bl	80015b4 <UART_CheckIdleState>
 80016d2:	e7d3      	b.n	800167c <HAL_UART_Init+0x8>
 80016d4:	ffffb7ff 	.word	0xffffb7ff

080016d8 <memset>:
 80016d8:	0003      	movs	r3, r0
 80016da:	1882      	adds	r2, r0, r2
 80016dc:	4293      	cmp	r3, r2
 80016de:	d100      	bne.n	80016e2 <memset+0xa>
 80016e0:	4770      	bx	lr
 80016e2:	7019      	strb	r1, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	e7f9      	b.n	80016dc <memset+0x4>

080016e8 <__libc_init_array>:
 80016e8:	b570      	push	{r4, r5, r6, lr}
 80016ea:	2600      	movs	r6, #0
 80016ec:	4c0c      	ldr	r4, [pc, #48]	@ (8001720 <__libc_init_array+0x38>)
 80016ee:	4d0d      	ldr	r5, [pc, #52]	@ (8001724 <__libc_init_array+0x3c>)
 80016f0:	1b64      	subs	r4, r4, r5
 80016f2:	10a4      	asrs	r4, r4, #2
 80016f4:	42a6      	cmp	r6, r4
 80016f6:	d109      	bne.n	800170c <__libc_init_array+0x24>
 80016f8:	2600      	movs	r6, #0
 80016fa:	f000 f823 	bl	8001744 <_init>
 80016fe:	4c0a      	ldr	r4, [pc, #40]	@ (8001728 <__libc_init_array+0x40>)
 8001700:	4d0a      	ldr	r5, [pc, #40]	@ (800172c <__libc_init_array+0x44>)
 8001702:	1b64      	subs	r4, r4, r5
 8001704:	10a4      	asrs	r4, r4, #2
 8001706:	42a6      	cmp	r6, r4
 8001708:	d105      	bne.n	8001716 <__libc_init_array+0x2e>
 800170a:	bd70      	pop	{r4, r5, r6, pc}
 800170c:	00b3      	lsls	r3, r6, #2
 800170e:	58eb      	ldr	r3, [r5, r3]
 8001710:	4798      	blx	r3
 8001712:	3601      	adds	r6, #1
 8001714:	e7ee      	b.n	80016f4 <__libc_init_array+0xc>
 8001716:	00b3      	lsls	r3, r6, #2
 8001718:	58eb      	ldr	r3, [r5, r3]
 800171a:	4798      	blx	r3
 800171c:	3601      	adds	r6, #1
 800171e:	e7f2      	b.n	8001706 <__libc_init_array+0x1e>
 8001720:	08001794 	.word	0x08001794
 8001724:	08001794 	.word	0x08001794
 8001728:	08001798 	.word	0x08001798
 800172c:	08001794 	.word	0x08001794

08001730 <memcpy>:
 8001730:	2300      	movs	r3, #0
 8001732:	b510      	push	{r4, lr}
 8001734:	429a      	cmp	r2, r3
 8001736:	d100      	bne.n	800173a <memcpy+0xa>
 8001738:	bd10      	pop	{r4, pc}
 800173a:	5ccc      	ldrb	r4, [r1, r3]
 800173c:	54c4      	strb	r4, [r0, r3]
 800173e:	3301      	adds	r3, #1
 8001740:	e7f8      	b.n	8001734 <memcpy+0x4>
	...

08001744 <_init>:
 8001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800174a:	bc08      	pop	{r3}
 800174c:	469e      	mov	lr, r3
 800174e:	4770      	bx	lr

08001750 <_fini>:
 8001750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001756:	bc08      	pop	{r3}
 8001758:	469e      	mov	lr, r3
 800175a:	4770      	bx	lr
