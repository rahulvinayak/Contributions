
Analog_Test_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003264  08003264  00004264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003358  08003358  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003358  08003358  00004358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003360  08003360  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003360  08003360  00004360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003364  08003364  00004364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003368  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003374  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000300  20000110  08003374  00005110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009090  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015da  00000000  00000000  0000e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0000f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000593  00000000  00000000  0000fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010a41  00000000  00000000  0001036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c3c  00000000  00000000  00020dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000670f1  00000000  00000000  0002a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00091ad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001918  00000000  00000000  00091b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00093434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800324c 	.word	0x0800324c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800324c 	.word	0x0800324c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	@ (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
void MX_ADC_Init(void);
void DebugPrint(const char* msg);
uint16_t Read_ADC_PA0(void);

int main(void)
{
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	b087      	sub	sp, #28
 8000624:	af00      	add	r7, sp, #0
    HAL_Init();
 8000626:	f000 fb39 	bl	8000c9c <HAL_Init>
    SystemClock_Config();
 800062a:	f000 fa01 	bl	8000a30 <SystemClock_Config>
    MX_GPIO_Init();
 800062e:	f000 f9bd 	bl	80009ac <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000632:	f000 f985 	bl	8000940 <MX_USART2_UART_Init>
    MX_ADC_Init();
 8000636:	f000 f913 	bl	8000860 <MX_ADC_Init>

    DebugPrint("=== PA0 ADC Monitor ===\r\n");
 800063a:	4b63      	ldr	r3, [pc, #396]	@ (80007c8 <main+0x1a8>)
 800063c:	0018      	movs	r0, r3
 800063e:	f000 f959 	bl	80008f4 <DebugPrint>
    DebugPrint("Connect 0-3.3V to PA0\r\n");
 8000642:	4b62      	ldr	r3, [pc, #392]	@ (80007cc <main+0x1ac>)
 8000644:	0018      	movs	r0, r3
 8000646:	f000 f955 	bl	80008f4 <DebugPrint>
    DebugPrint("ADC readings every 1 second:\r\n\r\n");
 800064a:	4b61      	ldr	r3, [pc, #388]	@ (80007d0 <main+0x1b0>)
 800064c:	0018      	movs	r0, r3
 800064e:	f000 f951 	bl	80008f4 <DebugPrint>

    while(1)
    {
        // Read ADC value
        uint16_t adc_raw = Read_ADC_PA0();
 8000652:	2516      	movs	r5, #22
 8000654:	197c      	adds	r4, r7, r5
 8000656:	f000 f8c7 	bl	80007e8 <Read_ADC_PA0>
 800065a:	0003      	movs	r3, r0
 800065c:	8023      	strh	r3, [r4, #0]

        // Convert to millivolts (3.3V reference, 12-bit ADC)
        uint16_t voltage_mv = (adc_raw * 3300) / 4095;
 800065e:	002c      	movs	r4, r5
 8000660:	193b      	adds	r3, r7, r4
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	4a5b      	ldr	r2, [pc, #364]	@ (80007d4 <main+0x1b4>)
 8000666:	4353      	muls	r3, r2
 8000668:	495b      	ldr	r1, [pc, #364]	@ (80007d8 <main+0x1b8>)
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff fdd6 	bl	800021c <__divsi3>
 8000670:	0003      	movs	r3, r0
 8000672:	001a      	movs	r2, r3
 8000674:	2614      	movs	r6, #20
 8000676:	19bb      	adds	r3, r7, r6
 8000678:	801a      	strh	r2, [r3, #0]

        // Display raw ADC value
        DebugPrint("ADC Raw: ");
 800067a:	4b58      	ldr	r3, [pc, #352]	@ (80007dc <main+0x1bc>)
 800067c:	0018      	movs	r0, r3
 800067e:	f000 f939 	bl	80008f4 <DebugPrint>
        char adc_str[5];
        adc_str[0] = '0' + (adc_raw / 1000);
 8000682:	193b      	adds	r3, r7, r4
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	22fa      	movs	r2, #250	@ 0xfa
 8000688:	0091      	lsls	r1, r2, #2
 800068a:	0018      	movs	r0, r3
 800068c:	f7ff fd3c 	bl	8000108 <__udivsi3>
 8000690:	0003      	movs	r3, r0
 8000692:	b29b      	uxth	r3, r3
 8000694:	b2db      	uxtb	r3, r3
 8000696:	3330      	adds	r3, #48	@ 0x30
 8000698:	b2da      	uxtb	r2, r3
 800069a:	250c      	movs	r5, #12
 800069c:	197b      	adds	r3, r7, r5
 800069e:	701a      	strb	r2, [r3, #0]
        adc_str[1] = '0' + ((adc_raw / 100) % 10);
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	2164      	movs	r1, #100	@ 0x64
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff fd2e 	bl	8000108 <__udivsi3>
 80006ac:	0003      	movs	r3, r0
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	210a      	movs	r1, #10
 80006b2:	0018      	movs	r0, r3
 80006b4:	f7ff fdae 	bl	8000214 <__aeabi_uidivmod>
 80006b8:	000b      	movs	r3, r1
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	3330      	adds	r3, #48	@ 0x30
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	197b      	adds	r3, r7, r5
 80006c4:	705a      	strb	r2, [r3, #1]
        adc_str[2] = '0' + ((adc_raw / 10) % 10);
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	210a      	movs	r1, #10
 80006cc:	0018      	movs	r0, r3
 80006ce:	f7ff fd1b 	bl	8000108 <__udivsi3>
 80006d2:	0003      	movs	r3, r0
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	210a      	movs	r1, #10
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff fd9b 	bl	8000214 <__aeabi_uidivmod>
 80006de:	000b      	movs	r3, r1
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	3330      	adds	r3, #48	@ 0x30
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	197b      	adds	r3, r7, r5
 80006ea:	709a      	strb	r2, [r3, #2]
        adc_str[3] = '0' + (adc_raw % 10);
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	210a      	movs	r1, #10
 80006f2:	0018      	movs	r0, r3
 80006f4:	f7ff fd8e 	bl	8000214 <__aeabi_uidivmod>
 80006f8:	000b      	movs	r3, r1
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	3330      	adds	r3, #48	@ 0x30
 8000700:	b2da      	uxtb	r2, r3
 8000702:	197b      	adds	r3, r7, r5
 8000704:	70da      	strb	r2, [r3, #3]
        adc_str[4] = 0;
 8000706:	197b      	adds	r3, r7, r5
 8000708:	2200      	movs	r2, #0
 800070a:	711a      	strb	r2, [r3, #4]
        DebugPrint(adc_str);
 800070c:	197b      	adds	r3, r7, r5
 800070e:	0018      	movs	r0, r3
 8000710:	f000 f8f0 	bl	80008f4 <DebugPrint>

        DebugPrint(" = ");
 8000714:	4b32      	ldr	r3, [pc, #200]	@ (80007e0 <main+0x1c0>)
 8000716:	0018      	movs	r0, r3
 8000718:	f000 f8ec 	bl	80008f4 <DebugPrint>

        // Display voltage in X.XXX format
        char volt_str[6];
        volt_str[0] = '0' + (voltage_mv / 1000);
 800071c:	19bb      	adds	r3, r7, r6
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	22fa      	movs	r2, #250	@ 0xfa
 8000722:	0091      	lsls	r1, r2, #2
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff fcef 	bl	8000108 <__udivsi3>
 800072a:	0003      	movs	r3, r0
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	3330      	adds	r3, #48	@ 0x30
 8000732:	b2da      	uxtb	r2, r3
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	701a      	strb	r2, [r3, #0]
        volt_str[1] = '.';
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	222e      	movs	r2, #46	@ 0x2e
 800073c:	705a      	strb	r2, [r3, #1]
        volt_str[2] = '0' + ((voltage_mv / 100) % 10);
 800073e:	19bb      	adds	r3, r7, r6
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	2164      	movs	r1, #100	@ 0x64
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff fcdf 	bl	8000108 <__udivsi3>
 800074a:	0003      	movs	r3, r0
 800074c:	b29b      	uxth	r3, r3
 800074e:	210a      	movs	r1, #10
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff fd5f 	bl	8000214 <__aeabi_uidivmod>
 8000756:	000b      	movs	r3, r1
 8000758:	b29b      	uxth	r3, r3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	3330      	adds	r3, #48	@ 0x30
 800075e:	b2da      	uxtb	r2, r3
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	709a      	strb	r2, [r3, #2]
        volt_str[3] = '0' + ((voltage_mv / 10) % 10);
 8000764:	19bb      	adds	r3, r7, r6
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	210a      	movs	r1, #10
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff fccc 	bl	8000108 <__udivsi3>
 8000770:	0003      	movs	r3, r0
 8000772:	b29b      	uxth	r3, r3
 8000774:	210a      	movs	r1, #10
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff fd4c 	bl	8000214 <__aeabi_uidivmod>
 800077c:	000b      	movs	r3, r1
 800077e:	b29b      	uxth	r3, r3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	3330      	adds	r3, #48	@ 0x30
 8000784:	b2da      	uxtb	r2, r3
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	70da      	strb	r2, [r3, #3]
        volt_str[4] = '0' + (voltage_mv % 10);
 800078a:	19bb      	adds	r3, r7, r6
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	210a      	movs	r1, #10
 8000790:	0018      	movs	r0, r3
 8000792:	f7ff fd3f 	bl	8000214 <__aeabi_uidivmod>
 8000796:	000b      	movs	r3, r1
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	3330      	adds	r3, #48	@ 0x30
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	711a      	strb	r2, [r3, #4]
        volt_str[5] = 0;
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	715a      	strb	r2, [r3, #5]
        DebugPrint(volt_str);
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 f8a1 	bl	80008f4 <DebugPrint>

        DebugPrint("V\r\n");
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <main+0x1c4>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 f89d 	bl	80008f4 <DebugPrint>

        // Wait 1 second
        HAL_Delay(1000);
 80007ba:	23fa      	movs	r3, #250	@ 0xfa
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fadc 	bl	8000d7c <HAL_Delay>
    {
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	e744      	b.n	8000652 <main+0x32>
 80007c8:	08003264 	.word	0x08003264
 80007cc:	08003280 	.word	0x08003280
 80007d0:	08003298 	.word	0x08003298
 80007d4:	00000ce4 	.word	0x00000ce4
 80007d8:	00000fff 	.word	0x00000fff
 80007dc:	080032bc 	.word	0x080032bc
 80007e0:	080032c8 	.word	0x080032c8
 80007e4:	080032cc 	.word	0x080032cc

080007e8 <Read_ADC_PA0>:
    }
}

uint16_t Read_ADC_PA0(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	0018      	movs	r0, r3
 80007f2:	2308      	movs	r3, #8
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f002 fcfc 	bl	80031f4 <memset>

    sConfig.Channel = ADC_CHANNEL_0;  // PA0
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
    sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	0152      	lsls	r2, r2, #5
 8000808:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800080a:	1d3a      	adds	r2, r7, #4
 800080c:	4b13      	ldr	r3, [pc, #76]	@ (800085c <Read_ADC_PA0+0x74>)
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fd87 	bl	8001324 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc);
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <Read_ADC_PA0+0x74>)
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fc47 	bl	80010ac <HAL_ADC_Start>

    if(HAL_ADC_PollForConversion(&hadc, 100) == HAL_OK) {
 800081e:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <Read_ADC_PA0+0x74>)
 8000820:	2164      	movs	r1, #100	@ 0x64
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fcd6 	bl	80011d4 <HAL_ADC_PollForConversion>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d10e      	bne.n	800084a <Read_ADC_PA0+0x62>
        uint16_t result = HAL_ADC_GetValue(&hadc);
 800082c:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <Read_ADC_PA0+0x74>)
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fd6c 	bl	800130c <HAL_ADC_GetValue>
 8000834:	0002      	movs	r2, r0
 8000836:	240e      	movs	r4, #14
 8000838:	193b      	adds	r3, r7, r4
 800083a:	801a      	strh	r2, [r3, #0]
        HAL_ADC_Stop(&hadc);
 800083c:	4b07      	ldr	r3, [pc, #28]	@ (800085c <Read_ADC_PA0+0x74>)
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fc88 	bl	8001154 <HAL_ADC_Stop>
        return result;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	e004      	b.n	8000854 <Read_ADC_PA0+0x6c>
    }

    HAL_ADC_Stop(&hadc);
 800084a:	4b04      	ldr	r3, [pc, #16]	@ (800085c <Read_ADC_PA0+0x74>)
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fc81 	bl	8001154 <HAL_ADC_Stop>
    return 0;
 8000852:	2300      	movs	r3, #0
}
 8000854:	0018      	movs	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	b005      	add	sp, #20
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	200000b0 	.word	0x200000b0

08000860 <MX_ADC_Init>:

void MX_ADC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000864:	4b1f      	ldr	r3, [pc, #124]	@ (80008e4 <MX_ADC_Init+0x84>)
 8000866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000868:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <MX_ADC_Init+0x84>)
 800086a:	2180      	movs	r1, #128	@ 0x80
 800086c:	0089      	lsls	r1, r1, #2
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	@ 0x34

    hadc.Instance = ADC1;
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_ADC_Init+0x88>)
 8000874:	4a1d      	ldr	r2, [pc, #116]	@ (80008ec <MX_ADC_Init+0x8c>)
 8000876:	601a      	str	r2, [r3, #0]
    hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_ADC_Init+0x88>)
 800087a:	2280      	movs	r2, #128	@ 0x80
 800087c:	05d2      	lsls	r2, r2, #23
 800087e:	605a      	str	r2, [r3, #4]
    hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_ADC_Init+0x88>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
    hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_ADC_Init+0x88>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
    hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800088c:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_ADC_Init+0x88>)
 800088e:	2201      	movs	r2, #1
 8000890:	611a      	str	r2, [r3, #16]
    hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_ADC_Init+0x88>)
 8000894:	2204      	movs	r2, #4
 8000896:	615a      	str	r2, [r3, #20]
    hadc.Init.LowPowerAutoWait = DISABLE;
 8000898:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <MX_ADC_Init+0x88>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
    hadc.Init.ContinuousConvMode = DISABLE;
 800089e:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_ADC_Init+0x88>)
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	5499      	strb	r1, [r3, r2]
    hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_ADC_Init+0x88>)
 80008a8:	22c2      	movs	r2, #194	@ 0xc2
 80008aa:	32ff      	adds	r2, #255	@ 0xff
 80008ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hadc.Init.DMAContinuousRequests = DISABLE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_ADC_Init+0x88>)
 80008b0:	222c      	movs	r2, #44	@ 0x2c
 80008b2:	2100      	movs	r1, #0
 80008b4:	5499      	strb	r1, [r3, r2]
    hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_ADC_Init+0x88>)
 80008b8:	2280      	movs	r2, #128	@ 0x80
 80008ba:	0152      	lsls	r2, r2, #5
 80008bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hadc.Init.OversamplingMode = DISABLE;
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <MX_ADC_Init+0x88>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    HAL_ADC_Init(&hadc);
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_ADC_Init+0x88>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fa7c 	bl	8000dc4 <HAL_ADC_Init>
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_ADC_Init+0x88>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fee9 	bl	80016a8 <HAL_ADCEx_Calibration_Start>

    DebugPrint("ADC initialized for PA0\r\n");
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_ADC_Init+0x90>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 f80b 	bl	80008f4 <DebugPrint>
}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	200000b0 	.word	0x200000b0
 80008ec:	40012400 	.word	0x40012400
 80008f0:	080032d0 	.word	0x080032d0

080008f4 <DebugPrint>:

void DebugPrint(const char* msg)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
    uint16_t len = 0;
 80008fc:	230e      	movs	r3, #14
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	2200      	movs	r2, #0
 8000902:	801a      	strh	r2, [r3, #0]
    while(msg[len]) len++;
 8000904:	e005      	b.n	8000912 <DebugPrint+0x1e>
 8000906:	210e      	movs	r1, #14
 8000908:	187b      	adds	r3, r7, r1
 800090a:	881a      	ldrh	r2, [r3, #0]
 800090c:	187b      	adds	r3, r7, r1
 800090e:	3201      	adds	r2, #1
 8000910:	801a      	strh	r2, [r3, #0]
 8000912:	210e      	movs	r1, #14
 8000914:	187b      	adds	r3, r7, r1
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	18d3      	adds	r3, r2, r3
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1f1      	bne.n	8000906 <DebugPrint+0x12>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 1000);
 8000922:	23fa      	movs	r3, #250	@ 0xfa
 8000924:	009c      	lsls	r4, r3, #2
 8000926:	187b      	adds	r3, r7, r1
 8000928:	881a      	ldrh	r2, [r3, #0]
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <DebugPrint+0x48>)
 800092e:	0023      	movs	r3, r4
 8000930:	f001 ff46 	bl	80027c0 <HAL_UART_Transmit>
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b005      	add	sp, #20
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	20000028 	.word	0x20000028

08000940 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_USART2_UART_Init+0x60>)
 8000946:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_USART2_UART_Init+0x60>)
 800094a:	2180      	movs	r1, #128	@ 0x80
 800094c:	0289      	lsls	r1, r1, #10
 800094e:	430a      	orrs	r2, r1
 8000950:	639a      	str	r2, [r3, #56]	@ 0x38

    huart2.Instance = USART2;
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_USART2_UART_Init+0x64>)
 8000954:	4a14      	ldr	r2, [pc, #80]	@ (80009a8 <MX_USART2_UART_Init+0x68>)
 8000956:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <MX_USART2_UART_Init+0x64>)
 800095a:	22e1      	movs	r2, #225	@ 0xe1
 800095c:	0252      	lsls	r2, r2, #9
 800095e:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000960:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <MX_USART2_UART_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_USART2_UART_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <MX_USART2_UART_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX;
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_USART2_UART_Init+0x64>)
 8000974:	2208      	movs	r2, #8
 8000976:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <MX_USART2_UART_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_USART2_UART_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <MX_USART2_UART_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_USART2_UART_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_UART_Init(&huart2);
 8000990:	4b04      	ldr	r3, [pc, #16]	@ (80009a4 <MX_USART2_UART_Init+0x64>)
 8000992:	0018      	movs	r0, r3
 8000994:	f001 fec0 	bl	8002718 <HAL_UART_Init>
}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	40021000 	.word	0x40021000
 80009a4:	20000028 	.word	0x20000028
 80009a8:	40004400 	.word	0x40004400

080009ac <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_GPIO_Init+0x80>)
 80009b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <MX_GPIO_Init+0x80>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	430a      	orrs	r2, r1
 80009bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009be:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_GPIO_Init+0x80>)
 80009c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c2:	2201      	movs	r2, #1
 80009c4:	4013      	ands	r3, r2
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	0018      	movs	r0, r3
 80009ce:	2314      	movs	r3, #20
 80009d0:	001a      	movs	r2, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	f002 fc0e 	bl	80031f4 <memset>

    // PA0 as analog input for ADC
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2203      	movs	r2, #3
 80009e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	1d3a      	adds	r2, r7, #4
 80009ec:	23a0      	movs	r3, #160	@ 0xa0
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	0011      	movs	r1, r2
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 ffaa 	bl	800194c <HAL_GPIO_Init>

    // USART2 TX (PA2)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2204      	movs	r2, #4
 80009fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2202      	movs	r2, #2
 8000a02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2204      	movs	r2, #4
 8000a14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	1d3a      	adds	r2, r7, #4
 8000a18:	23a0      	movs	r3, #160	@ 0xa0
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 ff94 	bl	800194c <HAL_GPIO_Init>
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b006      	add	sp, #24
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000

08000a30 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b093      	sub	sp, #76	@ 0x4c
 8000a34:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	2414      	movs	r4, #20
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	2334      	movs	r3, #52	@ 0x34
 8000a3e:	001a      	movs	r2, r3
 8000a40:	2100      	movs	r1, #0
 8000a42:	f002 fbd7 	bl	80031f4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a46:	003b      	movs	r3, r7
 8000a48:	0018      	movs	r0, r3
 8000a4a:	2314      	movs	r3, #20
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f002 fbd0 	bl	80031f4 <memset>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a54:	0021      	movs	r1, r4
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2210      	movs	r2, #16
 8000a5a:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2201      	movs	r2, #1
 8000a60:	619a      	str	r2, [r3, #24]
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	22a0      	movs	r2, #160	@ 0xa0
 8000a6c:	0212      	lsls	r2, r2, #8
 8000a6e:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f001 f8cd 	bl	8001c18 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	220f      	movs	r2, #15
 8000a82:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a84:	003b      	movs	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8a:	003b      	movs	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a90:	003b      	movs	r3, r7
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a96:	003b      	movs	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000a9c:	003b      	movs	r3, r7
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 fc35 	bl	8002310 <HAL_RCC_ClockConfig>
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b013      	add	sp, #76	@ 0x4c
 8000aac:	bd90      	pop	{r4, r7, pc}
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab4:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <HAL_MspInit+0x24>)
 8000ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_MspInit+0x24>)
 8000aba:	2101      	movs	r1, #1
 8000abc:	430a      	orrs	r2, r1
 8000abe:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <HAL_MspInit+0x24>)
 8000ac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <HAL_MspInit+0x24>)
 8000ac6:	2180      	movs	r1, #128	@ 0x80
 8000ac8:	0549      	lsls	r1, r1, #21
 8000aca:	430a      	orrs	r2, r1
 8000acc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b089      	sub	sp, #36	@ 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	240c      	movs	r4, #12
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	2314      	movs	r3, #20
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f002 fb82 	bl	80031f4 <memset>
  if(hadc->Instance==ADC1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a14      	ldr	r2, [pc, #80]	@ (8000b48 <HAL_ADC_MspInit+0x70>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d122      	bne.n	8000b40 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afa:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <HAL_ADC_MspInit+0x74>)
 8000afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <HAL_ADC_MspInit+0x74>)
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	0089      	lsls	r1, r1, #2
 8000b04:	430a      	orrs	r2, r1
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <HAL_ADC_MspInit+0x74>)
 8000b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_ADC_MspInit+0x74>)
 8000b0e:	2101      	movs	r1, #1
 8000b10:	430a      	orrs	r2, r1
 8000b12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b14:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <HAL_ADC_MspInit+0x74>)
 8000b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-CK_IN     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2203      	movs	r2, #3
 8000b2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	193a      	adds	r2, r7, r4
 8000b34:	23a0      	movs	r3, #160	@ 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	0011      	movs	r1, r2
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 ff06 	bl	800194c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b009      	add	sp, #36	@ 0x24
 8000b46:	bd90      	pop	{r4, r7, pc}
 8000b48:	40012400 	.word	0x40012400
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b089      	sub	sp, #36	@ 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	240c      	movs	r4, #12
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2314      	movs	r3, #20
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f002 fb46 	bl	80031f4 <memset>
  if(huart->Instance==USART2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a18      	ldr	r2, [pc, #96]	@ (8000bd0 <HAL_UART_MspInit+0x80>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d129      	bne.n	8000bc6 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b78:	2180      	movs	r1, #128	@ 0x80
 8000b7a:	0289      	lsls	r1, r1, #10
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b84:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b90:	2201      	movs	r2, #1
 8000b92:	4013      	ands	r3, r2
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000b98:	0021      	movs	r1, r4
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2203      	movs	r2, #3
 8000bb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	187a      	adds	r2, r7, r1
 8000bba:	23a0      	movs	r3, #160	@ 0xa0
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f000 fec3 	bl	800194c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b009      	add	sp, #36	@ 0x24
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	00008004 	.word	0x00008004

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	46c0      	nop			@ (mov r8, r8)
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f89e 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c18:	4813      	ldr	r0, [pc, #76]	@ (8000c68 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c1c:	f7ff fff7 	bl	8000c0e <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000c20:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <LoopForever+0x6>)
    LDR R1, [R0]
 8000c22:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000c24:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <LoopForever+0xa>)
    CMP R1, R2
 8000c28:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000c2a:	d105      	bne.n	8000c38 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000c2c:	4811      	ldr	r0, [pc, #68]	@ (8000c74 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000c2e:	4912      	ldr	r1, [pc, #72]	@ (8000c78 <LoopForever+0x12>)
    STR R1, [R0]
 8000c30:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000c32:	4812      	ldr	r0, [pc, #72]	@ (8000c7c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c34:	4912      	ldr	r1, [pc, #72]	@ (8000c80 <LoopForever+0x1a>)
    STR R1, [R0]
 8000c36:	6001      	str	r1, [r0, #0]

08000c38 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	4812      	ldr	r0, [pc, #72]	@ (8000c84 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000c3a:	4913      	ldr	r1, [pc, #76]	@ (8000c88 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000c3c:	4a13      	ldr	r2, [pc, #76]	@ (8000c8c <LoopForever+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a10      	ldr	r2, [pc, #64]	@ (8000c90 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000c50:	4c10      	ldr	r4, [pc, #64]	@ (8000c94 <LoopForever+0x2e>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f002 fad1 	bl	8003204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fcdd 	bl	8000620 <main>

08000c66 <LoopForever>:

LoopForever:
    b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
   ldr   r0, =_estack
 8000c68:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000c6c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000c70:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000c74:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000c78:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c7c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c80:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c8c:	08003368 	.word	0x08003368
  ldr r2, =_sbss
 8000c90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c94:	20000110 	.word	0x20000110

08000c98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_COMP_IRQHandler>
	...

08000c9c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_Init+0x3c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_Init+0x3c>)
 8000cae:	2140      	movs	r1, #64	@ 0x40
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 f811 	bl	8000cdc <HAL_InitTick>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e001      	b.n	8000cca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc6:	f7ff fef3 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <HAL_InitTick+0x5c>)
 8000ce6:	681c      	ldr	r4, [r3, #0]
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <HAL_InitTick+0x60>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	0019      	movs	r1, r3
 8000cee:	23fa      	movs	r3, #250	@ 0xfa
 8000cf0:	0098      	lsls	r0, r3, #2
 8000cf2:	f7ff fa09 	bl	8000108 <__udivsi3>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f7ff fa04 	bl	8000108 <__udivsi3>
 8000d00:	0003      	movs	r3, r0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 fe15 	bl	8001932 <HAL_SYSTICK_Config>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e00f      	b.n	8000d30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d80b      	bhi.n	8000d2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 fdf2 	bl	8001908 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_InitTick+0x64>)
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b003      	add	sp, #12
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	18d2      	adds	r2, r2, r3
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	20000008 	.word	0x20000008
 8000d64:	2000010c 	.word	0x2000010c

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	@ (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	2000010c 	.word	0x2000010c

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff fff0 	bl	8000d68 <HAL_GetTick>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3301      	adds	r3, #1
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	189b      	adds	r3, r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	f7ff ffe0 	bl	8000d68 <HAL_GetTick>
 8000da8:	0002      	movs	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b004      	add	sp, #16
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e159      	b.n	800108a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10a      	bne.n	8000df4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2250      	movs	r2, #80	@ 0x50
 8000de8:	2100      	movs	r1, #0
 8000dea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff fe72 	bl	8000ad8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000df8:	2210      	movs	r2, #16
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b10      	cmp	r3, #16
 8000dfe:	d005      	beq.n	8000e0c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2204      	movs	r2, #4
 8000e08:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e0a:	d00b      	beq.n	8000e24 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e10:	2210      	movs	r2, #16
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2250      	movs	r2, #80	@ 0x50
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e132      	b.n	800108a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e28:	4a9a      	ldr	r2, [pc, #616]	@ (8001094 <HAL_ADC_Init+0x2d0>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d108      	bne.n	8000e54 <HAL_ADC_Init+0x90>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d101      	bne.n	8000e54 <HAL_ADC_Init+0x90>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <HAL_ADC_Init+0x92>
 8000e54:	2300      	movs	r3, #0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d149      	bne.n	8000eee <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	23c0      	movs	r3, #192	@ 0xc0
 8000e60:	061b      	lsls	r3, r3, #24
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d00b      	beq.n	8000e7e <HAL_ADC_Init+0xba>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	2380      	movs	r3, #128	@ 0x80
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d005      	beq.n	8000e7e <HAL_ADC_Init+0xba>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	2380      	movs	r3, #128	@ 0x80
 8000e78:	061b      	lsls	r3, r3, #24
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d111      	bne.n	8000ea2 <HAL_ADC_Init+0xde>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	691a      	ldr	r2, [r3, #16]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	0892      	lsrs	r2, r2, #2
 8000e8c:	611a      	str	r2, [r3, #16]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6919      	ldr	r1, [r3, #16]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	e014      	b.n	8000ecc <HAL_ADC_Init+0x108>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	0892      	lsrs	r2, r2, #2
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	4b79      	ldr	r3, [pc, #484]	@ (8001098 <HAL_ADC_Init+0x2d4>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b78      	ldr	r3, [pc, #480]	@ (8001098 <HAL_ADC_Init+0x2d4>)
 8000eb8:	4978      	ldr	r1, [pc, #480]	@ (800109c <HAL_ADC_Init+0x2d8>)
 8000eba:	400a      	ands	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	4b76      	ldr	r3, [pc, #472]	@ (8001098 <HAL_ADC_Init+0x2d4>)
 8000ec0:	6819      	ldr	r1, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	4b74      	ldr	r3, [pc, #464]	@ (8001098 <HAL_ADC_Init+0x2d4>)
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2118      	movs	r1, #24
 8000ed8:	438a      	bics	r2, r1
 8000eda:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	68d9      	ldr	r1, [r3, #12]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000eee:	4b6a      	ldr	r3, [pc, #424]	@ (8001098 <HAL_ADC_Init+0x2d4>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b69      	ldr	r3, [pc, #420]	@ (8001098 <HAL_ADC_Init+0x2d4>)
 8000ef4:	496a      	ldr	r1, [pc, #424]	@ (80010a0 <HAL_ADC_Init+0x2dc>)
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000efa:	4b67      	ldr	r3, [pc, #412]	@ (8001098 <HAL_ADC_Init+0x2d4>)
 8000efc:	6819      	ldr	r1, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f02:	065a      	lsls	r2, r3, #25
 8000f04:	4b64      	ldr	r3, [pc, #400]	@ (8001098 <HAL_ADC_Init+0x2d4>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	055b      	lsls	r3, r3, #21
 8000f14:	4013      	ands	r3, r2
 8000f16:	d108      	bne.n	8000f2a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2180      	movs	r1, #128	@ 0x80
 8000f24:	0549      	lsls	r1, r1, #21
 8000f26:	430a      	orrs	r2, r1
 8000f28:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	495b      	ldr	r1, [pc, #364]	@ (80010a4 <HAL_ADC_Init+0x2e0>)
 8000f36:	400a      	ands	r2, r1
 8000f38:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68d9      	ldr	r1, [r3, #12]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d101      	bne.n	8000f50 <HAL_ADC_Init+0x18c>
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	e000      	b.n	8000f52 <HAL_ADC_Init+0x18e>
 8000f50:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f52:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2020      	movs	r0, #32
 8000f58:	5c1b      	ldrb	r3, [r3, r0]
 8000f5a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f5c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	202c      	movs	r0, #44	@ 0x2c
 8000f62:	5c1b      	ldrb	r3, [r3, r0]
 8000f64:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f66:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f6c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000f74:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f7c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f8a:	23c2      	movs	r3, #194	@ 0xc2
 8000f8c:	33ff      	adds	r3, #255	@ 0xff
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d00b      	beq.n	8000faa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68d9      	ldr	r1, [r3, #12]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2221      	movs	r2, #33	@ 0x21
 8000fae:	5c9b      	ldrb	r3, [r3, r2]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d11a      	bne.n	8000fea <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	5c9b      	ldrb	r3, [r3, r2]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d109      	bne.n	8000fd2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2180      	movs	r1, #128	@ 0x80
 8000fca:	0249      	lsls	r1, r1, #9
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	e00b      	b.n	8000fea <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d11f      	bne.n	8001032 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	492a      	ldr	r1, [pc, #168]	@ (80010a8 <HAL_ADC_Init+0x2e4>)
 8000ffe:	400a      	ands	r2, r1
 8001000:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6919      	ldr	r1, [r3, #16]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001010:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001016:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2101      	movs	r1, #1
 800102c:	430a      	orrs	r2, r1
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	e00e      	b.n	8001050 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2201      	movs	r2, #1
 800103a:	4013      	ands	r3, r2
 800103c:	2b01      	cmp	r3, #1
 800103e:	d107      	bne.n	8001050 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2101      	movs	r1, #1
 800104c:	438a      	bics	r2, r1
 800104e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	695a      	ldr	r2, [r3, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2107      	movs	r1, #7
 800105c:	438a      	bics	r2, r1
 800105e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6959      	ldr	r1, [r3, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800107c:	2203      	movs	r2, #3
 800107e:	4393      	bics	r3, r2
 8001080:	2201      	movs	r2, #1
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	0018      	movs	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	fffffefd 	.word	0xfffffefd
 8001098:	40012708 	.word	0x40012708
 800109c:	ffc3ffff 	.word	0xffc3ffff
 80010a0:	fdffffff 	.word	0xfdffffff
 80010a4:	fffe0219 	.word	0xfffe0219
 80010a8:	fffffc03 	.word	0xfffffc03

080010ac <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b4:	230f      	movs	r3, #15
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2204      	movs	r2, #4
 80010c4:	4013      	ands	r3, r2
 80010c6:	d138      	bne.n	800113a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2250      	movs	r2, #80	@ 0x50
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Start+0x2a>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e038      	b.n	8001148 <HAL_ADC_Start+0x9c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2250      	movs	r2, #80	@ 0x50
 80010da:	2101      	movs	r1, #1
 80010dc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d007      	beq.n	80010f6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80010e6:	230f      	movs	r3, #15
 80010e8:	18fc      	adds	r4, r7, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 f99f 	bl	8001430 <ADC_Enable>
 80010f2:	0003      	movs	r3, r0
 80010f4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010f6:	230f      	movs	r3, #15
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d120      	bne.n	8001142 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001104:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <HAL_ADC_Start+0xa4>)
 8001106:	4013      	ands	r3, r2
 8001108:	2280      	movs	r2, #128	@ 0x80
 800110a:	0052      	lsls	r2, r2, #1
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2250      	movs	r2, #80	@ 0x50
 800111c:	2100      	movs	r1, #0
 800111e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	221c      	movs	r2, #28
 8001126:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2104      	movs	r1, #4
 8001134:	430a      	orrs	r2, r1
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	e003      	b.n	8001142 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800113a:	230f      	movs	r3, #15
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	2202      	movs	r2, #2
 8001140:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001142:	230f      	movs	r3, #15
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	781b      	ldrb	r3, [r3, #0]
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b005      	add	sp, #20
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	fffff0fe 	.word	0xfffff0fe

08001154 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2250      	movs	r2, #80	@ 0x50
 8001168:	5c9b      	ldrb	r3, [r3, r2]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Stop+0x1e>
 800116e:	2302      	movs	r3, #2
 8001170:	e029      	b.n	80011c6 <HAL_ADC_Stop+0x72>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2250      	movs	r2, #80	@ 0x50
 8001176:	2101      	movs	r1, #1
 8001178:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800117a:	250f      	movs	r5, #15
 800117c:	197c      	adds	r4, r7, r5
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	0018      	movs	r0, r3
 8001182:	f000 fa24 	bl	80015ce <ADC_ConversionStop>
 8001186:	0003      	movs	r3, r0
 8001188:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800118a:	197b      	adds	r3, r7, r5
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d112      	bne.n	80011b8 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001192:	197c      	adds	r4, r7, r5
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	0018      	movs	r0, r3
 8001198:	f000 f9b2 	bl	8001500 <ADC_Disable>
 800119c:	0003      	movs	r3, r0
 800119e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80011a0:	197b      	adds	r3, r7, r5
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d107      	bne.n	80011b8 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ac:	4a08      	ldr	r2, [pc, #32]	@ (80011d0 <HAL_ADC_Stop+0x7c>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	2201      	movs	r2, #1
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2250      	movs	r2, #80	@ 0x50
 80011bc:	2100      	movs	r1, #0
 80011be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80011c0:	230f      	movs	r3, #15
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	781b      	ldrb	r3, [r3, #0]
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b004      	add	sp, #16
 80011cc:	bdb0      	pop	{r4, r5, r7, pc}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	fffffefe 	.word	0xfffffefe

080011d4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d102      	bne.n	80011f4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80011ee:	2308      	movs	r3, #8
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	e014      	b.n	800121e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2201      	movs	r2, #1
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10b      	bne.n	800121a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001206:	2220      	movs	r2, #32
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2250      	movs	r2, #80	@ 0x50
 8001212:	2100      	movs	r1, #0
 8001214:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e072      	b.n	8001300 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800121a:	230c      	movs	r3, #12
 800121c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800121e:	f7ff fda3 	bl	8000d68 <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001226:	e01f      	b.n	8001268 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	d01c      	beq.n	8001268 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <HAL_ADC_PollForConversion+0x70>
 8001234:	f7ff fd98 	bl	8000d68 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d211      	bcs.n	8001268 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	d10b      	bne.n	8001268 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001254:	2204      	movs	r2, #4
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2250      	movs	r2, #80	@ 0x50
 8001260:	2100      	movs	r1, #0
 8001262:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e04b      	b.n	8001300 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	d0d9      	beq.n	8001228 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001278:	2280      	movs	r2, #128	@ 0x80
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	23c0      	movs	r3, #192	@ 0xc0
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	4013      	ands	r3, r2
 800128e:	d12e      	bne.n	80012ee <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2220      	movs	r2, #32
 8001294:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001296:	2b00      	cmp	r3, #0
 8001298:	d129      	bne.n	80012ee <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2208      	movs	r2, #8
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d122      	bne.n	80012ee <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2204      	movs	r2, #4
 80012b0:	4013      	ands	r3, r2
 80012b2:	d110      	bne.n	80012d6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	210c      	movs	r1, #12
 80012c0:	438a      	bics	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <HAL_ADC_PollForConversion+0x134>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	2201      	movs	r2, #1
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80012d4:	e00b      	b.n	80012ee <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012da:	2220      	movs	r2, #32
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e6:	2201      	movs	r2, #1
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d103      	bne.n	80012fe <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	220c      	movs	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b004      	add	sp, #16
 8001306:	bd80      	pop	{r7, pc}
 8001308:	fffffefe 	.word	0xfffffefe

0800130c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2250      	movs	r2, #80	@ 0x50
 8001332:	5c9b      	ldrb	r3, [r3, r2]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_ADC_ConfigChannel+0x18>
 8001338:	2302      	movs	r3, #2
 800133a:	e06c      	b.n	8001416 <HAL_ADC_ConfigChannel+0xf2>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2250      	movs	r2, #80	@ 0x50
 8001340:	2101      	movs	r1, #1
 8001342:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2204      	movs	r2, #4
 800134c:	4013      	ands	r3, r2
 800134e:	d00b      	beq.n	8001368 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001354:	2220      	movs	r2, #32
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2250      	movs	r2, #80	@ 0x50
 8001360:	2100      	movs	r1, #0
 8001362:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e056      	b.n	8001416 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4a2c      	ldr	r2, [pc, #176]	@ (8001420 <HAL_ADC_ConfigChannel+0xfc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d028      	beq.n	80013c4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	035b      	lsls	r3, r3, #13
 800137e:	0b5a      	lsrs	r2, r3, #13
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	02db      	lsls	r3, r3, #11
 8001390:	4013      	ands	r3, r2
 8001392:	d009      	beq.n	80013a8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001394:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <HAL_ADC_ConfigChannel+0x100>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <HAL_ADC_ConfigChannel+0x100>)
 800139a:	2180      	movs	r1, #128	@ 0x80
 800139c:	0409      	lsls	r1, r1, #16
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80013a2:	200a      	movs	r0, #10
 80013a4:	f000 f960 	bl	8001668 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	029b      	lsls	r3, r3, #10
 80013b0:	4013      	ands	r3, r2
 80013b2:	d02b      	beq.n	800140c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <HAL_ADC_ConfigChannel+0x100>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <HAL_ADC_ConfigChannel+0x100>)
 80013ba:	2180      	movs	r1, #128	@ 0x80
 80013bc:	03c9      	lsls	r1, r1, #15
 80013be:	430a      	orrs	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	e023      	b.n	800140c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	035b      	lsls	r3, r3, #13
 80013d0:	0b5b      	lsrs	r3, r3, #13
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	400a      	ands	r2, r1
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	02db      	lsls	r3, r3, #11
 80013e4:	4013      	ands	r3, r2
 80013e6:	d005      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <HAL_ADC_ConfigChannel+0x100>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <HAL_ADC_ConfigChannel+0x100>)
 80013ee:	490e      	ldr	r1, [pc, #56]	@ (8001428 <HAL_ADC_ConfigChannel+0x104>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	@ 0x80
 80013fa:	029b      	lsls	r3, r3, #10
 80013fc:	4013      	ands	r3, r2
 80013fe:	d005      	beq.n	800140c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <HAL_ADC_ConfigChannel+0x100>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <HAL_ADC_ConfigChannel+0x100>)
 8001406:	4909      	ldr	r1, [pc, #36]	@ (800142c <HAL_ADC_ConfigChannel+0x108>)
 8001408:	400a      	ands	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2250      	movs	r2, #80	@ 0x50
 8001410:	2100      	movs	r1, #0
 8001412:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b002      	add	sp, #8
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	00001001 	.word	0x00001001
 8001424:	40012708 	.word	0x40012708
 8001428:	ff7fffff 	.word	0xff7fffff
 800142c:	ffbfffff 	.word	0xffbfffff

08001430 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2203      	movs	r2, #3
 8001444:	4013      	ands	r3, r2
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <ADC_Enable+0x2c>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2201      	movs	r2, #1
 8001452:	4013      	ands	r3, r2
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <ADC_Enable+0x2c>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <ADC_Enable+0x2e>
 800145c:	2300      	movs	r3, #0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d146      	bne.n	80014f0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4a24      	ldr	r2, [pc, #144]	@ (80014fc <ADC_Enable+0xcc>)
 800146a:	4013      	ands	r3, r2
 800146c:	d00d      	beq.n	800148a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001472:	2210      	movs	r2, #16
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	2201      	movs	r2, #1
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e033      	b.n	80014f2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	430a      	orrs	r2, r1
 8001498:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800149a:	2001      	movs	r0, #1
 800149c:	f000 f8e4 	bl	8001668 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80014a0:	f7ff fc62 	bl	8000d68 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014a8:	e01b      	b.n	80014e2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014aa:	f7ff fc5d 	bl	8000d68 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b0a      	cmp	r3, #10
 80014b6:	d914      	bls.n	80014e2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2201      	movs	r2, #1
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d00d      	beq.n	80014e2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ca:	2210      	movs	r2, #16
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	2201      	movs	r2, #1
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e007      	b.n	80014f2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2201      	movs	r2, #1
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d1dc      	bne.n	80014aa <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b004      	add	sp, #16
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	80000017 	.word	0x80000017

08001500 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2203      	movs	r2, #3
 8001514:	4013      	ands	r3, r2
 8001516:	2b01      	cmp	r3, #1
 8001518:	d108      	bne.n	800152c <ADC_Disable+0x2c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2201      	movs	r2, #1
 8001522:	4013      	ands	r3, r2
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <ADC_Disable+0x2c>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <ADC_Disable+0x2e>
 800152c:	2300      	movs	r3, #0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d048      	beq.n	80015c4 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2205      	movs	r2, #5
 800153a:	4013      	ands	r3, r2
 800153c:	2b01      	cmp	r3, #1
 800153e:	d110      	bne.n	8001562 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2102      	movs	r1, #2
 800154c:	430a      	orrs	r2, r1
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2203      	movs	r2, #3
 8001556:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001558:	f7ff fc06 	bl	8000d68 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001560:	e029      	b.n	80015b6 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001566:	2210      	movs	r2, #16
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001572:	2201      	movs	r2, #1
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e023      	b.n	80015c6 <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800157e:	f7ff fbf3 	bl	8000d68 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b0a      	cmp	r3, #10
 800158a:	d914      	bls.n	80015b6 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2201      	movs	r2, #1
 8001594:	4013      	ands	r3, r2
 8001596:	2b01      	cmp	r3, #1
 8001598:	d10d      	bne.n	80015b6 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159e:	2210      	movs	r2, #16
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	2201      	movs	r2, #1
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e007      	b.n	80015c6 <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2201      	movs	r2, #1
 80015be:	4013      	ands	r3, r2
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d0dc      	beq.n	800157e <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	0018      	movs	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b004      	add	sp, #16
 80015cc:	bd80      	pop	{r7, pc}

080015ce <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2204      	movs	r2, #4
 80015e2:	4013      	ands	r3, r2
 80015e4:	d03a      	beq.n	800165c <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2204      	movs	r2, #4
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d10d      	bne.n	8001610 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2202      	movs	r2, #2
 80015fc:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80015fe:	d107      	bne.n	8001610 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2110      	movs	r1, #16
 800160c:	430a      	orrs	r2, r1
 800160e:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001610:	f7ff fbaa 	bl	8000d68 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001618:	e01a      	b.n	8001650 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800161a:	f7ff fba5 	bl	8000d68 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b0a      	cmp	r3, #10
 8001626:	d913      	bls.n	8001650 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2204      	movs	r2, #4
 8001630:	4013      	ands	r3, r2
 8001632:	d00d      	beq.n	8001650 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001638:	2210      	movs	r2, #16
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001644:	2201      	movs	r2, #1
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e006      	b.n	800165e <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2204      	movs	r2, #4
 8001658:	4013      	ands	r3, r2
 800165a:	d1de      	bne.n	800161a <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	b004      	add	sp, #16
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <ADC_DelayMicroSecond+0x38>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	490b      	ldr	r1, [pc, #44]	@ (80016a4 <ADC_DelayMicroSecond+0x3c>)
 8001676:	0018      	movs	r0, r3
 8001678:	f7fe fd46 	bl	8000108 <__udivsi3>
 800167c:	0003      	movs	r3, r0
 800167e:	001a      	movs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4353      	muls	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001686:	e002      	b.n	800168e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3b01      	subs	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f9      	bne.n	8001688 <ADC_DelayMicroSecond+0x20>
  }
}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b004      	add	sp, #16
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	20000000 	.word	0x20000000
 80016a4:	000f4240 	.word	0x000f4240

080016a8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b2:	2317      	movs	r3, #23
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SingleDiff);

  /* Process locked */
  __HAL_LOCK(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2250      	movs	r2, #80	@ 0x50
 80016c6:	5c9b      	ldrb	r3, [r3, r2]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_ADCEx_Calibration_Start+0x28>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e083      	b.n	80017d8 <HAL_ADCEx_Calibration_Start+0x130>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2250      	movs	r2, #80	@ 0x50
 80016d4:	2101      	movs	r1, #1
 80016d6:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2203      	movs	r2, #3
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_ADCEx_Calibration_Start+0x50>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2201      	movs	r2, #1
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_ADCEx_Calibration_Start+0x50>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_ADCEx_Calibration_Start+0x52>
 80016f8:	2300      	movs	r3, #0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d15b      	bne.n	80017b6 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001702:	4a37      	ldr	r2, [pc, #220]	@ (80017e0 <HAL_ADCEx_Calibration_Start+0x138>)
 8001704:	4013      	ands	r3, r2
 8001706:	2202      	movs	r2, #2
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2203      	movs	r2, #3
 8001716:	4013      	ands	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2103      	movs	r1, #3
 8001726:	438a      	bics	r2, r1
 8001728:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2180      	movs	r1, #128	@ 0x80
 8001736:	0609      	lsls	r1, r1, #24
 8001738:	430a      	orrs	r2, r1
 800173a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800173c:	f7ff fb14 	bl	8000d68 <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001744:	e01d      	b.n	8001782 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001746:	f7ff fb0f 	bl	8000d68 <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b0a      	cmp	r3, #10
 8001752:	d916      	bls.n	8001782 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	0fdb      	lsrs	r3, r3, #31
 800175c:	07da      	lsls	r2, r3, #31
 800175e:	2380      	movs	r3, #128	@ 0x80
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	429a      	cmp	r2, r3
 8001764:	d10d      	bne.n	8001782 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800176a:	2212      	movs	r2, #18
 800176c:	4393      	bics	r3, r2
 800176e:	2210      	movs	r2, #16
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2250      	movs	r2, #80	@ 0x50
 800177a:	2100      	movs	r1, #0
 800177c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e02a      	b.n	80017d8 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	0fdb      	lsrs	r3, r3, #31
 800178a:	07da      	lsls	r2, r3, #31
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	061b      	lsls	r3, r3, #24
 8001790:	429a      	cmp	r2, r3
 8001792:	d0d8      	beq.n	8001746 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68d9      	ldr	r1, [r3, #12]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a8:	2203      	movs	r2, #3
 80017aa:	4393      	bics	r3, r2
 80017ac:	2201      	movs	r2, #1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80017b4:	e009      	b.n	80017ca <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ba:	2220      	movs	r2, #32
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80017c2:	2317      	movs	r3, #23
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2250      	movs	r2, #80	@ 0x50
 80017ce:	2100      	movs	r1, #0
 80017d0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80017d2:	2317      	movs	r3, #23
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	781b      	ldrb	r3, [r3, #0]
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b006      	add	sp, #24
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	fffffefd 	.word	0xfffffefd

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	0002      	movs	r2, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80017f8:	d828      	bhi.n	800184c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017fa:	4a2f      	ldr	r2, [pc, #188]	@ (80018b8 <__NVIC_SetPriority+0xd4>)
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b25b      	sxtb	r3, r3
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	33c0      	adds	r3, #192	@ 0xc0
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	589b      	ldr	r3, [r3, r2]
 800180a:	1dfa      	adds	r2, r7, #7
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	0011      	movs	r1, r2
 8001810:	2203      	movs	r2, #3
 8001812:	400a      	ands	r2, r1
 8001814:	00d2      	lsls	r2, r2, #3
 8001816:	21ff      	movs	r1, #255	@ 0xff
 8001818:	4091      	lsls	r1, r2
 800181a:	000a      	movs	r2, r1
 800181c:	43d2      	mvns	r2, r2
 800181e:	401a      	ands	r2, r3
 8001820:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	019b      	lsls	r3, r3, #6
 8001826:	22ff      	movs	r2, #255	@ 0xff
 8001828:	401a      	ands	r2, r3
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	0018      	movs	r0, r3
 8001830:	2303      	movs	r3, #3
 8001832:	4003      	ands	r3, r0
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001838:	481f      	ldr	r0, [pc, #124]	@ (80018b8 <__NVIC_SetPriority+0xd4>)
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b25b      	sxtb	r3, r3
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	430a      	orrs	r2, r1
 8001844:	33c0      	adds	r3, #192	@ 0xc0
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800184a:	e031      	b.n	80018b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800184c:	4a1b      	ldr	r2, [pc, #108]	@ (80018bc <__NVIC_SetPriority+0xd8>)
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	0019      	movs	r1, r3
 8001854:	230f      	movs	r3, #15
 8001856:	400b      	ands	r3, r1
 8001858:	3b08      	subs	r3, #8
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3306      	adds	r3, #6
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	18d3      	adds	r3, r2, r3
 8001862:	3304      	adds	r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	1dfa      	adds	r2, r7, #7
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	0011      	movs	r1, r2
 800186c:	2203      	movs	r2, #3
 800186e:	400a      	ands	r2, r1
 8001870:	00d2      	lsls	r2, r2, #3
 8001872:	21ff      	movs	r1, #255	@ 0xff
 8001874:	4091      	lsls	r1, r2
 8001876:	000a      	movs	r2, r1
 8001878:	43d2      	mvns	r2, r2
 800187a:	401a      	ands	r2, r3
 800187c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	22ff      	movs	r2, #255	@ 0xff
 8001884:	401a      	ands	r2, r3
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	0018      	movs	r0, r3
 800188c:	2303      	movs	r3, #3
 800188e:	4003      	ands	r3, r0
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001894:	4809      	ldr	r0, [pc, #36]	@ (80018bc <__NVIC_SetPriority+0xd8>)
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	001c      	movs	r4, r3
 800189c:	230f      	movs	r3, #15
 800189e:	4023      	ands	r3, r4
 80018a0:	3b08      	subs	r3, #8
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	430a      	orrs	r2, r1
 80018a6:	3306      	adds	r3, #6
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	18c3      	adds	r3, r0, r3
 80018ac:	3304      	adds	r3, #4
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	46c0      	nop			@ (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b003      	add	sp, #12
 80018b6:	bd90      	pop	{r4, r7, pc}
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	1e5a      	subs	r2, r3, #1
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	045b      	lsls	r3, r3, #17
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d301      	bcc.n	80018d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d4:	2301      	movs	r3, #1
 80018d6:	e010      	b.n	80018fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <SysTick_Config+0x44>)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	3a01      	subs	r2, #1
 80018de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e0:	2301      	movs	r3, #1
 80018e2:	425b      	negs	r3, r3
 80018e4:	2103      	movs	r1, #3
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff ff7c 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <SysTick_Config+0x44>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <SysTick_Config+0x44>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	210f      	movs	r1, #15
 8001914:	187b      	adds	r3, r7, r1
 8001916:	1c02      	adds	r2, r0, #0
 8001918:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	187b      	adds	r3, r7, r1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b25b      	sxtb	r3, r3
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b004      	add	sp, #16
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	0018      	movs	r0, r3
 800193e:	f7ff ffbf 	bl	80018c0 <SysTick_Config>
 8001942:	0003      	movs	r3, r0
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b002      	add	sp, #8
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001962:	e143      	b.n	8001bec <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4091      	lsls	r1, r2
 800196e:	000a      	movs	r2, r1
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d100      	bne.n	800197c <HAL_GPIO_Init+0x30>
 800197a:	e134      	b.n	8001be6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	4013      	ands	r3, r2
 8001984:	2b01      	cmp	r3, #1
 8001986:	d005      	beq.n	8001994 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2203      	movs	r2, #3
 800198e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001990:	2b02      	cmp	r3, #2
 8001992:	d130      	bne.n	80019f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	409a      	lsls	r2, r3
 80019a2:	0013      	movs	r3, r2
 80019a4:	43da      	mvns	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	409a      	lsls	r2, r3
 80019b6:	0013      	movs	r3, r2
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ca:	2201      	movs	r2, #1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	43da      	mvns	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	2201      	movs	r2, #1
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2203      	movs	r2, #3
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d017      	beq.n	8001a32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	0013      	movs	r3, r2
 8001a12:	43da      	mvns	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2203      	movs	r2, #3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d123      	bne.n	8001a86 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	08da      	lsrs	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	58d3      	ldr	r3, [r2, r3]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2207      	movs	r2, #7
 8001a50:	4013      	ands	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	220f      	movs	r2, #15
 8001a56:	409a      	lsls	r2, r3
 8001a58:	0013      	movs	r3, r2
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2107      	movs	r1, #7
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	0013      	movs	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	6939      	ldr	r1, [r7, #16]
 8001a84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	409a      	lsls	r2, r3
 8001a94:	0013      	movs	r3, r2
 8001a96:	43da      	mvns	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	0013      	movs	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	23c0      	movs	r3, #192	@ 0xc0
 8001ac0:	029b      	lsls	r3, r3, #10
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d100      	bne.n	8001ac8 <HAL_GPIO_Init+0x17c>
 8001ac6:	e08e      	b.n	8001be6 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c04 <HAL_GPIO_Init+0x2b8>)
 8001aca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001acc:	4b4d      	ldr	r3, [pc, #308]	@ (8001c04 <HAL_GPIO_Init+0x2b8>)
 8001ace:	2101      	movs	r1, #1
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad4:	4a4c      	ldr	r2, [pc, #304]	@ (8001c08 <HAL_GPIO_Init+0x2bc>)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	589b      	ldr	r3, [r3, r2]
 8001ae0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	409a      	lsls	r2, r3
 8001aee:	0013      	movs	r3, r2
 8001af0:	43da      	mvns	r2, r3
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	23a0      	movs	r3, #160	@ 0xa0
 8001afc:	05db      	lsls	r3, r3, #23
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x1d2>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a41      	ldr	r2, [pc, #260]	@ (8001c0c <HAL_GPIO_Init+0x2c0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x1ce>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a40      	ldr	r2, [pc, #256]	@ (8001c10 <HAL_GPIO_Init+0x2c4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x1ca>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e004      	b.n	8001b20 <HAL_GPIO_Init+0x1d4>
 8001b16:	2306      	movs	r3, #6
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_Init+0x1d4>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x1d4>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	2103      	movs	r1, #3
 8001b24:	400a      	ands	r2, r1
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	4093      	lsls	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b30:	4935      	ldr	r1, [pc, #212]	@ (8001c08 <HAL_GPIO_Init+0x2bc>)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3e:	4b35      	ldr	r3, [pc, #212]	@ (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43da      	mvns	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	035b      	lsls	r3, r3, #13
 8001b56:	4013      	ands	r3, r2
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b62:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b68:	4b2a      	ldr	r3, [pc, #168]	@ (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43da      	mvns	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	039b      	lsls	r3, r3, #14
 8001b80:	4013      	ands	r3, r2
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	2380      	movs	r3, #128	@ 0x80
 8001ba8:	029b      	lsls	r3, r3, #10
 8001baa:	4013      	ands	r3, r2
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bb6:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	025b      	lsls	r3, r3, #9
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	40da      	lsrs	r2, r3
 8001bf4:	1e13      	subs	r3, r2, #0
 8001bf6:	d000      	beq.n	8001bfa <HAL_GPIO_Init+0x2ae>
 8001bf8:	e6b4      	b.n	8001964 <HAL_GPIO_Init+0x18>
  }
}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	46c0      	nop			@ (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b006      	add	sp, #24
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	50000400 	.word	0x50000400
 8001c10:	50000800 	.word	0x50000800
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f000 fb6c 	bl	8002304 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2c:	4bc8      	ldr	r3, [pc, #800]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	220c      	movs	r2, #12
 8001c32:	4013      	ands	r3, r2
 8001c34:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c36:	4bc6      	ldr	r3, [pc, #792]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	025b      	lsls	r3, r3, #9
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d100      	bne.n	8001c4e <HAL_RCC_OscConfig+0x36>
 8001c4c:	e07d      	b.n	8001d4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d007      	beq.n	8001c64 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d112      	bne.n	8001c80 <HAL_RCC_OscConfig+0x68>
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	2380      	movs	r3, #128	@ 0x80
 8001c5e:	025b      	lsls	r3, r3, #9
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d10d      	bne.n	8001c80 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	4bba      	ldr	r3, [pc, #744]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	029b      	lsls	r3, r3, #10
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d100      	bne.n	8001c72 <HAL_RCC_OscConfig+0x5a>
 8001c70:	e06a      	b.n	8001d48 <HAL_RCC_OscConfig+0x130>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d166      	bne.n	8001d48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f000 fb42 	bl	8002304 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	025b      	lsls	r3, r3, #9
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x84>
 8001c8c:	4bb0      	ldr	r3, [pc, #704]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4baf      	ldr	r3, [pc, #700]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c92:	2180      	movs	r1, #128	@ 0x80
 8001c94:	0249      	lsls	r1, r1, #9
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e027      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	23a0      	movs	r3, #160	@ 0xa0
 8001ca2:	02db      	lsls	r3, r3, #11
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10e      	bne.n	8001cc6 <HAL_RCC_OscConfig+0xae>
 8001ca8:	4ba9      	ldr	r3, [pc, #676]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4ba8      	ldr	r3, [pc, #672]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cae:	2180      	movs	r1, #128	@ 0x80
 8001cb0:	02c9      	lsls	r1, r1, #11
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	4ba6      	ldr	r3, [pc, #664]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4ba5      	ldr	r3, [pc, #660]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	0249      	lsls	r1, r1, #9
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e012      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001cc6:	4ba2      	ldr	r3, [pc, #648]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4ba1      	ldr	r3, [pc, #644]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ccc:	49a1      	ldr	r1, [pc, #644]	@ (8001f54 <HAL_RCC_OscConfig+0x33c>)
 8001cce:	400a      	ands	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	4b9f      	ldr	r3, [pc, #636]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	4013      	ands	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4b9b      	ldr	r3, [pc, #620]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b9a      	ldr	r3, [pc, #616]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	499c      	ldr	r1, [pc, #624]	@ (8001f58 <HAL_RCC_OscConfig+0x340>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d014      	beq.n	8001d1e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f838 	bl	8000d68 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfe:	f7ff f833 	bl	8000d68 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b64      	cmp	r3, #100	@ 0x64
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e2f9      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d10:	4b8f      	ldr	r3, [pc, #572]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	029b      	lsls	r3, r3, #10
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0xe6>
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f823 	bl	8000d68 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff f81e 	bl	8000d68 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	@ 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e2e4      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d3a:	4b85      	ldr	r3, [pc, #532]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	029b      	lsls	r3, r3, #10
 8001d42:	4013      	ands	r3, r2
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x110>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	4013      	ands	r3, r2
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_OscConfig+0x13e>
 8001d54:	e099      	b.n	8001e8a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	2220      	movs	r2, #32
 8001d60:	4013      	ands	r3, r2
 8001d62:	d009      	beq.n	8001d78 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001d64:	4b7a      	ldr	r3, [pc, #488]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b79      	ldr	r3, [pc, #484]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	2220      	movs	r2, #32
 8001d74:	4393      	bics	r3, r2
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d005      	beq.n	8001d8a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d13e      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1ea>
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d13b      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d8a:	4b71      	ldr	r3, [pc, #452]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2204      	movs	r2, #4
 8001d90:	4013      	ands	r3, r2
 8001d92:	d004      	beq.n	8001d9e <HAL_RCC_OscConfig+0x186>
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e2b2      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a6e      	ldr	r2, [pc, #440]	@ (8001f5c <HAL_RCC_OscConfig+0x344>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	021a      	lsls	r2, r3, #8
 8001dae:	4b68      	ldr	r3, [pc, #416]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001db4:	4b66      	ldr	r3, [pc, #408]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2209      	movs	r2, #9
 8001dba:	4393      	bics	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	4b64      	ldr	r3, [pc, #400]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dc6:	f000 fbeb 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8001dca:	0001      	movs	r1, r0
 8001dcc:	4b60      	ldr	r3, [pc, #384]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	4a62      	ldr	r2, [pc, #392]	@ (8001f60 <HAL_RCC_OscConfig+0x348>)
 8001dd8:	5cd3      	ldrb	r3, [r2, r3]
 8001dda:	000a      	movs	r2, r1
 8001ddc:	40da      	lsrs	r2, r3
 8001dde:	4b61      	ldr	r3, [pc, #388]	@ (8001f64 <HAL_RCC_OscConfig+0x34c>)
 8001de0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001de2:	4b61      	ldr	r3, [pc, #388]	@ (8001f68 <HAL_RCC_OscConfig+0x350>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2513      	movs	r5, #19
 8001de8:	197c      	adds	r4, r7, r5
 8001dea:	0018      	movs	r0, r3
 8001dec:	f7fe ff76 	bl	8000cdc <HAL_InitTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001df4:	197b      	adds	r3, r7, r5
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d046      	beq.n	8001e8a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001dfc:	197b      	adds	r3, r7, r5
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	e280      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d027      	beq.n	8001e58 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e08:	4b51      	ldr	r3, [pc, #324]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2209      	movs	r2, #9
 8001e0e:	4393      	bics	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	4b4f      	ldr	r3, [pc, #316]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe ffa5 	bl	8000d68 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e24:	f7fe ffa0 	bl	8000d68 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e266      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e36:	4b46      	ldr	r3, [pc, #280]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f1      	beq.n	8001e24 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b43      	ldr	r3, [pc, #268]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a45      	ldr	r2, [pc, #276]	@ (8001f5c <HAL_RCC_OscConfig+0x344>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	021a      	lsls	r2, r3, #8
 8001e50:	4b3f      	ldr	r3, [pc, #252]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	e018      	b.n	8001e8a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e58:	4b3d      	ldr	r3, [pc, #244]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e5e:	2101      	movs	r1, #1
 8001e60:	438a      	bics	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe ff80 	bl	8000d68 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7fe ff7b 	bl	8000d68 <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e241      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e80:	4b33      	ldr	r3, [pc, #204]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2204      	movs	r2, #4
 8001e86:	4013      	ands	r3, r2
 8001e88:	d1f1      	bne.n	8001e6e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2210      	movs	r2, #16
 8001e90:	4013      	ands	r3, r2
 8001e92:	d100      	bne.n	8001e96 <HAL_RCC_OscConfig+0x27e>
 8001e94:	e0a1      	b.n	8001fda <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d140      	bne.n	8001f1e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x29c>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e227      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb4:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f6c <HAL_RCC_OscConfig+0x354>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	4b23      	ldr	r3, [pc, #140]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec8:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	0a19      	lsrs	r1, r3, #8
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	061a      	lsls	r2, r3, #24
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	0b5b      	lsrs	r3, r3, #13
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	2280      	movs	r2, #128	@ 0x80
 8001ee6:	0212      	lsls	r2, r2, #8
 8001ee8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001eea:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	400b      	ands	r3, r1
 8001ef4:	491a      	ldr	r1, [pc, #104]	@ (8001f60 <HAL_RCC_OscConfig+0x348>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001efa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <HAL_RCC_OscConfig+0x34c>)
 8001efc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <HAL_RCC_OscConfig+0x350>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2513      	movs	r5, #19
 8001f04:	197c      	adds	r4, r7, r5
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7fe fee8 	bl	8000cdc <HAL_InitTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f10:	197b      	adds	r3, r7, r5
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d060      	beq.n	8001fda <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001f18:	197b      	adds	r3, r7, r5
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	e1f2      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03f      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001f2c:	2180      	movs	r1, #128	@ 0x80
 8001f2e:	0049      	lsls	r1, r1, #1
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe ff18 	bl	8000d68 <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f3c:	e018      	b.n	8001f70 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f3e:	f7fe ff13 	bl	8000d68 <HAL_GetTick>
 8001f42:	0002      	movs	r2, r0
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d911      	bls.n	8001f70 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e1d9      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
 8001f50:	40021000 	.word	0x40021000
 8001f54:	fffeffff 	.word	0xfffeffff
 8001f58:	fffbffff 	.word	0xfffbffff
 8001f5c:	ffffe0ff 	.word	0xffffe0ff
 8001f60:	080032ec 	.word	0x080032ec
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000004 	.word	0x20000004
 8001f6c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f70:	4bc9      	ldr	r3, [pc, #804]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	@ 0x80
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d0e0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7c:	4bc6      	ldr	r3, [pc, #792]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4ac6      	ldr	r2, [pc, #792]	@ (800229c <HAL_RCC_OscConfig+0x684>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1a      	ldr	r2, [r3, #32]
 8001f8a:	4bc3      	ldr	r3, [pc, #780]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f90:	4bc1      	ldr	r3, [pc, #772]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	0a19      	lsrs	r1, r3, #8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	061a      	lsls	r2, r3, #24
 8001f9e:	4bbe      	ldr	r3, [pc, #760]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	e019      	b.n	8001fda <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fa6:	4bbc      	ldr	r3, [pc, #752]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4bbb      	ldr	r3, [pc, #748]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001fac:	49bc      	ldr	r1, [pc, #752]	@ (80022a0 <HAL_RCC_OscConfig+0x688>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7fe fed9 	bl	8000d68 <HAL_GetTick>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fbc:	f7fe fed4 	bl	8000d68 <HAL_GetTick>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e19a      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fce:	4bb2      	ldr	r3, [pc, #712]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2208      	movs	r2, #8
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d036      	beq.n	8002052 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d019      	beq.n	8002020 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fec:	4baa      	ldr	r3, [pc, #680]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001fee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ff0:	4ba9      	ldr	r3, [pc, #676]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7fe feb6 	bl	8000d68 <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002002:	f7fe feb1 	bl	8000d68 <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e177      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002014:	4ba0      	ldr	r3, [pc, #640]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002018:	2202      	movs	r2, #2
 800201a:	4013      	ands	r3, r2
 800201c:	d0f1      	beq.n	8002002 <HAL_RCC_OscConfig+0x3ea>
 800201e:	e018      	b.n	8002052 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002020:	4b9d      	ldr	r3, [pc, #628]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002022:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002024:	4b9c      	ldr	r3, [pc, #624]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002026:	2101      	movs	r1, #1
 8002028:	438a      	bics	r2, r1
 800202a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7fe fe9c 	bl	8000d68 <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002036:	f7fe fe97 	bl	8000d68 <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e15d      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002048:	4b93      	ldr	r3, [pc, #588]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800204a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800204c:	2202      	movs	r2, #2
 800204e:	4013      	ands	r3, r2
 8002050:	d1f1      	bne.n	8002036 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2204      	movs	r2, #4
 8002058:	4013      	ands	r3, r2
 800205a:	d100      	bne.n	800205e <HAL_RCC_OscConfig+0x446>
 800205c:	e0ae      	b.n	80021bc <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	2023      	movs	r0, #35	@ 0x23
 8002060:	183b      	adds	r3, r7, r0
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002066:	4b8c      	ldr	r3, [pc, #560]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800206a:	2380      	movs	r3, #128	@ 0x80
 800206c:	055b      	lsls	r3, r3, #21
 800206e:	4013      	ands	r3, r2
 8002070:	d109      	bne.n	8002086 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b89      	ldr	r3, [pc, #548]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002076:	4b88      	ldr	r3, [pc, #544]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002078:	2180      	movs	r1, #128	@ 0x80
 800207a:	0549      	lsls	r1, r1, #21
 800207c:	430a      	orrs	r2, r1
 800207e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002080:	183b      	adds	r3, r7, r0
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b87      	ldr	r3, [pc, #540]	@ (80022a4 <HAL_RCC_OscConfig+0x68c>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4013      	ands	r3, r2
 8002090:	d11a      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b84      	ldr	r3, [pc, #528]	@ (80022a4 <HAL_RCC_OscConfig+0x68c>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b83      	ldr	r3, [pc, #524]	@ (80022a4 <HAL_RCC_OscConfig+0x68c>)
 8002098:	2180      	movs	r1, #128	@ 0x80
 800209a:	0049      	lsls	r1, r1, #1
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a0:	f7fe fe62 	bl	8000d68 <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7fe fe5d 	bl	8000d68 <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b64      	cmp	r3, #100	@ 0x64
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e123      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b79      	ldr	r3, [pc, #484]	@ (80022a4 <HAL_RCC_OscConfig+0x68c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	@ 0x80
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4cc>
 80020d4:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020da:	2180      	movs	r1, #128	@ 0x80
 80020dc:	0049      	lsls	r1, r1, #1
 80020de:	430a      	orrs	r2, r1
 80020e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80020e2:	e031      	b.n	8002148 <HAL_RCC_OscConfig+0x530>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_OscConfig+0x4ee>
 80020ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020f0:	4b69      	ldr	r3, [pc, #420]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020f2:	496b      	ldr	r1, [pc, #428]	@ (80022a0 <HAL_RCC_OscConfig+0x688>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80020f8:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020fc:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80020fe:	496a      	ldr	r1, [pc, #424]	@ (80022a8 <HAL_RCC_OscConfig+0x690>)
 8002100:	400a      	ands	r2, r1
 8002102:	651a      	str	r2, [r3, #80]	@ 0x50
 8002104:	e020      	b.n	8002148 <HAL_RCC_OscConfig+0x530>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	23a0      	movs	r3, #160	@ 0xa0
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	429a      	cmp	r2, r3
 8002110:	d10e      	bne.n	8002130 <HAL_RCC_OscConfig+0x518>
 8002112:	4b61      	ldr	r3, [pc, #388]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002116:	4b60      	ldr	r3, [pc, #384]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002118:	2180      	movs	r1, #128	@ 0x80
 800211a:	00c9      	lsls	r1, r1, #3
 800211c:	430a      	orrs	r2, r1
 800211e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002120:	4b5d      	ldr	r3, [pc, #372]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002122:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002124:	4b5c      	ldr	r3, [pc, #368]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002126:	2180      	movs	r1, #128	@ 0x80
 8002128:	0049      	lsls	r1, r1, #1
 800212a:	430a      	orrs	r2, r1
 800212c:	651a      	str	r2, [r3, #80]	@ 0x50
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0x530>
 8002130:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002132:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002134:	4b58      	ldr	r3, [pc, #352]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002136:	495a      	ldr	r1, [pc, #360]	@ (80022a0 <HAL_RCC_OscConfig+0x688>)
 8002138:	400a      	ands	r2, r1
 800213a:	651a      	str	r2, [r3, #80]	@ 0x50
 800213c:	4b56      	ldr	r3, [pc, #344]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800213e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002140:	4b55      	ldr	r3, [pc, #340]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002142:	4959      	ldr	r1, [pc, #356]	@ (80022a8 <HAL_RCC_OscConfig+0x690>)
 8002144:	400a      	ands	r2, r1
 8002146:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d015      	beq.n	800217c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7fe fe0a 	bl	8000d68 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002158:	e009      	b.n	800216e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7fe fe05 	bl	8000d68 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	4a51      	ldr	r2, [pc, #324]	@ (80022ac <HAL_RCC_OscConfig+0x694>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0ca      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800216e:	4b4a      	ldr	r3, [pc, #296]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002170:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002172:	2380      	movs	r3, #128	@ 0x80
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4013      	ands	r3, r2
 8002178:	d0ef      	beq.n	800215a <HAL_RCC_OscConfig+0x542>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7fe fdf4 	bl	8000d68 <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002184:	e009      	b.n	800219a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fdef 	bl	8000d68 <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	4a46      	ldr	r2, [pc, #280]	@ (80022ac <HAL_RCC_OscConfig+0x694>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0b4      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800219a:	4b3f      	ldr	r3, [pc, #252]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800219c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4013      	ands	r3, r2
 80021a4:	d1ef      	bne.n	8002186 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021a6:	2323      	movs	r3, #35	@ 0x23
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80021b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021b4:	4b38      	ldr	r3, [pc, #224]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80021b6:	493e      	ldr	r1, [pc, #248]	@ (80022b0 <HAL_RCC_OscConfig+0x698>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d100      	bne.n	80021c6 <HAL_RCC_OscConfig+0x5ae>
 80021c4:	e09d      	b.n	8002302 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	d100      	bne.n	80021ce <HAL_RCC_OscConfig+0x5b6>
 80021cc:	e076      	b.n	80022bc <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d145      	bne.n	8002262 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 80021dc:	4935      	ldr	r1, [pc, #212]	@ (80022b4 <HAL_RCC_OscConfig+0x69c>)
 80021de:	400a      	ands	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7fe fdc1 	bl	8000d68 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fdbc 	bl	8000d68 <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e082      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021fe:	4b26      	ldr	r3, [pc, #152]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	@ 0x80
 8002204:	049b      	lsls	r3, r3, #18
 8002206:	4013      	ands	r3, r2
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220a:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	4a2a      	ldr	r2, [pc, #168]	@ (80022b8 <HAL_RCC_OscConfig+0x6a0>)
 8002210:	4013      	ands	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	431a      	orrs	r2, r3
 8002224:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002226:	430a      	orrs	r2, r1
 8002228:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222a:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002230:	2180      	movs	r1, #128	@ 0x80
 8002232:	0449      	lsls	r1, r1, #17
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe fd96 	bl	8000d68 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe fd91 	bl	8000d68 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e057      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	049b      	lsls	r3, r3, #18
 800225c:	4013      	ands	r3, r2
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x62a>
 8002260:	e04f      	b.n	8002302 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 8002268:	4912      	ldr	r1, [pc, #72]	@ (80022b4 <HAL_RCC_OscConfig+0x69c>)
 800226a:	400a      	ands	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7fe fd7b 	bl	8000d68 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe fd76 	bl	8000d68 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e03c      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800228a:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_RCC_OscConfig+0x680>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	049b      	lsls	r3, r3, #18
 8002292:	4013      	ands	r3, r2
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x660>
 8002296:	e034      	b.n	8002302 <HAL_RCC_OscConfig+0x6ea>
 8002298:	40021000 	.word	0x40021000
 800229c:	ffff1fff 	.word	0xffff1fff
 80022a0:	fffffeff 	.word	0xfffffeff
 80022a4:	40007000 	.word	0x40007000
 80022a8:	fffffbff 	.word	0xfffffbff
 80022ac:	00001388 	.word	0x00001388
 80022b0:	efffffff 	.word	0xefffffff
 80022b4:	feffffff 	.word	0xfeffffff
 80022b8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e01d      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c8:	4b10      	ldr	r3, [pc, #64]	@ (800230c <HAL_RCC_OscConfig+0x6f4>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	2380      	movs	r3, #128	@ 0x80
 80022d2:	025b      	lsls	r3, r3, #9
 80022d4:	401a      	ands	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022da:	429a      	cmp	r2, r3
 80022dc:	d10f      	bne.n	80022fe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	23f0      	movs	r3, #240	@ 0xf0
 80022e2:	039b      	lsls	r3, r3, #14
 80022e4:	401a      	ands	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	23c0      	movs	r3, #192	@ 0xc0
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	401a      	ands	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b00a      	add	sp, #40	@ 0x28
 800230a:	bdb0      	pop	{r4, r5, r7, pc}
 800230c:	40021000 	.word	0x40021000

08002310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e128      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b96      	ldr	r3, [pc, #600]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2201      	movs	r2, #1
 800232a:	4013      	ands	r3, r2
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d91e      	bls.n	8002370 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b93      	ldr	r3, [pc, #588]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2201      	movs	r2, #1
 8002338:	4393      	bics	r3, r2
 800233a:	0019      	movs	r1, r3
 800233c:	4b90      	ldr	r3, [pc, #576]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002344:	f7fe fd10 	bl	8000d68 <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234c:	e009      	b.n	8002362 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234e:	f7fe fd0b 	bl	8000d68 <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	4a8a      	ldr	r2, [pc, #552]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e109      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b87      	ldr	r3, [pc, #540]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2201      	movs	r2, #1
 8002368:	4013      	ands	r3, r2
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d1ee      	bne.n	800234e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2202      	movs	r2, #2
 8002376:	4013      	ands	r3, r2
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237a:	4b83      	ldr	r3, [pc, #524]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	22f0      	movs	r2, #240	@ 0xf0
 8002380:	4393      	bics	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b7f      	ldr	r3, [pc, #508]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 800238a:	430a      	orrs	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	4013      	ands	r3, r2
 8002396:	d100      	bne.n	800239a <HAL_RCC_ClockConfig+0x8a>
 8002398:	e089      	b.n	80024ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023a2:	4b79      	ldr	r3, [pc, #484]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	029b      	lsls	r3, r3, #10
 80023aa:	4013      	ands	r3, r2
 80023ac:	d120      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0e1      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023ba:	4b73      	ldr	r3, [pc, #460]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	@ 0x80
 80023c0:	049b      	lsls	r3, r3, #18
 80023c2:	4013      	ands	r3, r2
 80023c4:	d114      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0d5      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d106      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2204      	movs	r2, #4
 80023d8:	4013      	ands	r3, r2
 80023da:	d109      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0ca      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023e0:	4b69      	ldr	r3, [pc, #420]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0c2      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f0:	4b65      	ldr	r3, [pc, #404]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2203      	movs	r2, #3
 80023f6:	4393      	bics	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4b62      	ldr	r3, [pc, #392]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002400:	430a      	orrs	r2, r1
 8002402:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002404:	f7fe fcb0 	bl	8000d68 <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d111      	bne.n	8002438 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002414:	e009      	b.n	800242a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002416:	f7fe fca7 	bl	8000d68 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	4a58      	ldr	r2, [pc, #352]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0a5      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800242a:	4b57      	ldr	r3, [pc, #348]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	220c      	movs	r2, #12
 8002430:	4013      	ands	r3, r2
 8002432:	2b08      	cmp	r3, #8
 8002434:	d1ef      	bne.n	8002416 <HAL_RCC_ClockConfig+0x106>
 8002436:	e03a      	b.n	80024ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d111      	bne.n	8002464 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002440:	e009      	b.n	8002456 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002442:	f7fe fc91 	bl	8000d68 <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	4a4d      	ldr	r2, [pc, #308]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e08f      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002456:	4b4c      	ldr	r3, [pc, #304]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	220c      	movs	r2, #12
 800245c:	4013      	ands	r3, r2
 800245e:	2b0c      	cmp	r3, #12
 8002460:	d1ef      	bne.n	8002442 <HAL_RCC_ClockConfig+0x132>
 8002462:	e024      	b.n	80024ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d11b      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800246c:	e009      	b.n	8002482 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246e:	f7fe fc7b 	bl	8000d68 <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4a42      	ldr	r2, [pc, #264]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e079      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002482:	4b41      	ldr	r3, [pc, #260]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	220c      	movs	r2, #12
 8002488:	4013      	ands	r3, r2
 800248a:	2b04      	cmp	r3, #4
 800248c:	d1ef      	bne.n	800246e <HAL_RCC_ClockConfig+0x15e>
 800248e:	e00e      	b.n	80024ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7fe fc6a 	bl	8000d68 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	4a3a      	ldr	r2, [pc, #232]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e068      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024a4:	4b38      	ldr	r3, [pc, #224]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	220c      	movs	r2, #12
 80024aa:	4013      	ands	r3, r2
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ae:	4b34      	ldr	r3, [pc, #208]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2201      	movs	r2, #1
 80024b4:	4013      	ands	r3, r2
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d21e      	bcs.n	80024fa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024bc:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	4393      	bics	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024ce:	f7fe fc4b 	bl	8000d68 <HAL_GetTick>
 80024d2:	0003      	movs	r3, r0
 80024d4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	e009      	b.n	80024ec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7fe fc46 	bl	8000d68 <HAL_GetTick>
 80024dc:	0002      	movs	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	4a28      	ldr	r2, [pc, #160]	@ (8002584 <HAL_RCC_ClockConfig+0x274>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e044      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ec:	4b24      	ldr	r3, [pc, #144]	@ (8002580 <HAL_RCC_ClockConfig+0x270>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d1ee      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	d009      	beq.n	8002518 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a20      	ldr	r2, [pc, #128]	@ (800258c <HAL_RCC_ClockConfig+0x27c>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002514:	430a      	orrs	r2, r1
 8002516:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2208      	movs	r2, #8
 800251e:	4013      	ands	r3, r2
 8002520:	d00a      	beq.n	8002538 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002522:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	4a1a      	ldr	r2, [pc, #104]	@ (8002590 <HAL_RCC_ClockConfig+0x280>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	00da      	lsls	r2, r3, #3
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002534:	430a      	orrs	r2, r1
 8002536:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002538:	f000 f832 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 800253c:	0001      	movs	r1, r0
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_RCC_ClockConfig+0x278>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	220f      	movs	r2, #15
 8002546:	4013      	ands	r3, r2
 8002548:	4a12      	ldr	r2, [pc, #72]	@ (8002594 <HAL_RCC_ClockConfig+0x284>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	000a      	movs	r2, r1
 800254e:	40da      	lsrs	r2, r3
 8002550:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <HAL_RCC_ClockConfig+0x288>)
 8002552:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002554:	4b11      	ldr	r3, [pc, #68]	@ (800259c <HAL_RCC_ClockConfig+0x28c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	250b      	movs	r5, #11
 800255a:	197c      	adds	r4, r7, r5
 800255c:	0018      	movs	r0, r3
 800255e:	f7fe fbbd 	bl	8000cdc <HAL_InitTick>
 8002562:	0003      	movs	r3, r0
 8002564:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002566:	197b      	adds	r3, r7, r5
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800256e:	197b      	adds	r3, r7, r5
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	e000      	b.n	8002576 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bdb0      	pop	{r4, r5, r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	40022000 	.word	0x40022000
 8002584:	00001388 	.word	0x00001388
 8002588:	40021000 	.word	0x40021000
 800258c:	fffff8ff 	.word	0xfffff8ff
 8002590:	ffffc7ff 	.word	0xffffc7ff
 8002594:	080032ec 	.word	0x080032ec
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004

080025a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	220c      	movs	r2, #12
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d013      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x3e>
 80025b6:	d85c      	bhi.n	8002672 <HAL_RCC_GetSysClockFreq+0xd2>
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d002      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0x22>
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d00b      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x38>
 80025c0:	e057      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025c2:	4b35      	ldr	r3, [pc, #212]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2210      	movs	r2, #16
 80025c8:	4013      	ands	r3, r2
 80025ca:	d002      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80025cc:	4b33      	ldr	r3, [pc, #204]	@ (800269c <HAL_RCC_GetSysClockFreq+0xfc>)
 80025ce:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80025d0:	e05d      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80025d2:	4b33      	ldr	r3, [pc, #204]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80025d4:	613b      	str	r3, [r7, #16]
      break;
 80025d6:	e05a      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025d8:	4b32      	ldr	r3, [pc, #200]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80025da:	613b      	str	r3, [r7, #16]
      break;
 80025dc:	e057      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	0c9b      	lsrs	r3, r3, #18
 80025e2:	220f      	movs	r2, #15
 80025e4:	4013      	ands	r3, r2
 80025e6:	4a30      	ldr	r2, [pc, #192]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e8:	5cd3      	ldrb	r3, [r2, r3]
 80025ea:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	0d9b      	lsrs	r3, r3, #22
 80025f0:	2203      	movs	r2, #3
 80025f2:	4013      	ands	r3, r2
 80025f4:	3301      	adds	r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f8:	4b27      	ldr	r3, [pc, #156]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	025b      	lsls	r3, r3, #9
 8002600:	4013      	ands	r3, r2
 8002602:	d00f      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	000a      	movs	r2, r1
 8002608:	0152      	lsls	r2, r2, #5
 800260a:	1a52      	subs	r2, r2, r1
 800260c:	0193      	lsls	r3, r2, #6
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	185b      	adds	r3, r3, r1
 8002614:	025b      	lsls	r3, r3, #9
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	f7fd fd75 	bl	8000108 <__udivsi3>
 800261e:	0003      	movs	r3, r0
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	e023      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002624:	4b1c      	ldr	r3, [pc, #112]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2210      	movs	r2, #16
 800262a:	4013      	ands	r3, r2
 800262c:	d00f      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	000a      	movs	r2, r1
 8002632:	0152      	lsls	r2, r2, #5
 8002634:	1a52      	subs	r2, r2, r1
 8002636:	0193      	lsls	r3, r2, #6
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	185b      	adds	r3, r3, r1
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	0018      	movs	r0, r3
 8002644:	f7fd fd60 	bl	8000108 <__udivsi3>
 8002648:	0003      	movs	r3, r0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e00e      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	000a      	movs	r2, r1
 8002652:	0152      	lsls	r2, r2, #5
 8002654:	1a52      	subs	r2, r2, r1
 8002656:	0193      	lsls	r3, r2, #6
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	185b      	adds	r3, r3, r1
 800265e:	029b      	lsls	r3, r3, #10
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	0018      	movs	r0, r3
 8002664:	f7fd fd50 	bl	8000108 <__udivsi3>
 8002668:	0003      	movs	r3, r0
 800266a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	613b      	str	r3, [r7, #16]
      break;
 8002670:	e00d      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	0b5b      	lsrs	r3, r3, #13
 8002678:	2207      	movs	r2, #7
 800267a:	4013      	ands	r3, r2
 800267c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	2280      	movs	r2, #128	@ 0x80
 8002684:	0212      	lsls	r2, r2, #8
 8002686:	409a      	lsls	r2, r3
 8002688:	0013      	movs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
      break;
 800268c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800268e:	693b      	ldr	r3, [r7, #16]
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b006      	add	sp, #24
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	003d0900 	.word	0x003d0900
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	007a1200 	.word	0x007a1200
 80026a8:	08003304 	.word	0x08003304

080026ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b02      	ldr	r3, [pc, #8]	@ (80026bc <HAL_RCC_GetHCLKFreq+0x10>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	20000000 	.word	0x20000000

080026c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026c4:	f7ff fff2 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026c8:	0001      	movs	r1, r0
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	2207      	movs	r2, #7
 80026d2:	4013      	ands	r3, r2
 80026d4:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	40d9      	lsrs	r1, r3
 80026da:	000b      	movs	r3, r1
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	40021000 	.word	0x40021000
 80026e8:	080032fc 	.word	0x080032fc

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f0:	f7ff ffdc 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026f4:	0001      	movs	r1, r0
 80026f6:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	0adb      	lsrs	r3, r3, #11
 80026fc:	2207      	movs	r2, #7
 80026fe:	4013      	ands	r3, r2
 8002700:	4a04      	ldr	r2, [pc, #16]	@ (8002714 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	40d9      	lsrs	r1, r3
 8002706:	000b      	movs	r3, r1
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	40021000 	.word	0x40021000
 8002714:	080032fc 	.word	0x080032fc

08002718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e044      	b.n	80027b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d107      	bne.n	8002742 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2278      	movs	r2, #120	@ 0x78
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f7fe fa07 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2224      	movs	r2, #36	@ 0x24
 8002746:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2101      	movs	r1, #1
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0018      	movs	r0, r3
 8002764:	f000 fb16 	bl	8002d94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f8c8 	bl	8002900 <UART_SetConfig>
 8002770:	0003      	movs	r3, r0
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e01c      	b.n	80027b4 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	490d      	ldr	r1, [pc, #52]	@ (80027bc <HAL_UART_Init+0xa4>)
 8002786:	400a      	ands	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	212a      	movs	r1, #42	@ 0x2a
 8002796:	438a      	bics	r2, r1
 8002798:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	430a      	orrs	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	0018      	movs	r0, r3
 80027ae:	f000 fba5 	bl	8002efc <UART_CheckIdleState>
 80027b2:	0003      	movs	r3, r0
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b002      	add	sp, #8
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	ffffb7ff 	.word	0xffffb7ff

080027c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	@ 0x28
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	1dbb      	adds	r3, r7, #6
 80027ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d000      	beq.n	80027da <HAL_UART_Transmit+0x1a>
 80027d8:	e08c      	b.n	80028f4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_UART_Transmit+0x28>
 80027e0:	1dbb      	adds	r3, r7, #6
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e084      	b.n	80028f6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	2380      	movs	r3, #128	@ 0x80
 80027f2:	015b      	lsls	r3, r3, #5
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d109      	bne.n	800280c <HAL_UART_Transmit+0x4c>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2201      	movs	r2, #1
 8002804:	4013      	ands	r3, r2
 8002806:	d001      	beq.n	800280c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e074      	b.n	80028f6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2284      	movs	r2, #132	@ 0x84
 8002810:	2100      	movs	r1, #0
 8002812:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2221      	movs	r2, #33	@ 0x21
 8002818:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281a:	f7fe faa5 	bl	8000d68 <HAL_GetTick>
 800281e:	0003      	movs	r3, r0
 8002820:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1dba      	adds	r2, r7, #6
 8002826:	2150      	movs	r1, #80	@ 0x50
 8002828:	8812      	ldrh	r2, [r2, #0]
 800282a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1dba      	adds	r2, r7, #6
 8002830:	2152      	movs	r1, #82	@ 0x52
 8002832:	8812      	ldrh	r2, [r2, #0]
 8002834:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	015b      	lsls	r3, r3, #5
 800283e:	429a      	cmp	r2, r3
 8002840:	d108      	bne.n	8002854 <HAL_UART_Transmit+0x94>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d104      	bne.n	8002854 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e003      	b.n	800285c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800285c:	e02f      	b.n	80028be <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	0013      	movs	r3, r2
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	@ 0x80
 800286c:	f000 fbee 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 8002870:	1e03      	subs	r3, r0, #0
 8002872:	d004      	beq.n	800287e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e03b      	b.n	80028f6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	001a      	movs	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	05d2      	lsls	r2, r2, #23
 8002890:	0dd2      	lsrs	r2, r2, #23
 8002892:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	3302      	adds	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e007      	b.n	80028ac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2252      	movs	r2, #82	@ 0x52
 80028b0:	5a9b      	ldrh	r3, [r3, r2]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b299      	uxth	r1, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2252      	movs	r2, #82	@ 0x52
 80028bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2252      	movs	r2, #82	@ 0x52
 80028c2:	5a9b      	ldrh	r3, [r3, r2]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1c9      	bne.n	800285e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	0013      	movs	r3, r2
 80028d4:	2200      	movs	r2, #0
 80028d6:	2140      	movs	r1, #64	@ 0x40
 80028d8:	f000 fbb8 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d004      	beq.n	80028ea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e005      	b.n	80028f6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e000      	b.n	80028f6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
  }
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b008      	add	sp, #32
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b08e      	sub	sp, #56	@ 0x38
 8002904:	af00      	add	r7, sp, #0
 8002906:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002908:	231a      	movs	r3, #26
 800290a:	2218      	movs	r2, #24
 800290c:	189b      	adds	r3, r3, r2
 800290e:	19db      	adds	r3, r3, r7
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	431a      	orrs	r2, r3
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	431a      	orrs	r2, r3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	4313      	orrs	r3, r2
 800292a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4ab4      	ldr	r2, [pc, #720]	@ (8002c04 <UART_SetConfig+0x304>)
 8002934:	4013      	ands	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4aaf      	ldr	r2, [pc, #700]	@ (8002c08 <UART_SetConfig+0x308>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4aa9      	ldr	r2, [pc, #676]	@ (8002c0c <UART_SetConfig+0x30c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002970:	4313      	orrs	r3, r2
 8002972:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4aa5      	ldr	r2, [pc, #660]	@ (8002c10 <UART_SetConfig+0x310>)
 800297c:	4013      	ands	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4aa1      	ldr	r2, [pc, #644]	@ (8002c14 <UART_SetConfig+0x314>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d131      	bne.n	80029f8 <UART_SetConfig+0xf8>
 8002994:	4ba0      	ldr	r3, [pc, #640]	@ (8002c18 <UART_SetConfig+0x318>)
 8002996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002998:	220c      	movs	r2, #12
 800299a:	4013      	ands	r3, r2
 800299c:	2b0c      	cmp	r3, #12
 800299e:	d01d      	beq.n	80029dc <UART_SetConfig+0xdc>
 80029a0:	d823      	bhi.n	80029ea <UART_SetConfig+0xea>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d00c      	beq.n	80029c0 <UART_SetConfig+0xc0>
 80029a6:	d820      	bhi.n	80029ea <UART_SetConfig+0xea>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <UART_SetConfig+0xb2>
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d00e      	beq.n	80029ce <UART_SetConfig+0xce>
 80029b0:	e01b      	b.n	80029ea <UART_SetConfig+0xea>
 80029b2:	231b      	movs	r3, #27
 80029b4:	2218      	movs	r2, #24
 80029b6:	189b      	adds	r3, r3, r2
 80029b8:	19db      	adds	r3, r3, r7
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e065      	b.n	8002a8c <UART_SetConfig+0x18c>
 80029c0:	231b      	movs	r3, #27
 80029c2:	2218      	movs	r2, #24
 80029c4:	189b      	adds	r3, r3, r2
 80029c6:	19db      	adds	r3, r3, r7
 80029c8:	2202      	movs	r2, #2
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e05e      	b.n	8002a8c <UART_SetConfig+0x18c>
 80029ce:	231b      	movs	r3, #27
 80029d0:	2218      	movs	r2, #24
 80029d2:	189b      	adds	r3, r3, r2
 80029d4:	19db      	adds	r3, r3, r7
 80029d6:	2204      	movs	r2, #4
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	e057      	b.n	8002a8c <UART_SetConfig+0x18c>
 80029dc:	231b      	movs	r3, #27
 80029de:	2218      	movs	r2, #24
 80029e0:	189b      	adds	r3, r3, r2
 80029e2:	19db      	adds	r3, r3, r7
 80029e4:	2208      	movs	r2, #8
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e050      	b.n	8002a8c <UART_SetConfig+0x18c>
 80029ea:	231b      	movs	r3, #27
 80029ec:	2218      	movs	r2, #24
 80029ee:	189b      	adds	r3, r3, r2
 80029f0:	19db      	adds	r3, r3, r7
 80029f2:	2210      	movs	r2, #16
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e049      	b.n	8002a8c <UART_SetConfig+0x18c>
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a83      	ldr	r2, [pc, #524]	@ (8002c0c <UART_SetConfig+0x30c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d13e      	bne.n	8002a80 <UART_SetConfig+0x180>
 8002a02:	4b85      	ldr	r3, [pc, #532]	@ (8002c18 <UART_SetConfig+0x318>)
 8002a04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a06:	23c0      	movs	r3, #192	@ 0xc0
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	22c0      	movs	r2, #192	@ 0xc0
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d027      	beq.n	8002a64 <UART_SetConfig+0x164>
 8002a14:	22c0      	movs	r2, #192	@ 0xc0
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d82a      	bhi.n	8002a72 <UART_SetConfig+0x172>
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d011      	beq.n	8002a48 <UART_SetConfig+0x148>
 8002a24:	2280      	movs	r2, #128	@ 0x80
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d822      	bhi.n	8002a72 <UART_SetConfig+0x172>
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <UART_SetConfig+0x13a>
 8002a30:	2280      	movs	r2, #128	@ 0x80
 8002a32:	00d2      	lsls	r2, r2, #3
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <UART_SetConfig+0x156>
 8002a38:	e01b      	b.n	8002a72 <UART_SetConfig+0x172>
 8002a3a:	231b      	movs	r3, #27
 8002a3c:	2218      	movs	r2, #24
 8002a3e:	189b      	adds	r3, r3, r2
 8002a40:	19db      	adds	r3, r3, r7
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e021      	b.n	8002a8c <UART_SetConfig+0x18c>
 8002a48:	231b      	movs	r3, #27
 8002a4a:	2218      	movs	r2, #24
 8002a4c:	189b      	adds	r3, r3, r2
 8002a4e:	19db      	adds	r3, r3, r7
 8002a50:	2202      	movs	r2, #2
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e01a      	b.n	8002a8c <UART_SetConfig+0x18c>
 8002a56:	231b      	movs	r3, #27
 8002a58:	2218      	movs	r2, #24
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	19db      	adds	r3, r3, r7
 8002a5e:	2204      	movs	r2, #4
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	e013      	b.n	8002a8c <UART_SetConfig+0x18c>
 8002a64:	231b      	movs	r3, #27
 8002a66:	2218      	movs	r2, #24
 8002a68:	189b      	adds	r3, r3, r2
 8002a6a:	19db      	adds	r3, r3, r7
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e00c      	b.n	8002a8c <UART_SetConfig+0x18c>
 8002a72:	231b      	movs	r3, #27
 8002a74:	2218      	movs	r2, #24
 8002a76:	189b      	adds	r3, r3, r2
 8002a78:	19db      	adds	r3, r3, r7
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e005      	b.n	8002a8c <UART_SetConfig+0x18c>
 8002a80:	231b      	movs	r3, #27
 8002a82:	2218      	movs	r2, #24
 8002a84:	189b      	adds	r3, r3, r2
 8002a86:	19db      	adds	r3, r3, r7
 8002a88:	2210      	movs	r2, #16
 8002a8a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a5e      	ldr	r2, [pc, #376]	@ (8002c0c <UART_SetConfig+0x30c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d000      	beq.n	8002a98 <UART_SetConfig+0x198>
 8002a96:	e084      	b.n	8002ba2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a98:	231b      	movs	r3, #27
 8002a9a:	2218      	movs	r2, #24
 8002a9c:	189b      	adds	r3, r3, r2
 8002a9e:	19db      	adds	r3, r3, r7
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d01d      	beq.n	8002ae2 <UART_SetConfig+0x1e2>
 8002aa6:	dc20      	bgt.n	8002aea <UART_SetConfig+0x1ea>
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d015      	beq.n	8002ad8 <UART_SetConfig+0x1d8>
 8002aac:	dc1d      	bgt.n	8002aea <UART_SetConfig+0x1ea>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <UART_SetConfig+0x1b8>
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d005      	beq.n	8002ac2 <UART_SetConfig+0x1c2>
 8002ab6:	e018      	b.n	8002aea <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ab8:	f7ff fe02 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8002abc:	0003      	movs	r3, r0
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ac0:	e01c      	b.n	8002afc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ac2:	4b55      	ldr	r3, [pc, #340]	@ (8002c18 <UART_SetConfig+0x318>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d002      	beq.n	8002ad2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002acc:	4b53      	ldr	r3, [pc, #332]	@ (8002c1c <UART_SetConfig+0x31c>)
 8002ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ad0:	e014      	b.n	8002afc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002ad2:	4b53      	ldr	r3, [pc, #332]	@ (8002c20 <UART_SetConfig+0x320>)
 8002ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ad6:	e011      	b.n	8002afc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ad8:	f7ff fd62 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8002adc:	0003      	movs	r3, r0
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ae0:	e00c      	b.n	8002afc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ae8:	e008      	b.n	8002afc <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002aee:	231a      	movs	r3, #26
 8002af0:	2218      	movs	r2, #24
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	19db      	adds	r3, r3, r7
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
        break;
 8002afa:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d100      	bne.n	8002b04 <UART_SetConfig+0x204>
 8002b02:	e12f      	b.n	8002d64 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	0013      	movs	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	189b      	adds	r3, r3, r2
 8002b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d305      	bcc.n	8002b20 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d906      	bls.n	8002b2e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002b20:	231a      	movs	r3, #26
 8002b22:	2218      	movs	r2, #24
 8002b24:	189b      	adds	r3, r3, r2
 8002b26:	19db      	adds	r3, r3, r7
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e11a      	b.n	8002d64 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	6939      	ldr	r1, [r7, #16]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	000b      	movs	r3, r1
 8002b3c:	0e1b      	lsrs	r3, r3, #24
 8002b3e:	0010      	movs	r0, r2
 8002b40:	0205      	lsls	r5, r0, #8
 8002b42:	431d      	orrs	r5, r3
 8002b44:	000b      	movs	r3, r1
 8002b46:	021c      	lsls	r4, r3, #8
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68b8      	ldr	r0, [r7, #8]
 8002b56:	68f9      	ldr	r1, [r7, #12]
 8002b58:	1900      	adds	r0, r0, r4
 8002b5a:	4169      	adcs	r1, r5
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f7fd fc43 	bl	80003f4 <__aeabi_uldivmod>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	000b      	movs	r3, r1
 8002b72:	0013      	movs	r3, r2
 8002b74:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b78:	23c0      	movs	r3, #192	@ 0xc0
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d309      	bcc.n	8002b94 <UART_SetConfig+0x294>
 8002b80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b82:	2380      	movs	r3, #128	@ 0x80
 8002b84:	035b      	lsls	r3, r3, #13
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d204      	bcs.n	8002b94 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	e0e7      	b.n	8002d64 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002b94:	231a      	movs	r3, #26
 8002b96:	2218      	movs	r2, #24
 8002b98:	189b      	adds	r3, r3, r2
 8002b9a:	19db      	adds	r3, r3, r7
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e0e0      	b.n	8002d64 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	2380      	movs	r3, #128	@ 0x80
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d000      	beq.n	8002bb0 <UART_SetConfig+0x2b0>
 8002bae:	e082      	b.n	8002cb6 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002bb0:	231b      	movs	r3, #27
 8002bb2:	2218      	movs	r2, #24
 8002bb4:	189b      	adds	r3, r3, r2
 8002bb6:	19db      	adds	r3, r3, r7
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d834      	bhi.n	8002c28 <UART_SetConfig+0x328>
 8002bbe:	009a      	lsls	r2, r3, #2
 8002bc0:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <UART_SetConfig+0x324>)
 8002bc2:	18d3      	adds	r3, r2, r3
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bc8:	f7ff fd7a 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bd0:	e033      	b.n	8002c3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bd2:	f7ff fd8b 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bda:	e02e      	b.n	8002c3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <UART_SetConfig+0x318>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2210      	movs	r2, #16
 8002be2:	4013      	ands	r3, r2
 8002be4:	d002      	beq.n	8002bec <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002be6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <UART_SetConfig+0x31c>)
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bea:	e026      	b.n	8002c3a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002bec:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <UART_SetConfig+0x320>)
 8002bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bf0:	e023      	b.n	8002c3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf2:	f7ff fcd5 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bfa:	e01e      	b.n	8002c3a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bfc:	2380      	movs	r3, #128	@ 0x80
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002c02:	e01a      	b.n	8002c3a <UART_SetConfig+0x33a>
 8002c04:	efff69f3 	.word	0xefff69f3
 8002c08:	ffffcfff 	.word	0xffffcfff
 8002c0c:	40004800 	.word	0x40004800
 8002c10:	fffff4ff 	.word	0xfffff4ff
 8002c14:	40004400 	.word	0x40004400
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	003d0900 	.word	0x003d0900
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	08003310 	.word	0x08003310
      default:
        pclk = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002c2c:	231a      	movs	r3, #26
 8002c2e:	2218      	movs	r2, #24
 8002c30:	189b      	adds	r3, r3, r2
 8002c32:	19db      	adds	r3, r3, r7
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
        break;
 8002c38:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d100      	bne.n	8002c42 <UART_SetConfig+0x342>
 8002c40:	e090      	b.n	8002d64 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c44:	005a      	lsls	r2, r3, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	18d2      	adds	r2, r2, r3
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	0019      	movs	r1, r3
 8002c54:	0010      	movs	r0, r2
 8002c56:	f7fd fa57 	bl	8000108 <__udivsi3>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c60:	2b0f      	cmp	r3, #15
 8002c62:	d921      	bls.n	8002ca8 <UART_SetConfig+0x3a8>
 8002c64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	025b      	lsls	r3, r3, #9
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d21c      	bcs.n	8002ca8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	200e      	movs	r0, #14
 8002c74:	2418      	movs	r4, #24
 8002c76:	1903      	adds	r3, r0, r4
 8002c78:	19db      	adds	r3, r3, r7
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	438a      	bics	r2, r1
 8002c7e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2207      	movs	r2, #7
 8002c88:	4013      	ands	r3, r2
 8002c8a:	b299      	uxth	r1, r3
 8002c8c:	1903      	adds	r3, r0, r4
 8002c8e:	19db      	adds	r3, r3, r7
 8002c90:	1902      	adds	r2, r0, r4
 8002c92:	19d2      	adds	r2, r2, r7
 8002c94:	8812      	ldrh	r2, [r2, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	1902      	adds	r2, r0, r4
 8002ca0:	19d2      	adds	r2, r2, r7
 8002ca2:	8812      	ldrh	r2, [r2, #0]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	e05d      	b.n	8002d64 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002ca8:	231a      	movs	r3, #26
 8002caa:	2218      	movs	r2, #24
 8002cac:	189b      	adds	r3, r3, r2
 8002cae:	19db      	adds	r3, r3, r7
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e056      	b.n	8002d64 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cb6:	231b      	movs	r3, #27
 8002cb8:	2218      	movs	r2, #24
 8002cba:	189b      	adds	r3, r3, r2
 8002cbc:	19db      	adds	r3, r3, r7
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d822      	bhi.n	8002d0a <UART_SetConfig+0x40a>
 8002cc4:	009a      	lsls	r2, r3, #2
 8002cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d84 <UART_SetConfig+0x484>)
 8002cc8:	18d3      	adds	r3, r2, r3
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cce:	f7ff fcf7 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cd6:	e021      	b.n	8002d1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cd8:	f7ff fd08 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ce0:	e01c      	b.n	8002d1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ce2:	4b29      	ldr	r3, [pc, #164]	@ (8002d88 <UART_SetConfig+0x488>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d002      	beq.n	8002cf2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002cec:	4b27      	ldr	r3, [pc, #156]	@ (8002d8c <UART_SetConfig+0x48c>)
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002cf0:	e014      	b.n	8002d1c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002cf2:	4b27      	ldr	r3, [pc, #156]	@ (8002d90 <UART_SetConfig+0x490>)
 8002cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002cf6:	e011      	b.n	8002d1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf8:	f7ff fc52 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d00:	e00c      	b.n	8002d1c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d08:	e008      	b.n	8002d1c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002d0e:	231a      	movs	r3, #26
 8002d10:	2218      	movs	r2, #24
 8002d12:	189b      	adds	r3, r3, r2
 8002d14:	19db      	adds	r3, r3, r7
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
        break;
 8002d1a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d020      	beq.n	8002d64 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	085a      	lsrs	r2, r3, #1
 8002d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2a:	18d2      	adds	r2, r2, r3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	0019      	movs	r1, r3
 8002d32:	0010      	movs	r0, r2
 8002d34:	f7fd f9e8 	bl	8000108 <__udivsi3>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	d90a      	bls.n	8002d58 <UART_SetConfig+0x458>
 8002d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	025b      	lsls	r3, r3, #9
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d205      	bcs.n	8002d58 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	e005      	b.n	8002d64 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002d58:	231a      	movs	r3, #26
 8002d5a:	2218      	movs	r2, #24
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	19db      	adds	r3, r3, r7
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2200      	movs	r2, #0
 8002d68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002d70:	231a      	movs	r3, #26
 8002d72:	2218      	movs	r2, #24
 8002d74:	189b      	adds	r3, r3, r2
 8002d76:	19db      	adds	r3, r3, r7
 8002d78:	781b      	ldrb	r3, [r3, #0]
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b00e      	add	sp, #56	@ 0x38
 8002d80:	bdb0      	pop	{r4, r5, r7, pc}
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	08003334 	.word	0x08003334
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	003d0900 	.word	0x003d0900
 8002d90:	00f42400 	.word	0x00f42400

08002d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	2208      	movs	r2, #8
 8002da2:	4013      	ands	r3, r2
 8002da4:	d00b      	beq.n	8002dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a4a      	ldr	r2, [pc, #296]	@ (8002ed8 <UART_AdvFeatureConfig+0x144>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d00b      	beq.n	8002de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4a43      	ldr	r2, [pc, #268]	@ (8002edc <UART_AdvFeatureConfig+0x148>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	2202      	movs	r2, #2
 8002de6:	4013      	ands	r3, r2
 8002de8:	d00b      	beq.n	8002e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee0 <UART_AdvFeatureConfig+0x14c>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	2204      	movs	r2, #4
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d00b      	beq.n	8002e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4a34      	ldr	r2, [pc, #208]	@ (8002ee4 <UART_AdvFeatureConfig+0x150>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	2210      	movs	r2, #16
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d00b      	beq.n	8002e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee8 <UART_AdvFeatureConfig+0x154>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d00b      	beq.n	8002e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4a25      	ldr	r2, [pc, #148]	@ (8002eec <UART_AdvFeatureConfig+0x158>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	2240      	movs	r2, #64	@ 0x40
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d01d      	beq.n	8002eae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef0 <UART_AdvFeatureConfig+0x15c>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e8e:	2380      	movs	r3, #128	@ 0x80
 8002e90:	035b      	lsls	r3, r3, #13
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d10b      	bne.n	8002eae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a15      	ldr	r2, [pc, #84]	@ (8002ef4 <UART_AdvFeatureConfig+0x160>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	2280      	movs	r2, #128	@ 0x80
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef8 <UART_AdvFeatureConfig+0x164>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
  }
}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	ffff7fff 	.word	0xffff7fff
 8002edc:	fffdffff 	.word	0xfffdffff
 8002ee0:	fffeffff 	.word	0xfffeffff
 8002ee4:	fffbffff 	.word	0xfffbffff
 8002ee8:	ffffefff 	.word	0xffffefff
 8002eec:	ffffdfff 	.word	0xffffdfff
 8002ef0:	ffefffff 	.word	0xffefffff
 8002ef4:	ff9fffff 	.word	0xff9fffff
 8002ef8:	fff7ffff 	.word	0xfff7ffff

08002efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b092      	sub	sp, #72	@ 0x48
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2284      	movs	r2, #132	@ 0x84
 8002f08:	2100      	movs	r1, #0
 8002f0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f0c:	f7fd ff2c 	bl	8000d68 <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d12c      	bne.n	8002f7c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f24:	2280      	movs	r2, #128	@ 0x80
 8002f26:	0391      	lsls	r1, r2, #14
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4a46      	ldr	r2, [pc, #280]	@ (8003044 <UART_CheckIdleState+0x148>)
 8002f2c:	9200      	str	r2, [sp, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f000 f88c 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 8002f34:	1e03      	subs	r3, r0, #0
 8002f36:	d021      	beq.n	8002f7c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f38:	f3ef 8310 	mrs	r3, PRIMASK
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f42:	2301      	movs	r3, #1
 8002f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f48:	f383 8810 	msr	PRIMASK, r3
}
 8002f4c:	46c0      	nop			@ (mov r8, r8)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2180      	movs	r1, #128	@ 0x80
 8002f5a:	438a      	bics	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	f383 8810 	msr	PRIMASK, r3
}
 8002f68:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2278      	movs	r2, #120	@ 0x78
 8002f74:	2100      	movs	r1, #0
 8002f76:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e05f      	b.n	800303c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2204      	movs	r2, #4
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d146      	bne.n	8003018 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8c:	2280      	movs	r2, #128	@ 0x80
 8002f8e:	03d1      	lsls	r1, r2, #15
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4a2c      	ldr	r2, [pc, #176]	@ (8003044 <UART_CheckIdleState+0x148>)
 8002f94:	9200      	str	r2, [sp, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f000 f858 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 8002f9c:	1e03      	subs	r3, r0, #0
 8002f9e:	d03b      	beq.n	8003018 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002faa:	2301      	movs	r3, #1
 8002fac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f383 8810 	msr	PRIMASK, r3
}
 8002fb4:	46c0      	nop			@ (mov r8, r8)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4921      	ldr	r1, [pc, #132]	@ (8003048 <UART_CheckIdleState+0x14c>)
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f383 8810 	msr	PRIMASK, r3
}
 8002fd0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fd8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fda:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fdc:	2301      	movs	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			@ (mov r8, r8)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	438a      	bics	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f383 8810 	msr	PRIMASK, r3
}
 8003002:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2280      	movs	r2, #128	@ 0x80
 8003008:	2120      	movs	r1, #32
 800300a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2278      	movs	r2, #120	@ 0x78
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e011      	b.n	800303c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2280      	movs	r2, #128	@ 0x80
 8003022:	2120      	movs	r1, #32
 8003024:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2278      	movs	r2, #120	@ 0x78
 8003036:	2100      	movs	r1, #0
 8003038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b010      	add	sp, #64	@ 0x40
 8003042:	bd80      	pop	{r7, pc}
 8003044:	01ffffff 	.word	0x01ffffff
 8003048:	fffffedf 	.word	0xfffffedf

0800304c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	1dfb      	adds	r3, r7, #7
 800305a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305c:	e051      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	3301      	adds	r3, #1
 8003062:	d04e      	beq.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003064:	f7fd fe80 	bl	8000d68 <HAL_GetTick>
 8003068:	0002      	movs	r2, r0
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	429a      	cmp	r2, r3
 8003072:	d302      	bcc.n	800307a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e051      	b.n	8003122 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2204      	movs	r2, #4
 8003086:	4013      	ands	r3, r2
 8003088:	d03b      	beq.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb6>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b80      	cmp	r3, #128	@ 0x80
 800308e:	d038      	beq.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b40      	cmp	r3, #64	@ 0x40
 8003094:	d035      	beq.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	2208      	movs	r2, #8
 800309e:	4013      	ands	r3, r2
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d111      	bne.n	80030c8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2208      	movs	r2, #8
 80030aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 f83c 	bl	800312c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2284      	movs	r2, #132	@ 0x84
 80030b8:	2108      	movs	r1, #8
 80030ba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2278      	movs	r2, #120	@ 0x78
 80030c0:	2100      	movs	r1, #0
 80030c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e02c      	b.n	8003122 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	401a      	ands	r2, r3
 80030d4:	2380      	movs	r3, #128	@ 0x80
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	429a      	cmp	r2, r3
 80030da:	d112      	bne.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2280      	movs	r2, #128	@ 0x80
 80030e2:	0112      	lsls	r2, r2, #4
 80030e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 f81f 	bl	800312c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2284      	movs	r2, #132	@ 0x84
 80030f2:	2120      	movs	r1, #32
 80030f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2278      	movs	r2, #120	@ 0x78
 80030fa:	2100      	movs	r1, #0
 80030fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e00f      	b.n	8003122 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	425a      	negs	r2, r3
 8003112:	4153      	adcs	r3, r2
 8003114:	b2db      	uxtb	r3, r3
 8003116:	001a      	movs	r2, r3
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d09e      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b004      	add	sp, #16
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08e      	sub	sp, #56	@ 0x38
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003134:	f3ef 8310 	mrs	r3, PRIMASK
 8003138:	617b      	str	r3, [r7, #20]
  return(result);
 800313a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800313c:	637b      	str	r3, [r7, #52]	@ 0x34
 800313e:	2301      	movs	r3, #1
 8003140:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f383 8810 	msr	PRIMASK, r3
}
 8003148:	46c0      	nop			@ (mov r8, r8)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4926      	ldr	r1, [pc, #152]	@ (80031f0 <UART_EndRxTransfer+0xc4>)
 8003156:	400a      	ands	r2, r1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f383 8810 	msr	PRIMASK, r3
}
 8003164:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003166:	f3ef 8310 	mrs	r3, PRIMASK
 800316a:	623b      	str	r3, [r7, #32]
  return(result);
 800316c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003170:	2301      	movs	r3, #1
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	f383 8810 	msr	PRIMASK, r3
}
 800317a:	46c0      	nop			@ (mov r8, r8)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2101      	movs	r1, #1
 8003188:	438a      	bics	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003192:	f383 8810 	msr	PRIMASK, r3
}
 8003196:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319c:	2b01      	cmp	r3, #1
 800319e:	d118      	bne.n	80031d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a0:	f3ef 8310 	mrs	r3, PRIMASK
 80031a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80031a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031aa:	2301      	movs	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f383 8810 	msr	PRIMASK, r3
}
 80031b4:	46c0      	nop			@ (mov r8, r8)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2110      	movs	r1, #16
 80031c2:	438a      	bics	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f383 8810 	msr	PRIMASK, r3
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2280      	movs	r2, #128	@ 0x80
 80031d6:	2120      	movs	r1, #32
 80031d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b00e      	add	sp, #56	@ 0x38
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	fffffedf 	.word	0xfffffedf

080031f4 <memset>:
 80031f4:	0003      	movs	r3, r0
 80031f6:	1882      	adds	r2, r0, r2
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d100      	bne.n	80031fe <memset+0xa>
 80031fc:	4770      	bx	lr
 80031fe:	7019      	strb	r1, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	e7f9      	b.n	80031f8 <memset+0x4>

08003204 <__libc_init_array>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	2600      	movs	r6, #0
 8003208:	4c0c      	ldr	r4, [pc, #48]	@ (800323c <__libc_init_array+0x38>)
 800320a:	4d0d      	ldr	r5, [pc, #52]	@ (8003240 <__libc_init_array+0x3c>)
 800320c:	1b64      	subs	r4, r4, r5
 800320e:	10a4      	asrs	r4, r4, #2
 8003210:	42a6      	cmp	r6, r4
 8003212:	d109      	bne.n	8003228 <__libc_init_array+0x24>
 8003214:	2600      	movs	r6, #0
 8003216:	f000 f819 	bl	800324c <_init>
 800321a:	4c0a      	ldr	r4, [pc, #40]	@ (8003244 <__libc_init_array+0x40>)
 800321c:	4d0a      	ldr	r5, [pc, #40]	@ (8003248 <__libc_init_array+0x44>)
 800321e:	1b64      	subs	r4, r4, r5
 8003220:	10a4      	asrs	r4, r4, #2
 8003222:	42a6      	cmp	r6, r4
 8003224:	d105      	bne.n	8003232 <__libc_init_array+0x2e>
 8003226:	bd70      	pop	{r4, r5, r6, pc}
 8003228:	00b3      	lsls	r3, r6, #2
 800322a:	58eb      	ldr	r3, [r5, r3]
 800322c:	4798      	blx	r3
 800322e:	3601      	adds	r6, #1
 8003230:	e7ee      	b.n	8003210 <__libc_init_array+0xc>
 8003232:	00b3      	lsls	r3, r6, #2
 8003234:	58eb      	ldr	r3, [r5, r3]
 8003236:	4798      	blx	r3
 8003238:	3601      	adds	r6, #1
 800323a:	e7f2      	b.n	8003222 <__libc_init_array+0x1e>
 800323c:	08003360 	.word	0x08003360
 8003240:	08003360 	.word	0x08003360
 8003244:	08003364 	.word	0x08003364
 8003248:	08003360 	.word	0x08003360

0800324c <_init>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr

08003258 <_fini>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325e:	bc08      	pop	{r3}
 8003260:	469e      	mov	lr, r3
 8003262:	4770      	bx	lr
