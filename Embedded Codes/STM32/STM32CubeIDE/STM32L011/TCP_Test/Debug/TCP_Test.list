
TCP_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08003760  08003760  00004760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b4  080039b4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080039b4  080039b4  000049b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039bc  080039bc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039bc  080039bc  000049bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039c0  080039c0  000049c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080039c4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  080039d0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000304  2000012c  080039d0  0000512c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f9a  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001463  00000000  00000000  0000dfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0000f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000628  00000000  00000000  0000fc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000102bf  00000000  00000000  00010248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e23  00000000  00000000  00020507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063727  00000000  00000000  0002a32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008da51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bf8  00000000  00000000  0008da94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0008f68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003748 	.word	0x08003748

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003748 	.word	0x08003748

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <main>:
uint16_t W5500_ReceiveData(void);
void W5500_SendData(const char* msg);
void W5500_InitSocket(void);

int main(void)
{
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
    HAL_Init();
 8000452:	f000 fd85 	bl	8000f60 <HAL_Init>
    SystemClock_Config();
 8000456:	f000 fc45 	bl	8000ce4 <SystemClock_Config>
    MX_GPIO_Init();
 800045a:	f000 fbdf 	bl	8000c1c <MX_GPIO_Init>
    MX_SPI1_Init();
 800045e:	f000 fb6b 	bl	8000b38 <MX_SPI1_Init>
    MX_USART2_UART_Init();
 8000462:	f000 fba5 	bl	8000bb0 <MX_USART2_UART_Init>

    DebugPrint("=== W5500 Test ===\r\n");
 8000466:	4b47      	ldr	r3, [pc, #284]	@ (8000584 <main+0x138>)
 8000468:	0018      	movs	r0, r3
 800046a:	f000 fb3f 	bl	8000aec <DebugPrint>

    // Initialize W5500
    W5500_Reset();
 800046e:	f000 f8a1 	bl	80005b4 <W5500_Reset>
    HAL_Delay(100);
 8000472:	2064      	movs	r0, #100	@ 0x64
 8000474:	f000 fde4 	bl	8001040 <HAL_Delay>
    W5500_SetNetwork();
 8000478:	f000 f8be 	bl	80005f8 <W5500_SetNetwork>

    // Test W5500 communication
    uint8_t version = W5500_ReadReg(0x0039, CB_COMMON);
 800047c:	1dfc      	adds	r4, r7, #7
 800047e:	2100      	movs	r1, #0
 8000480:	2039      	movs	r0, #57	@ 0x39
 8000482:	f000 fa6b 	bl	800095c <W5500_ReadReg>
 8000486:	0003      	movs	r3, r0
 8000488:	7023      	strb	r3, [r4, #0]
    DebugPrint("W5500 Version: 0x");
 800048a:	4b3f      	ldr	r3, [pc, #252]	@ (8000588 <main+0x13c>)
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fb2d 	bl	8000aec <DebugPrint>
    char hex[3] = {'0'+(version>>4), '0'+(version&0xF), 0};
 8000492:	1dfb      	adds	r3, r7, #7
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	091b      	lsrs	r3, r3, #4
 8000498:	b2db      	uxtb	r3, r3
 800049a:	3330      	adds	r3, #48	@ 0x30
 800049c:	b2da      	uxtb	r2, r3
 800049e:	003b      	movs	r3, r7
 80004a0:	701a      	strb	r2, [r3, #0]
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	220f      	movs	r2, #15
 80004a8:	4013      	ands	r3, r2
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	3330      	adds	r3, #48	@ 0x30
 80004ae:	b2da      	uxtb	r2, r3
 80004b0:	003b      	movs	r3, r7
 80004b2:	705a      	strb	r2, [r3, #1]
 80004b4:	003b      	movs	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	709a      	strb	r2, [r3, #2]
    if(hex[0] > '9') hex[0] = 'A' + (hex[0]-'0'-10);
 80004ba:	003b      	movs	r3, r7
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b39      	cmp	r3, #57	@ 0x39
 80004c0:	d905      	bls.n	80004ce <main+0x82>
 80004c2:	003b      	movs	r3, r7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	3307      	adds	r3, #7
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	003b      	movs	r3, r7
 80004cc:	701a      	strb	r2, [r3, #0]
    if(hex[1] > '9') hex[1] = 'A' + (hex[1]-'0'-10);
 80004ce:	003b      	movs	r3, r7
 80004d0:	785b      	ldrb	r3, [r3, #1]
 80004d2:	2b39      	cmp	r3, #57	@ 0x39
 80004d4:	d905      	bls.n	80004e2 <main+0x96>
 80004d6:	003b      	movs	r3, r7
 80004d8:	785b      	ldrb	r3, [r3, #1]
 80004da:	3307      	adds	r3, #7
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	003b      	movs	r3, r7
 80004e0:	705a      	strb	r2, [r3, #1]
    DebugPrint(hex);
 80004e2:	003b      	movs	r3, r7
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fb01 	bl	8000aec <DebugPrint>
    DebugPrint("\r\n");
 80004ea:	4b28      	ldr	r3, [pc, #160]	@ (800058c <main+0x140>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fafd 	bl	8000aec <DebugPrint>

    if(version != 0x04) {
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b04      	cmp	r3, #4
 80004f8:	d009      	beq.n	800050e <main+0xc2>
        DebugPrint("ERROR: W5500 not detected!\r\n");
 80004fa:	4b25      	ldr	r3, [pc, #148]	@ (8000590 <main+0x144>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 faf5 	bl	8000aec <DebugPrint>
        while(1) { HAL_Delay(1000); }
 8000502:	23fa      	movs	r3, #250	@ 0xfa
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fd9a 	bl	8001040 <HAL_Delay>
 800050c:	e7f9      	b.n	8000502 <main+0xb6>
    }

    DebugPrint("W5500 detected successfully\r\n");
 800050e:	4b21      	ldr	r3, [pc, #132]	@ (8000594 <main+0x148>)
 8000510:	0018      	movs	r0, r3
 8000512:	f000 faeb 	bl	8000aec <DebugPrint>
    DebugPrint("IP: 192.168.1.100\r\n");
 8000516:	4b20      	ldr	r3, [pc, #128]	@ (8000598 <main+0x14c>)
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fae7 	bl	8000aec <DebugPrint>
    DebugPrint("Configure PC: 192.168.1.101\r\n");
 800051e:	4b1f      	ldr	r3, [pc, #124]	@ (800059c <main+0x150>)
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fae3 	bl	8000aec <DebugPrint>

    // Initialize TCP socket
    W5500_InitSocket();
 8000526:	f000 f89b 	bl	8000660 <W5500_InitSocket>

    DebugPrint("Web server ready\r\n");
 800052a:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <main+0x154>)
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fadd 	bl	8000aec <DebugPrint>
    DebugPrint("Test: http://192.168.1.100\r\n");
 8000532:	4b1c      	ldr	r3, [pc, #112]	@ (80005a4 <main+0x158>)
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fad9 	bl	8000aec <DebugPrint>

    while(1) {
        uint8_t status = W5500_ReadReg(W5500_S0_SR, CB_SOCK0);
 800053a:	1dbc      	adds	r4, r7, #6
 800053c:	2108      	movs	r1, #8
 800053e:	2003      	movs	r0, #3
 8000540:	f000 fa0c 	bl	800095c <W5500_ReadReg>
 8000544:	0003      	movs	r3, r0
 8000546:	7023      	strb	r3, [r4, #0]

        if(status == ST_ESTAB) {
 8000548:	1dbb      	adds	r3, r7, #6
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b17      	cmp	r3, #23
 800054e:	d114      	bne.n	800057a <main+0x12e>
            uint16_t len = W5500_ReceiveData();
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	f000 f8fb 	bl	800074c <W5500_ReceiveData>
 8000556:	0003      	movs	r3, r0
 8000558:	8023      	strh	r3, [r4, #0]
            if(len > 0) {
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d00b      	beq.n	800057a <main+0x12e>
                DebugPrint("HTTP Request received\r\n");
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <main+0x15c>)
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fac1 	bl	8000aec <DebugPrint>
                W5500_SendData("HTTP/1.0 200 OK\r\n\r\n<h1>STM32 Works!</h1><p>W5500 Ethernet Test</p>");
 800056a:	4b10      	ldr	r3, [pc, #64]	@ (80005ac <main+0x160>)
 800056c:	0018      	movs	r0, r3
 800056e:	f000 f953 	bl	8000818 <W5500_SendData>
                DebugPrint("Response sent\r\n");
 8000572:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <main+0x164>)
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fab9 	bl	8000aec <DebugPrint>
            }
        }

        HAL_Delay(10);
 800057a:	200a      	movs	r0, #10
 800057c:	f000 fd60 	bl	8001040 <HAL_Delay>
    while(1) {
 8000580:	e7db      	b.n	800053a <main+0xee>
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	08003760 	.word	0x08003760
 8000588:	08003778 	.word	0x08003778
 800058c:	0800378c 	.word	0x0800378c
 8000590:	08003790 	.word	0x08003790
 8000594:	080037b0 	.word	0x080037b0
 8000598:	080037d0 	.word	0x080037d0
 800059c:	080037e4 	.word	0x080037e4
 80005a0:	08003804 	.word	0x08003804
 80005a4:	08003818 	.word	0x08003818
 80005a8:	08003838 	.word	0x08003838
 80005ac:	08003850 	.word	0x08003850
 80005b0:	08003894 	.word	0x08003894

080005b4 <W5500_Reset>:
    }
}

void W5500_Reset(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    DebugPrint("Resetting W5500...\r\n");
 80005b8:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <W5500_Reset+0x40>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fa96 	bl	8000aec <DebugPrint>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80005c0:	2380      	movs	r3, #128	@ 0x80
 80005c2:	0059      	lsls	r1, r3, #1
 80005c4:	23a0      	movs	r3, #160	@ 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	2200      	movs	r2, #0
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 ff76 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005d0:	200a      	movs	r0, #10
 80005d2:	f000 fd35 	bl	8001040 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80005d6:	2380      	movs	r3, #128	@ 0x80
 80005d8:	0059      	lsls	r1, r3, #1
 80005da:	23a0      	movs	r3, #160	@ 0xa0
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	2201      	movs	r2, #1
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 ff6b 	bl	80014bc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80005e6:	2064      	movs	r0, #100	@ 0x64
 80005e8:	f000 fd2a 	bl	8001040 <HAL_Delay>
}
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	080038a4 	.word	0x080038a4

080005f8 <W5500_SetNetwork>:

void W5500_SetNetwork(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    DebugPrint("Setting network config...\r\n");
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <W5500_SetNetwork+0x50>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 fa74 	bl	8000aec <DebugPrint>
    W5500_WriteMulti(W5500_SHAR, CB_COMMON, mac_addr, 6);
 8000604:	4a11      	ldr	r2, [pc, #68]	@ (800064c <W5500_SetNetwork+0x54>)
 8000606:	2306      	movs	r3, #6
 8000608:	2100      	movs	r1, #0
 800060a:	2009      	movs	r0, #9
 800060c:	f000 f9e4 	bl	80009d8 <W5500_WriteMulti>
    W5500_WriteMulti(0x0001, CB_COMMON, gateway_addr, 4);  // Gateway
 8000610:	4a0f      	ldr	r2, [pc, #60]	@ (8000650 <W5500_SetNetwork+0x58>)
 8000612:	2304      	movs	r3, #4
 8000614:	2100      	movs	r1, #0
 8000616:	2001      	movs	r0, #1
 8000618:	f000 f9de 	bl	80009d8 <W5500_WriteMulti>
    W5500_WriteMulti(0x0005, CB_COMMON, subnet_mask, 4);   // Subnet
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <W5500_SetNetwork+0x5c>)
 800061e:	2304      	movs	r3, #4
 8000620:	2100      	movs	r1, #0
 8000622:	2005      	movs	r0, #5
 8000624:	f000 f9d8 	bl	80009d8 <W5500_WriteMulti>
    W5500_WriteMulti(W5500_SIPR, CB_COMMON, ip_addr, 4);   // IP
 8000628:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <W5500_SetNetwork+0x60>)
 800062a:	2304      	movs	r3, #4
 800062c:	2100      	movs	r1, #0
 800062e:	200f      	movs	r0, #15
 8000630:	f000 f9d2 	bl	80009d8 <W5500_WriteMulti>
    HAL_Delay(50);
 8000634:	2032      	movs	r0, #50	@ 0x32
 8000636:	f000 fd03 	bl	8001040 <HAL_Delay>
    DebugPrint("Network config complete\r\n");
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <W5500_SetNetwork+0x64>)
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fa55 	bl	8000aec <DebugPrint>
}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	080038bc 	.word	0x080038bc
 800064c:	08003934 	.word	0x08003934
 8000650:	08003944 	.word	0x08003944
 8000654:	08003940 	.word	0x08003940
 8000658:	0800393c 	.word	0x0800393c
 800065c:	080038d8 	.word	0x080038d8

08000660 <W5500_InitSocket>:

void W5500_InitSocket(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
    DebugPrint("Initializing socket...\r\n");
 8000666:	4b35      	ldr	r3, [pc, #212]	@ (800073c <W5500_InitSocket+0xdc>)
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fa3f 	bl	8000aec <DebugPrint>

    // Set TCP mode
    W5500_WriteReg(W5500_S0_MR, CB_SOCK0, 0x01);
 800066e:	2201      	movs	r2, #1
 8000670:	2108      	movs	r1, #8
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f930 	bl	80008d8 <W5500_WriteReg>

    // Set port 80
    W5500_WriteReg(W5500_S0_PORT, CB_SOCK0, 0x00);
 8000678:	2200      	movs	r2, #0
 800067a:	2108      	movs	r1, #8
 800067c:	2004      	movs	r0, #4
 800067e:	f000 f92b 	bl	80008d8 <W5500_WriteReg>
    W5500_WriteReg(W5500_S0_PORT+1, CB_SOCK0, 80);
 8000682:	2250      	movs	r2, #80	@ 0x50
 8000684:	2108      	movs	r1, #8
 8000686:	2005      	movs	r0, #5
 8000688:	f000 f926 	bl	80008d8 <W5500_WriteReg>

    // Open socket
    W5500_WriteReg(W5500_S0_CR, CB_SOCK0, CMD_OPEN);
 800068c:	2201      	movs	r2, #1
 800068e:	2108      	movs	r1, #8
 8000690:	2001      	movs	r0, #1
 8000692:	f000 f921 	bl	80008d8 <W5500_WriteReg>
    HAL_Delay(10);
 8000696:	200a      	movs	r0, #10
 8000698:	f000 fcd2 	bl	8001040 <HAL_Delay>

    // Start listening
    W5500_WriteReg(W5500_S0_CR, CB_SOCK0, CMD_LISTEN);
 800069c:	2202      	movs	r2, #2
 800069e:	2108      	movs	r1, #8
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 f919 	bl	80008d8 <W5500_WriteReg>
    HAL_Delay(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f000 fcca 	bl	8001040 <HAL_Delay>

    uint8_t status = W5500_ReadReg(W5500_S0_SR, CB_SOCK0);
 80006ac:	1dfc      	adds	r4, r7, #7
 80006ae:	2108      	movs	r1, #8
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f953 	bl	800095c <W5500_ReadReg>
 80006b6:	0003      	movs	r3, r0
 80006b8:	7023      	strb	r3, [r4, #0]
    DebugPrint("Socket status: 0x");
 80006ba:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <W5500_InitSocket+0xe0>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fa15 	bl	8000aec <DebugPrint>
    char hex[3] = {'0'+(status>>4), '0'+(status&0xF), 0};
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	091b      	lsrs	r3, r3, #4
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	3330      	adds	r3, #48	@ 0x30
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	220f      	movs	r2, #15
 80006d8:	4013      	ands	r3, r2
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	3330      	adds	r3, #48	@ 0x30
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	705a      	strb	r2, [r3, #1]
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	709a      	strb	r2, [r3, #2]
    if(hex[0] > '9') hex[0] = 'A' + (hex[0]-'0'-10);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b39      	cmp	r3, #57	@ 0x39
 80006f0:	d905      	bls.n	80006fe <W5500_InitSocket+0x9e>
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3307      	adds	r3, #7
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	701a      	strb	r2, [r3, #0]
    if(hex[1] > '9') hex[1] = 'A' + (hex[1]-'0'-10);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	2b39      	cmp	r3, #57	@ 0x39
 8000704:	d905      	bls.n	8000712 <W5500_InitSocket+0xb2>
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	3307      	adds	r3, #7
 800070c:	b2da      	uxtb	r2, r3
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	705a      	strb	r2, [r3, #1]
    DebugPrint(hex);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	0018      	movs	r0, r3
 8000716:	f000 f9e9 	bl	8000aec <DebugPrint>
    if(status == 0x14) DebugPrint(" (LISTENING)");
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b14      	cmp	r3, #20
 8000720:	d103      	bne.n	800072a <W5500_InitSocket+0xca>
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <W5500_InitSocket+0xe4>)
 8000724:	0018      	movs	r0, r3
 8000726:	f000 f9e1 	bl	8000aec <DebugPrint>
    DebugPrint("\r\n");
 800072a:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <W5500_InitSocket+0xe8>)
 800072c:	0018      	movs	r0, r3
 800072e:	f000 f9dd 	bl	8000aec <DebugPrint>
}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b003      	add	sp, #12
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	080038f4 	.word	0x080038f4
 8000740:	08003910 	.word	0x08003910
 8000744:	08003924 	.word	0x08003924
 8000748:	0800378c 	.word	0x0800378c

0800074c <W5500_ReceiveData>:

uint16_t W5500_ReceiveData(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
    uint16_t len = W5500_ReadReg(W5500_S0_RX_RSR, CB_SOCK0) << 8;
 8000752:	2108      	movs	r1, #8
 8000754:	2026      	movs	r0, #38	@ 0x26
 8000756:	f000 f901 	bl	800095c <W5500_ReadReg>
 800075a:	0003      	movs	r3, r0
 800075c:	001a      	movs	r2, r3
 800075e:	1dbb      	adds	r3, r7, #6
 8000760:	0212      	lsls	r2, r2, #8
 8000762:	801a      	strh	r2, [r3, #0]
    len |= W5500_ReadReg(W5500_S0_RX_RSR+1, CB_SOCK0);
 8000764:	2108      	movs	r1, #8
 8000766:	2027      	movs	r0, #39	@ 0x27
 8000768:	f000 f8f8 	bl	800095c <W5500_ReadReg>
 800076c:	0003      	movs	r3, r0
 800076e:	0019      	movs	r1, r3
 8000770:	1dbb      	adds	r3, r7, #6
 8000772:	1dba      	adds	r2, r7, #6
 8000774:	8812      	ldrh	r2, [r2, #0]
 8000776:	430a      	orrs	r2, r1
 8000778:	801a      	strh	r2, [r3, #0]

    if(len == 0 || len > 31) return 0;
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <W5500_ReceiveData+0x3e>
 8000782:	1dbb      	adds	r3, r7, #6
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	2b1f      	cmp	r3, #31
 8000788:	d901      	bls.n	800078e <W5500_ReceiveData+0x42>
 800078a:	2300      	movs	r3, #0
 800078c:	e03d      	b.n	800080a <W5500_ReceiveData+0xbe>

    uint16_t ptr = W5500_ReadReg(W5500_S0_RX_RD, CB_SOCK0) << 8;
 800078e:	2108      	movs	r1, #8
 8000790:	2028      	movs	r0, #40	@ 0x28
 8000792:	f000 f8e3 	bl	800095c <W5500_ReadReg>
 8000796:	0003      	movs	r3, r0
 8000798:	001a      	movs	r2, r3
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	0212      	lsls	r2, r2, #8
 800079e:	801a      	strh	r2, [r3, #0]
    ptr |= W5500_ReadReg(W5500_S0_RX_RD+1, CB_SOCK0);
 80007a0:	2108      	movs	r1, #8
 80007a2:	2029      	movs	r0, #41	@ 0x29
 80007a4:	f000 f8da 	bl	800095c <W5500_ReadReg>
 80007a8:	0003      	movs	r3, r0
 80007aa:	0019      	movs	r1, r3
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	8812      	ldrh	r2, [r2, #0]
 80007b2:	430a      	orrs	r2, r1
 80007b4:	801a      	strh	r2, [r3, #0]

    W5500_ReadMulti(ptr, CB_SOCK0_RX, rx_buffer, len);
 80007b6:	1dbb      	adds	r3, r7, #6
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b2d9      	uxtb	r1, r3
 80007bc:	4a15      	ldr	r2, [pc, #84]	@ (8000814 <W5500_ReceiveData+0xc8>)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	8818      	ldrh	r0, [r3, #0]
 80007c2:	000b      	movs	r3, r1
 80007c4:	2118      	movs	r1, #24
 80007c6:	f000 f94d 	bl	8000a64 <W5500_ReadMulti>

    ptr += len;
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	1d39      	adds	r1, r7, #4
 80007ce:	1dba      	adds	r2, r7, #6
 80007d0:	8809      	ldrh	r1, [r1, #0]
 80007d2:	8812      	ldrh	r2, [r2, #0]
 80007d4:	188a      	adds	r2, r1, r2
 80007d6:	801a      	strh	r2, [r3, #0]
    W5500_WriteReg(W5500_S0_RX_RD, CB_SOCK0, ptr >> 8);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	001a      	movs	r2, r3
 80007e4:	2108      	movs	r1, #8
 80007e6:	2028      	movs	r0, #40	@ 0x28
 80007e8:	f000 f876 	bl	80008d8 <W5500_WriteReg>
    W5500_WriteReg(W5500_S0_RX_RD+1, CB_SOCK0, ptr & 0xFF);
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	001a      	movs	r2, r3
 80007f4:	2108      	movs	r1, #8
 80007f6:	2029      	movs	r0, #41	@ 0x29
 80007f8:	f000 f86e 	bl	80008d8 <W5500_WriteReg>
    W5500_WriteReg(W5500_S0_CR, CB_SOCK0, CMD_RECV);
 80007fc:	2240      	movs	r2, #64	@ 0x40
 80007fe:	2108      	movs	r1, #8
 8000800:	2001      	movs	r0, #1
 8000802:	f000 f869 	bl	80008d8 <W5500_WriteReg>

    return len;
 8000806:	1dbb      	adds	r3, r7, #6
 8000808:	881b      	ldrh	r3, [r3, #0]
}
 800080a:	0018      	movs	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	b002      	add	sp, #8
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	20000108 	.word	0x20000108

08000818 <W5500_SendData>:

void W5500_SendData(const char* msg)
{
 8000818:	b5b0      	push	{r4, r5, r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    uint8_t len = 0;
 8000820:	230f      	movs	r3, #15
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
    while(msg[len] && len < 100) len++;
 8000828:	e005      	b.n	8000836 <W5500_SendData+0x1e>
 800082a:	210f      	movs	r1, #15
 800082c:	187b      	adds	r3, r7, r1
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	187b      	adds	r3, r7, r1
 8000832:	3201      	adds	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	210f      	movs	r1, #15
 8000838:	187b      	adds	r3, r7, r1
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	18d3      	adds	r3, r2, r3
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d003      	beq.n	800084e <W5500_SendData+0x36>
 8000846:	187b      	adds	r3, r7, r1
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b63      	cmp	r3, #99	@ 0x63
 800084c:	d9ed      	bls.n	800082a <W5500_SendData+0x12>

    uint16_t ptr = W5500_ReadReg(W5500_S0_TX_WR, CB_SOCK0) << 8;
 800084e:	2108      	movs	r1, #8
 8000850:	2024      	movs	r0, #36	@ 0x24
 8000852:	f000 f883 	bl	800095c <W5500_ReadReg>
 8000856:	0003      	movs	r3, r0
 8000858:	001a      	movs	r2, r3
 800085a:	240c      	movs	r4, #12
 800085c:	193b      	adds	r3, r7, r4
 800085e:	0212      	lsls	r2, r2, #8
 8000860:	801a      	strh	r2, [r3, #0]
    ptr |= W5500_ReadReg(W5500_S0_TX_WR+1, CB_SOCK0);
 8000862:	2108      	movs	r1, #8
 8000864:	2025      	movs	r0, #37	@ 0x25
 8000866:	f000 f879 	bl	800095c <W5500_ReadReg>
 800086a:	0003      	movs	r3, r0
 800086c:	0019      	movs	r1, r3
 800086e:	193b      	adds	r3, r7, r4
 8000870:	193a      	adds	r2, r7, r4
 8000872:	8812      	ldrh	r2, [r2, #0]
 8000874:	430a      	orrs	r2, r1
 8000876:	801a      	strh	r2, [r3, #0]

    W5500_WriteMulti(ptr, CB_SOCK0_TX, (const uint8_t*)msg, len);
 8000878:	250f      	movs	r5, #15
 800087a:	197b      	adds	r3, r7, r5
 800087c:	7819      	ldrb	r1, [r3, #0]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	193b      	adds	r3, r7, r4
 8000882:	8818      	ldrh	r0, [r3, #0]
 8000884:	000b      	movs	r3, r1
 8000886:	2110      	movs	r1, #16
 8000888:	f000 f8a6 	bl	80009d8 <W5500_WriteMulti>

    ptr += len;
 800088c:	197b      	adds	r3, r7, r5
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b299      	uxth	r1, r3
 8000892:	193b      	adds	r3, r7, r4
 8000894:	193a      	adds	r2, r7, r4
 8000896:	8812      	ldrh	r2, [r2, #0]
 8000898:	188a      	adds	r2, r1, r2
 800089a:	801a      	strh	r2, [r3, #0]
    W5500_WriteReg(W5500_S0_TX_WR, CB_SOCK0, ptr >> 8);
 800089c:	193b      	adds	r3, r7, r4
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	001a      	movs	r2, r3
 80008a8:	2108      	movs	r1, #8
 80008aa:	2024      	movs	r0, #36	@ 0x24
 80008ac:	f000 f814 	bl	80008d8 <W5500_WriteReg>
    W5500_WriteReg(W5500_S0_TX_WR+1, CB_SOCK0, ptr & 0xFF);
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	001a      	movs	r2, r3
 80008b8:	2108      	movs	r1, #8
 80008ba:	2025      	movs	r0, #37	@ 0x25
 80008bc:	f000 f80c 	bl	80008d8 <W5500_WriteReg>
    W5500_WriteReg(W5500_S0_CR, CB_SOCK0, CMD_SEND);
 80008c0:	2220      	movs	r2, #32
 80008c2:	2108      	movs	r1, #8
 80008c4:	2001      	movs	r0, #1
 80008c6:	f000 f807 	bl	80008d8 <W5500_WriteReg>
    HAL_Delay(5);
 80008ca:	2005      	movs	r0, #5
 80008cc:	f000 fbb8 	bl	8001040 <HAL_Delay>
}
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b004      	add	sp, #16
 80008d6:	bdb0      	pop	{r4, r5, r7, pc}

080008d8 <W5500_WriteReg>:

void W5500_WriteReg(uint16_t addr, uint8_t cb, uint8_t data)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	0004      	movs	r4, r0
 80008e0:	0008      	movs	r0, r1
 80008e2:	0011      	movs	r1, r2
 80008e4:	1dbb      	adds	r3, r7, #6
 80008e6:	1c22      	adds	r2, r4, #0
 80008e8:	801a      	strh	r2, [r3, #0]
 80008ea:	1d7b      	adds	r3, r7, #5
 80008ec:	1c02      	adds	r2, r0, #0
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	1c0a      	adds	r2, r1, #0
 80008f4:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008f6:	23a0      	movs	r3, #160	@ 0xa0
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	2200      	movs	r2, #0
 80008fc:	2110      	movs	r1, #16
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fddc 	bl	80014bc <HAL_GPIO_WritePin>
    uint8_t cmd[4] = {addr>>8, addr&0xFF, cb|0x04, data};
 8000904:	1dbb      	adds	r3, r7, #6
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2da      	uxtb	r2, r3
 800090e:	210c      	movs	r1, #12
 8000910:	187b      	adds	r3, r7, r1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	1dbb      	adds	r3, r7, #6
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	187b      	adds	r3, r7, r1
 800091c:	705a      	strb	r2, [r3, #1]
 800091e:	1d7b      	adds	r3, r7, #5
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2204      	movs	r2, #4
 8000924:	4313      	orrs	r3, r2
 8000926:	b2da      	uxtb	r2, r3
 8000928:	187b      	adds	r3, r7, r1
 800092a:	709a      	strb	r2, [r3, #2]
 800092c:	187b      	adds	r3, r7, r1
 800092e:	1d3a      	adds	r2, r7, #4
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	70da      	strb	r2, [r3, #3]
    HAL_SPI_Transmit(&hspi1, cmd, 4, 100);
 8000934:	1879      	adds	r1, r7, r1
 8000936:	4808      	ldr	r0, [pc, #32]	@ (8000958 <W5500_WriteReg+0x80>)
 8000938:	2364      	movs	r3, #100	@ 0x64
 800093a:	2204      	movs	r2, #4
 800093c:	f001 fbe5 	bl	800210a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000940:	23a0      	movs	r3, #160	@ 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	2201      	movs	r2, #1
 8000946:	2110      	movs	r1, #16
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fdb7 	bl	80014bc <HAL_GPIO_WritePin>
}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b005      	add	sp, #20
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	20000028 	.word	0x20000028

0800095c <W5500_ReadReg>:

uint8_t W5500_ReadReg(uint16_t addr, uint8_t cb)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	0002      	movs	r2, r0
 8000964:	1dbb      	adds	r3, r7, #6
 8000966:	801a      	strh	r2, [r3, #0]
 8000968:	1d7b      	adds	r3, r7, #5
 800096a:	1c0a      	adds	r2, r1, #0
 800096c:	701a      	strb	r2, [r3, #0]
    uint8_t data;
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800096e:	23a0      	movs	r3, #160	@ 0xa0
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	2200      	movs	r2, #0
 8000974:	2110      	movs	r1, #16
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fda0 	bl	80014bc <HAL_GPIO_WritePin>
    uint8_t cmd[3] = {addr>>8, addr&0xFF, cb};
 800097c:	1dbb      	adds	r3, r7, #6
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	b29b      	uxth	r3, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	210c      	movs	r1, #12
 8000988:	187b      	adds	r3, r7, r1
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	1dbb      	adds	r3, r7, #6
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	187b      	adds	r3, r7, r1
 8000994:	705a      	strb	r2, [r3, #1]
 8000996:	187b      	adds	r3, r7, r1
 8000998:	1d7a      	adds	r2, r7, #5
 800099a:	7812      	ldrb	r2, [r2, #0]
 800099c:	709a      	strb	r2, [r3, #2]
    HAL_SPI_Transmit(&hspi1, cmd, 3, 100);
 800099e:	1879      	adds	r1, r7, r1
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <W5500_ReadReg+0x78>)
 80009a2:	2364      	movs	r3, #100	@ 0x64
 80009a4:	2203      	movs	r2, #3
 80009a6:	f001 fbb0 	bl	800210a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &data, 1, 100);
 80009aa:	240f      	movs	r4, #15
 80009ac:	1939      	adds	r1, r7, r4
 80009ae:	4809      	ldr	r0, [pc, #36]	@ (80009d4 <W5500_ReadReg+0x78>)
 80009b0:	2364      	movs	r3, #100	@ 0x64
 80009b2:	2201      	movs	r2, #1
 80009b4:	f001 fcfa 	bl	80023ac <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80009b8:	23a0      	movs	r3, #160	@ 0xa0
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	2201      	movs	r2, #1
 80009be:	2110      	movs	r1, #16
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 fd7b 	bl	80014bc <HAL_GPIO_WritePin>
    return data;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	781b      	ldrb	r3, [r3, #0]
}
 80009ca:	0018      	movs	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b005      	add	sp, #20
 80009d0:	bd90      	pop	{r4, r7, pc}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	20000028 	.word	0x20000028

080009d8 <W5500_WriteMulti>:

void W5500_WriteMulti(uint16_t addr, uint8_t cb, const uint8_t* data, uint8_t len)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	0004      	movs	r4, r0
 80009e0:	0008      	movs	r0, r1
 80009e2:	603a      	str	r2, [r7, #0]
 80009e4:	0019      	movs	r1, r3
 80009e6:	1dbb      	adds	r3, r7, #6
 80009e8:	1c22      	adds	r2, r4, #0
 80009ea:	801a      	strh	r2, [r3, #0]
 80009ec:	1d7b      	adds	r3, r7, #5
 80009ee:	1c02      	adds	r2, r0, #0
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	1c0a      	adds	r2, r1, #0
 80009f6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80009f8:	23a0      	movs	r3, #160	@ 0xa0
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	2200      	movs	r2, #0
 80009fe:	2110      	movs	r1, #16
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fd5b 	bl	80014bc <HAL_GPIO_WritePin>
    uint8_t cmd[3] = {addr>>8, addr&0xFF, cb|0x04};
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	0a1b      	lsrs	r3, r3, #8
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	210c      	movs	r1, #12
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	1dbb      	adds	r3, r7, #6
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	705a      	strb	r2, [r3, #1]
 8000a20:	1d7b      	adds	r3, r7, #5
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2204      	movs	r2, #4
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	709a      	strb	r2, [r3, #2]
    HAL_SPI_Transmit(&hspi1, cmd, 3, 100);
 8000a2e:	1879      	adds	r1, r7, r1
 8000a30:	480b      	ldr	r0, [pc, #44]	@ (8000a60 <W5500_WriteMulti+0x88>)
 8000a32:	2364      	movs	r3, #100	@ 0x64
 8000a34:	2203      	movs	r2, #3
 8000a36:	f001 fb68 	bl	800210a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)data, len, 100);
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	6839      	ldr	r1, [r7, #0]
 8000a42:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <W5500_WriteMulti+0x88>)
 8000a44:	2364      	movs	r3, #100	@ 0x64
 8000a46:	f001 fb60 	bl	800210a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a4a:	23a0      	movs	r3, #160	@ 0xa0
 8000a4c:	05db      	lsls	r3, r3, #23
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2110      	movs	r1, #16
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 fd32 	bl	80014bc <HAL_GPIO_WritePin>
}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b005      	add	sp, #20
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	20000028 	.word	0x20000028

08000a64 <W5500_ReadMulti>:

void W5500_ReadMulti(uint16_t addr, uint8_t cb, uint8_t* data, uint8_t len)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	0004      	movs	r4, r0
 8000a6c:	0008      	movs	r0, r1
 8000a6e:	603a      	str	r2, [r7, #0]
 8000a70:	0019      	movs	r1, r3
 8000a72:	1dbb      	adds	r3, r7, #6
 8000a74:	1c22      	adds	r2, r4, #0
 8000a76:	801a      	strh	r2, [r3, #0]
 8000a78:	1d7b      	adds	r3, r7, #5
 8000a7a:	1c02      	adds	r2, r0, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	1c0a      	adds	r2, r1, #0
 8000a82:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a84:	23a0      	movs	r3, #160	@ 0xa0
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f000 fd15 	bl	80014bc <HAL_GPIO_WritePin>
    uint8_t cmd[3] = {addr>>8, addr&0xFF, cb};
 8000a92:	1dbb      	adds	r3, r7, #6
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	210c      	movs	r1, #12
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	1dbb      	adds	r3, r7, #6
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	705a      	strb	r2, [r3, #1]
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	1d7a      	adds	r2, r7, #5
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	709a      	strb	r2, [r3, #2]
    HAL_SPI_Transmit(&hspi1, cmd, 3, 100);
 8000ab4:	1879      	adds	r1, r7, r1
 8000ab6:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <W5500_ReadMulti+0x84>)
 8000ab8:	2364      	movs	r3, #100	@ 0x64
 8000aba:	2203      	movs	r2, #3
 8000abc:	f001 fb25 	bl	800210a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, len, 100);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	6839      	ldr	r1, [r7, #0]
 8000ac8:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <W5500_ReadMulti+0x84>)
 8000aca:	2364      	movs	r3, #100	@ 0x64
 8000acc:	f001 fc6e 	bl	80023ac <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ad0:	23a0      	movs	r3, #160	@ 0xa0
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 fcef 	bl	80014bc <HAL_GPIO_WritePin>
}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b005      	add	sp, #20
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	20000028 	.word	0x20000028

08000aec <DebugPrint>:

void DebugPrint(const char* msg)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    uint16_t len = 0;
 8000af4:	230e      	movs	r3, #14
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2200      	movs	r2, #0
 8000afa:	801a      	strh	r2, [r3, #0]
    while(msg[len]) len++;
 8000afc:	e005      	b.n	8000b0a <DebugPrint+0x1e>
 8000afe:	210e      	movs	r1, #14
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	881a      	ldrh	r2, [r3, #0]
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	3201      	adds	r2, #1
 8000b08:	801a      	strh	r2, [r3, #0]
 8000b0a:	210e      	movs	r1, #14
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	18d3      	adds	r3, r2, r3
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1f1      	bne.n	8000afe <DebugPrint+0x12>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 1000);
 8000b1a:	23fa      	movs	r3, #250	@ 0xfa
 8000b1c:	009c      	lsls	r4, r3, #2
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	881a      	ldrh	r2, [r3, #0]
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <DebugPrint+0x48>)
 8000b26:	0023      	movs	r3, r4
 8000b28:	f002 f8c8 	bl	8002cbc <HAL_UART_Transmit>
}
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b005      	add	sp, #20
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	20000080 	.word	0x20000080

08000b38 <MX_SPI1_Init>:

void MX_SPI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_SPI1_Init+0x6c>)
 8000b3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b40:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <MX_SPI1_Init+0x6c>)
 8000b42:	2180      	movs	r1, #128	@ 0x80
 8000b44:	0149      	lsls	r1, r1, #5
 8000b46:	430a      	orrs	r2, r1
 8000b48:	635a      	str	r2, [r3, #52]	@ 0x34

    hspi1.Instance = SPI1;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b4c:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <MX_SPI1_Init+0x74>)
 8000b4e:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b50:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b52:	2282      	movs	r2, #130	@ 0x82
 8000b54:	0052      	lsls	r2, r2, #1
 8000b56:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b72:	2280      	movs	r2, #128	@ 0x80
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 7;
 8000b90:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b92:	2207      	movs	r2, #7
 8000b94:	62da      	str	r2, [r3, #44]	@ 0x2c

    HAL_SPI_Init(&hspi1);
 8000b96:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <MX_SPI1_Init+0x70>)
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 fa2d 	bl	8001ff8 <HAL_SPI_Init>
}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	20000028 	.word	0x20000028
 8000bac:	40013000 	.word	0x40013000

08000bb0 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bb8:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <MX_USART2_UART_Init+0x60>)
 8000bba:	2180      	movs	r1, #128	@ 0x80
 8000bbc:	0289      	lsls	r1, r1, #10
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	639a      	str	r2, [r3, #56]	@ 0x38

    huart2.Instance = USART2;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <MX_USART2_UART_Init+0x64>)
 8000bc4:	4a14      	ldr	r2, [pc, #80]	@ (8000c18 <MX_USART2_UART_Init+0x68>)
 8000bc6:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_USART2_UART_Init+0x64>)
 8000bca:	22e1      	movs	r2, #225	@ 0xe1
 8000bcc:	0252      	lsls	r2, r2, #9
 8000bce:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <MX_USART2_UART_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_USART2_UART_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <MX_USART2_UART_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_USART2_UART_Init+0x64>)
 8000be4:	2208      	movs	r2, #8
 8000be6:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <MX_USART2_UART_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_USART2_UART_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <MX_USART2_UART_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_USART2_UART_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_UART_Init(&huart2);
 8000c00:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <MX_USART2_UART_Init+0x64>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f002 f806 	bl	8002c14 <HAL_UART_Init>
}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	40021000 	.word	0x40021000
 8000c14:	20000080 	.word	0x20000080
 8000c18:	40004400 	.word	0x40004400

08000c1c <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <MX_GPIO_Init+0xc4>)
 8000c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce0 <MX_GPIO_Init+0xc4>)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <MX_GPIO_Init+0xc4>)
 8000c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c32:	2201      	movs	r2, #1
 8000c34:	4013      	ands	r3, r2
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	2314      	movs	r3, #20
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f002 fd54 	bl	80036f0 <memset>

    // SPI1 pins
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	22e0      	movs	r2, #224	@ 0xe0
 8000c4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2202      	movs	r2, #2
 8000c52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	1d3a      	adds	r2, r7, #4
 8000c68:	23a0      	movs	r3, #160	@ 0xa0
 8000c6a:	05db      	lsls	r3, r3, #23
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 fabe 	bl	80011f0 <HAL_GPIO_Init>

    // USART2 TX
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2204      	movs	r2, #4
 8000c78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2203      	movs	r2, #3
 8000c8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2204      	movs	r2, #4
 8000c90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	1d3a      	adds	r2, r7, #4
 8000c94:	23a0      	movs	r3, #160	@ 0xa0
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 faa8 	bl	80011f0 <HAL_GPIO_Init>

    // W5500 control pins
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2288      	movs	r2, #136	@ 0x88
 8000ca4:	0052      	lsls	r2, r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2201      	movs	r2, #1
 8000cac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	1d3a      	adds	r2, r7, #4
 8000cbc:	23a0      	movs	r3, #160	@ 0xa0
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 fa94 	bl	80011f0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_SET);
 8000cc8:	2388      	movs	r3, #136	@ 0x88
 8000cca:	0059      	lsls	r1, r3, #1
 8000ccc:	23a0      	movs	r3, #160	@ 0xa0
 8000cce:	05db      	lsls	r3, r3, #23
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 fbf2 	bl	80014bc <HAL_GPIO_WritePin>
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b006      	add	sp, #24
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b093      	sub	sp, #76	@ 0x4c
 8000ce8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	2414      	movs	r4, #20
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2334      	movs	r3, #52	@ 0x34
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f002 fcfb 	bl	80036f0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfa:	003b      	movs	r3, r7
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	2314      	movs	r3, #20
 8000d00:	001a      	movs	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	f002 fcf4 	bl	80036f0 <memset>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d08:	0021      	movs	r1, r4
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2210      	movs	r2, #16
 8000d0e:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2201      	movs	r2, #1
 8000d14:	619a      	str	r2, [r3, #24]
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	22a0      	movs	r2, #160	@ 0xa0
 8000d20:	0212      	lsls	r2, r2, #8
 8000d22:	621a      	str	r2, [r3, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f000 fbe3 	bl	80014f8 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000d32:	003b      	movs	r3, r7
 8000d34:	220f      	movs	r2, #15
 8000d36:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d38:	003b      	movs	r3, r7
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	003b      	movs	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d44:	003b      	movs	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4a:	003b      	movs	r3, r7
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000d50:	003b      	movs	r3, r7
 8000d52:	2100      	movs	r1, #0
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 ff4b 	bl	8001bf0 <HAL_RCC_ClockConfig>
}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b013      	add	sp, #76	@ 0x4c
 8000d60:	bd90      	pop	{r4, r7, pc}
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d68:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <HAL_MspInit+0x24>)
 8000d6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_MspInit+0x24>)
 8000d6e:	2101      	movs	r1, #1
 8000d70:	430a      	orrs	r2, r1
 8000d72:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <HAL_MspInit+0x24>)
 8000d76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d78:	4b03      	ldr	r3, [pc, #12]	@ (8000d88 <HAL_MspInit+0x24>)
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	0549      	lsls	r1, r1, #21
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	240c      	movs	r4, #12
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	2314      	movs	r3, #20
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f002 fca6 	bl	80036f0 <memset>
  if(hspi->Instance==SPI1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a18      	ldr	r2, [pc, #96]	@ (8000e0c <HAL_SPI_MspInit+0x80>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d129      	bne.n	8000e02 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dae:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <HAL_SPI_MspInit+0x84>)
 8000db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000db2:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <HAL_SPI_MspInit+0x84>)
 8000db4:	2180      	movs	r1, #128	@ 0x80
 8000db6:	0149      	lsls	r1, r1, #5
 8000db8:	430a      	orrs	r2, r1
 8000dba:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <HAL_SPI_MspInit+0x84>)
 8000dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <HAL_SPI_MspInit+0x84>)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <HAL_SPI_MspInit+0x84>)
 8000dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4013      	ands	r3, r2
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dd4:	0021      	movs	r1, r4
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	22e0      	movs	r2, #224	@ 0xe0
 8000dda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2202      	movs	r2, #2
 8000de0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2203      	movs	r2, #3
 8000dec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	187a      	adds	r2, r7, r1
 8000df6:	23a0      	movs	r3, #160	@ 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 f9f7 	bl	80011f0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b009      	add	sp, #36	@ 0x24
 8000e08:	bd90      	pop	{r4, r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	40013000 	.word	0x40013000
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	240c      	movs	r4, #12
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	0018      	movs	r0, r3
 8000e22:	2314      	movs	r3, #20
 8000e24:	001a      	movs	r2, r3
 8000e26:	2100      	movs	r1, #0
 8000e28:	f002 fc62 	bl	80036f0 <memset>
  if(huart->Instance==USART2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a18      	ldr	r2, [pc, #96]	@ (8000e94 <HAL_UART_MspInit+0x80>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d129      	bne.n	8000e8a <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_UART_MspInit+0x84>)
 8000e38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e3a:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <HAL_UART_MspInit+0x84>)
 8000e3c:	2180      	movs	r1, #128	@ 0x80
 8000e3e:	0289      	lsls	r1, r1, #10
 8000e40:	430a      	orrs	r2, r1
 8000e42:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HAL_UART_MspInit+0x84>)
 8000e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e48:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <HAL_UART_MspInit+0x84>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_UART_MspInit+0x84>)
 8000e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e54:	2201      	movs	r2, #1
 8000e56:	4013      	ands	r3, r2
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000e5c:	0021      	movs	r1, r4
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	4a0e      	ldr	r2, [pc, #56]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2202      	movs	r2, #2
 8000e68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2203      	movs	r2, #3
 8000e74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2204      	movs	r2, #4
 8000e7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	187a      	adds	r2, r7, r1
 8000e7e:	23a0      	movs	r3, #160	@ 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f000 f9b3 	bl	80011f0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b009      	add	sp, #36	@ 0x24
 8000e90:	bd90      	pop	{r4, r7, pc}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	00008004 	.word	0x00008004

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea4:	46c0      	nop			@ (mov r8, r8)
 8000ea6:	e7fd      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	e7fd      	b.n	8000eac <HardFault_Handler+0x4>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb4:	46c0      	nop			@ (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 f89e 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000edc:	4813      	ldr	r0, [pc, #76]	@ (8000f2c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ede:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee0:	f7ff fff7 	bl	8000ed2 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000ee4:	4812      	ldr	r0, [pc, #72]	@ (8000f30 <LoopForever+0x6>)
    LDR R1, [R0]
 8000ee6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ee8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <LoopForever+0xa>)
    CMP R1, R2
 8000eec:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000eee:	d105      	bne.n	8000efc <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000ef0:	4811      	ldr	r0, [pc, #68]	@ (8000f38 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000ef2:	4912      	ldr	r1, [pc, #72]	@ (8000f3c <LoopForever+0x12>)
    STR R1, [R0]
 8000ef4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000ef6:	4812      	ldr	r0, [pc, #72]	@ (8000f40 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000ef8:	4912      	ldr	r1, [pc, #72]	@ (8000f44 <LoopForever+0x1a>)
    STR R1, [R0]
 8000efa:	6001      	str	r1, [r0, #0]

08000efc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	4812      	ldr	r0, [pc, #72]	@ (8000f48 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000efe:	4913      	ldr	r1, [pc, #76]	@ (8000f4c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000f00:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <LoopForever+0x26>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000f14:	4c10      	ldr	r4, [pc, #64]	@ (8000f58 <LoopForever+0x2e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f22:	f002 fbed 	bl	8003700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f26:	f7ff fa91 	bl	800044c <main>

08000f2a <LoopForever>:

LoopForever:
    b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
   ldr   r0, =_estack
 8000f2c:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000f30:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000f34:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000f38:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000f3c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f40:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f44:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f50:	080039c4 	.word	0x080039c4
  ldr r2, =_sbss
 8000f54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f58:	2000012c 	.word	0x2000012c

08000f5c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_COMP_IRQHandler>
	...

08000f60 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <HAL_Init+0x3c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <HAL_Init+0x3c>)
 8000f72:	2140      	movs	r1, #64	@ 0x40
 8000f74:	430a      	orrs	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f811 	bl	8000fa0 <HAL_InitTick>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e001      	b.n	8000f8e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f8a:	f7ff feeb 	bl	8000d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <HAL_InitTick+0x5c>)
 8000faa:	681c      	ldr	r4, [r3, #0]
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <HAL_InitTick+0x60>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	23fa      	movs	r3, #250	@ 0xfa
 8000fb4:	0098      	lsls	r0, r3, #2
 8000fb6:	f7ff f8a7 	bl	8000108 <__udivsi3>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0020      	movs	r0, r4
 8000fc0:	f7ff f8a2 	bl	8000108 <__udivsi3>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 f905 	bl	80011d6 <HAL_SYSTICK_Config>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e00f      	b.n	8000ff4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d80b      	bhi.n	8000ff2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	425b      	negs	r3, r3
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 f8e2 	bl	80011ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_InitTick+0x64>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b003      	add	sp, #12
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_IncTick+0x1c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	001a      	movs	r2, r3
 8001012:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <HAL_IncTick+0x20>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	18d2      	adds	r2, r2, r3
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <HAL_IncTick+0x20>)
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	20000008 	.word	0x20000008
 8001028:	20000128 	.word	0x20000128

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b02      	ldr	r3, [pc, #8]	@ (800103c <HAL_GetTick+0x10>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	20000128 	.word	0x20000128

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff fff0 	bl	800102c <HAL_GetTick>
 800104c:	0003      	movs	r3, r0
 800104e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	001a      	movs	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	189b      	adds	r3, r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	f7ff ffe0 	bl	800102c <HAL_GetTick>
 800106c:	0002      	movs	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	20000008 	.word	0x20000008

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	0002      	movs	r2, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b7f      	cmp	r3, #127	@ 0x7f
 800109c:	d828      	bhi.n	80010f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109e:	4a2f      	ldr	r2, [pc, #188]	@ (800115c <__NVIC_SetPriority+0xd4>)
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	33c0      	adds	r3, #192	@ 0xc0
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	589b      	ldr	r3, [r3, r2]
 80010ae:	1dfa      	adds	r2, r7, #7
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	0011      	movs	r1, r2
 80010b4:	2203      	movs	r2, #3
 80010b6:	400a      	ands	r2, r1
 80010b8:	00d2      	lsls	r2, r2, #3
 80010ba:	21ff      	movs	r1, #255	@ 0xff
 80010bc:	4091      	lsls	r1, r2
 80010be:	000a      	movs	r2, r1
 80010c0:	43d2      	mvns	r2, r2
 80010c2:	401a      	ands	r2, r3
 80010c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	019b      	lsls	r3, r3, #6
 80010ca:	22ff      	movs	r2, #255	@ 0xff
 80010cc:	401a      	ands	r2, r3
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	0018      	movs	r0, r3
 80010d4:	2303      	movs	r3, #3
 80010d6:	4003      	ands	r3, r0
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010dc:	481f      	ldr	r0, [pc, #124]	@ (800115c <__NVIC_SetPriority+0xd4>)
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	430a      	orrs	r2, r1
 80010e8:	33c0      	adds	r3, #192	@ 0xc0
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ee:	e031      	b.n	8001154 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <__NVIC_SetPriority+0xd8>)
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	0019      	movs	r1, r3
 80010f8:	230f      	movs	r3, #15
 80010fa:	400b      	ands	r3, r1
 80010fc:	3b08      	subs	r3, #8
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3306      	adds	r3, #6
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	18d3      	adds	r3, r2, r3
 8001106:	3304      	adds	r3, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1dfa      	adds	r2, r7, #7
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	0011      	movs	r1, r2
 8001110:	2203      	movs	r2, #3
 8001112:	400a      	ands	r2, r1
 8001114:	00d2      	lsls	r2, r2, #3
 8001116:	21ff      	movs	r1, #255	@ 0xff
 8001118:	4091      	lsls	r1, r2
 800111a:	000a      	movs	r2, r1
 800111c:	43d2      	mvns	r2, r2
 800111e:	401a      	ands	r2, r3
 8001120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	019b      	lsls	r3, r3, #6
 8001126:	22ff      	movs	r2, #255	@ 0xff
 8001128:	401a      	ands	r2, r3
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	0018      	movs	r0, r3
 8001130:	2303      	movs	r3, #3
 8001132:	4003      	ands	r3, r0
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001138:	4809      	ldr	r0, [pc, #36]	@ (8001160 <__NVIC_SetPriority+0xd8>)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	001c      	movs	r4, r3
 8001140:	230f      	movs	r3, #15
 8001142:	4023      	ands	r3, r4
 8001144:	3b08      	subs	r3, #8
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	430a      	orrs	r2, r1
 800114a:	3306      	adds	r3, #6
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	18c3      	adds	r3, r0, r3
 8001150:	3304      	adds	r3, #4
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b003      	add	sp, #12
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	045b      	lsls	r3, r3, #17
 8001174:	429a      	cmp	r2, r3
 8001176:	d301      	bcc.n	800117c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001178:	2301      	movs	r3, #1
 800117a:	e010      	b.n	800119e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <SysTick_Config+0x44>)
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	3a01      	subs	r2, #1
 8001182:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001184:	2301      	movs	r3, #1
 8001186:	425b      	negs	r3, r3
 8001188:	2103      	movs	r1, #3
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff ff7c 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <SysTick_Config+0x44>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <SysTick_Config+0x44>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	210f      	movs	r1, #15
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	1c02      	adds	r2, r0, #0
 80011bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	0011      	movs	r1, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff ffbf 	bl	8001164 <SysTick_Config>
 80011e6:	0003      	movs	r3, r0
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001206:	e143      	b.n	8001490 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4091      	lsls	r1, r2
 8001212:	000a      	movs	r2, r1
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d100      	bne.n	8001220 <HAL_GPIO_Init+0x30>
 800121e:	e134      	b.n	800148a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2203      	movs	r2, #3
 8001226:	4013      	ands	r3, r2
 8001228:	2b01      	cmp	r3, #1
 800122a:	d005      	beq.n	8001238 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2203      	movs	r2, #3
 8001232:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001234:	2b02      	cmp	r3, #2
 8001236:	d130      	bne.n	800129a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	409a      	lsls	r2, r3
 8001246:	0013      	movs	r3, r2
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	409a      	lsls	r2, r3
 800125a:	0013      	movs	r3, r2
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126e:	2201      	movs	r2, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	43da      	mvns	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	2201      	movs	r2, #1
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d017      	beq.n	80012d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2203      	movs	r2, #3
 80012dc:	4013      	ands	r3, r2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d123      	bne.n	800132a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	58d3      	ldr	r3, [r2, r3]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2207      	movs	r2, #7
 80012f4:	4013      	ands	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	43da      	mvns	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2107      	movs	r1, #7
 800130e:	400b      	ands	r3, r1
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	6939      	ldr	r1, [r7, #16]
 8001328:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	401a      	ands	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	23c0      	movs	r3, #192	@ 0xc0
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_GPIO_Init+0x17c>
 800136a:	e08e      	b.n	800148a <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136c:	4b4e      	ldr	r3, [pc, #312]	@ (80014a8 <HAL_GPIO_Init+0x2b8>)
 800136e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001370:	4b4d      	ldr	r3, [pc, #308]	@ (80014a8 <HAL_GPIO_Init+0x2b8>)
 8001372:	2101      	movs	r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001378:	4a4c      	ldr	r2, [pc, #304]	@ (80014ac <HAL_GPIO_Init+0x2bc>)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	589b      	ldr	r3, [r3, r2]
 8001384:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2203      	movs	r2, #3
 800138a:	4013      	ands	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	409a      	lsls	r2, r3
 8001392:	0013      	movs	r3, r2
 8001394:	43da      	mvns	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	23a0      	movs	r3, #160	@ 0xa0
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d00d      	beq.n	80013c2 <HAL_GPIO_Init+0x1d2>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a41      	ldr	r2, [pc, #260]	@ (80014b0 <HAL_GPIO_Init+0x2c0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x1ce>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a40      	ldr	r2, [pc, #256]	@ (80014b4 <HAL_GPIO_Init+0x2c4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_GPIO_Init+0x1ca>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x1d4>
 80013ba:	2306      	movs	r3, #6
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x1d4>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x1d4>
 80013c2:	2300      	movs	r3, #0
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	2103      	movs	r1, #3
 80013c8:	400a      	ands	r2, r1
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	@ (80014ac <HAL_GPIO_Init+0x2bc>)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b35      	ldr	r3, [pc, #212]	@ (80014b8 <HAL_GPIO_Init+0x2c8>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43da      	mvns	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	2380      	movs	r3, #128	@ 0x80
 80013f8:	035b      	lsls	r3, r3, #13
 80013fa:	4013      	ands	r3, r2
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001406:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <HAL_GPIO_Init+0x2c8>)
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800140c:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <HAL_GPIO_Init+0x2c8>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43da      	mvns	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	039b      	lsls	r3, r3, #14
 8001424:	4013      	ands	r3, r2
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001430:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <HAL_GPIO_Init+0x2c8>)
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_GPIO_Init+0x2c8>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	029b      	lsls	r3, r3, #10
 800144e:	4013      	ands	r3, r2
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_GPIO_Init+0x2c8>)
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <HAL_GPIO_Init+0x2c8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43da      	mvns	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	2380      	movs	r3, #128	@ 0x80
 8001476:	025b      	lsls	r3, r3, #9
 8001478:	4013      	ands	r3, r2
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_GPIO_Init+0x2c8>)
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	40da      	lsrs	r2, r3
 8001498:	1e13      	subs	r3, r2, #0
 800149a:	d000      	beq.n	800149e <HAL_GPIO_Init+0x2ae>
 800149c:	e6b4      	b.n	8001208 <HAL_GPIO_Init+0x18>
  }
}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b006      	add	sp, #24
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010000 	.word	0x40010000
 80014b0:	50000400 	.word	0x50000400
 80014b4:	50000800 	.word	0x50000800
 80014b8:	40010400 	.word	0x40010400

080014bc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	0008      	movs	r0, r1
 80014c6:	0011      	movs	r1, r2
 80014c8:	1cbb      	adds	r3, r7, #2
 80014ca:	1c02      	adds	r2, r0, #0
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	1c7b      	adds	r3, r7, #1
 80014d0:	1c0a      	adds	r2, r1, #0
 80014d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d4:	1c7b      	adds	r3, r7, #1
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014dc:	1cbb      	adds	r3, r7, #2
 80014de:	881a      	ldrh	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014e6:	1cbb      	adds	r3, r7, #2
 80014e8:	881a      	ldrh	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	f000 fb6c 	bl	8001be4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800150c:	4bc8      	ldr	r3, [pc, #800]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	220c      	movs	r2, #12
 8001512:	4013      	ands	r3, r2
 8001514:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001516:	4bc6      	ldr	r3, [pc, #792]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2201      	movs	r2, #1
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x36>
 800152c:	e07d      	b.n	800162a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	2b08      	cmp	r3, #8
 8001532:	d007      	beq.n	8001544 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b0c      	cmp	r3, #12
 8001538:	d112      	bne.n	8001560 <HAL_RCC_OscConfig+0x68>
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	025b      	lsls	r3, r3, #9
 8001540:	429a      	cmp	r2, r3
 8001542:	d10d      	bne.n	8001560 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	4bba      	ldr	r3, [pc, #744]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	@ 0x80
 800154a:	029b      	lsls	r3, r3, #10
 800154c:	4013      	ands	r3, r2
 800154e:	d100      	bne.n	8001552 <HAL_RCC_OscConfig+0x5a>
 8001550:	e06a      	b.n	8001628 <HAL_RCC_OscConfig+0x130>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d166      	bne.n	8001628 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	f000 fb42 	bl	8001be4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	429a      	cmp	r2, r3
 800156a:	d107      	bne.n	800157c <HAL_RCC_OscConfig+0x84>
 800156c:	4bb0      	ldr	r3, [pc, #704]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4baf      	ldr	r3, [pc, #700]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001572:	2180      	movs	r1, #128	@ 0x80
 8001574:	0249      	lsls	r1, r1, #9
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e027      	b.n	80015cc <HAL_RCC_OscConfig+0xd4>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	23a0      	movs	r3, #160	@ 0xa0
 8001582:	02db      	lsls	r3, r3, #11
 8001584:	429a      	cmp	r2, r3
 8001586:	d10e      	bne.n	80015a6 <HAL_RCC_OscConfig+0xae>
 8001588:	4ba9      	ldr	r3, [pc, #676]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4ba8      	ldr	r3, [pc, #672]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800158e:	2180      	movs	r1, #128	@ 0x80
 8001590:	02c9      	lsls	r1, r1, #11
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	4ba6      	ldr	r3, [pc, #664]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4ba5      	ldr	r3, [pc, #660]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	0249      	lsls	r1, r1, #9
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	e012      	b.n	80015cc <HAL_RCC_OscConfig+0xd4>
 80015a6:	4ba2      	ldr	r3, [pc, #648]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4ba1      	ldr	r3, [pc, #644]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80015ac:	49a1      	ldr	r1, [pc, #644]	@ (8001834 <HAL_RCC_OscConfig+0x33c>)
 80015ae:	400a      	ands	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	4b9f      	ldr	r3, [pc, #636]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	025b      	lsls	r3, r3, #9
 80015ba:	4013      	ands	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4b9b      	ldr	r3, [pc, #620]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b9a      	ldr	r3, [pc, #616]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80015c6:	499c      	ldr	r1, [pc, #624]	@ (8001838 <HAL_RCC_OscConfig+0x340>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d014      	beq.n	80015fe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fd2a 	bl	800102c <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015de:	f7ff fd25 	bl	800102c <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b64      	cmp	r3, #100	@ 0x64
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e2f9      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	@ 0x80
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	4013      	ands	r3, r2
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0xe6>
 80015fc:	e015      	b.n	800162a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fd15 	bl	800102c <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fd10 	bl	800102c <HAL_GetTick>
 800160c:	0002      	movs	r2, r0
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	@ 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e2e4      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800161a:	4b85      	ldr	r3, [pc, #532]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	@ 0x80
 8001620:	029b      	lsls	r3, r3, #10
 8001622:	4013      	ands	r3, r2
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x110>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d100      	bne.n	8001636 <HAL_RCC_OscConfig+0x13e>
 8001634:	e099      	b.n	800176a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	2220      	movs	r2, #32
 8001640:	4013      	ands	r3, r2
 8001642:	d009      	beq.n	8001658 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001644:	4b7a      	ldr	r3, [pc, #488]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b79      	ldr	r3, [pc, #484]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800164a:	2120      	movs	r1, #32
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	2220      	movs	r2, #32
 8001654:	4393      	bics	r3, r2
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b04      	cmp	r3, #4
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	2b0c      	cmp	r3, #12
 8001662:	d13e      	bne.n	80016e2 <HAL_RCC_OscConfig+0x1ea>
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d13b      	bne.n	80016e2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800166a:	4b71      	ldr	r3, [pc, #452]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2204      	movs	r2, #4
 8001670:	4013      	ands	r3, r2
 8001672:	d004      	beq.n	800167e <HAL_RCC_OscConfig+0x186>
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e2b2      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b6c      	ldr	r3, [pc, #432]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4a6e      	ldr	r2, [pc, #440]	@ (800183c <HAL_RCC_OscConfig+0x344>)
 8001684:	4013      	ands	r3, r2
 8001686:	0019      	movs	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	021a      	lsls	r2, r3, #8
 800168e:	4b68      	ldr	r3, [pc, #416]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001690:	430a      	orrs	r2, r1
 8001692:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001694:	4b66      	ldr	r3, [pc, #408]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2209      	movs	r2, #9
 800169a:	4393      	bics	r3, r2
 800169c:	0019      	movs	r1, r3
 800169e:	4b64      	ldr	r3, [pc, #400]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80016a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a6:	f000 fbeb 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 80016aa:	0001      	movs	r1, r0
 80016ac:	4b60      	ldr	r3, [pc, #384]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	220f      	movs	r2, #15
 80016b4:	4013      	ands	r3, r2
 80016b6:	4a62      	ldr	r2, [pc, #392]	@ (8001840 <HAL_RCC_OscConfig+0x348>)
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
 80016ba:	000a      	movs	r2, r1
 80016bc:	40da      	lsrs	r2, r3
 80016be:	4b61      	ldr	r3, [pc, #388]	@ (8001844 <HAL_RCC_OscConfig+0x34c>)
 80016c0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80016c2:	4b61      	ldr	r3, [pc, #388]	@ (8001848 <HAL_RCC_OscConfig+0x350>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2513      	movs	r5, #19
 80016c8:	197c      	adds	r4, r7, r5
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7ff fc68 	bl	8000fa0 <HAL_InitTick>
 80016d0:	0003      	movs	r3, r0
 80016d2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80016d4:	197b      	adds	r3, r7, r5
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d046      	beq.n	800176a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80016dc:	197b      	adds	r3, r7, r5
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	e280      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d027      	beq.n	8001738 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016e8:	4b51      	ldr	r3, [pc, #324]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2209      	movs	r2, #9
 80016ee:	4393      	bics	r3, r2
 80016f0:	0019      	movs	r1, r3
 80016f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80016f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fc97 	bl	800102c <HAL_GetTick>
 80016fe:	0003      	movs	r3, r0
 8001700:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001704:	f7ff fc92 	bl	800102c <HAL_GetTick>
 8001708:	0002      	movs	r2, r0
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e266      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001716:	4b46      	ldr	r3, [pc, #280]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2204      	movs	r2, #4
 800171c:	4013      	ands	r3, r2
 800171e:	d0f1      	beq.n	8001704 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b43      	ldr	r3, [pc, #268]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a45      	ldr	r2, [pc, #276]	@ (800183c <HAL_RCC_OscConfig+0x344>)
 8001726:	4013      	ands	r3, r2
 8001728:	0019      	movs	r1, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	021a      	lsls	r2, r3, #8
 8001730:	4b3f      	ldr	r3, [pc, #252]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	e018      	b.n	800176a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001738:	4b3d      	ldr	r3, [pc, #244]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b3c      	ldr	r3, [pc, #240]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800173e:	2101      	movs	r1, #1
 8001740:	438a      	bics	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fc72 	bl	800102c <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fc6d 	bl	800102c <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e241      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001760:	4b33      	ldr	r3, [pc, #204]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2204      	movs	r2, #4
 8001766:	4013      	ands	r3, r2
 8001768:	d1f1      	bne.n	800174e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2210      	movs	r2, #16
 8001770:	4013      	ands	r3, r2
 8001772:	d100      	bne.n	8001776 <HAL_RCC_OscConfig+0x27e>
 8001774:	e0a1      	b.n	80018ba <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d140      	bne.n	80017fe <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800177c:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	@ 0x80
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4013      	ands	r3, r2
 8001786:	d005      	beq.n	8001794 <HAL_RCC_OscConfig+0x29c>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e227      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001794:	4b26      	ldr	r3, [pc, #152]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a2c      	ldr	r2, [pc, #176]	@ (800184c <HAL_RCC_OscConfig+0x354>)
 800179a:	4013      	ands	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1a      	ldr	r2, [r3, #32]
 80017a2:	4b23      	ldr	r3, [pc, #140]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80017a4:	430a      	orrs	r2, r1
 80017a6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a8:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	0a19      	lsrs	r1, r3, #8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	061a      	lsls	r2, r3, #24
 80017b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80017b8:	430a      	orrs	r2, r1
 80017ba:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	0b5b      	lsrs	r3, r3, #13
 80017c2:	3301      	adds	r3, #1
 80017c4:	2280      	movs	r2, #128	@ 0x80
 80017c6:	0212      	lsls	r2, r2, #8
 80017c8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	210f      	movs	r1, #15
 80017d2:	400b      	ands	r3, r1
 80017d4:	491a      	ldr	r1, [pc, #104]	@ (8001840 <HAL_RCC_OscConfig+0x348>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017da:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <HAL_RCC_OscConfig+0x34c>)
 80017dc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80017de:	4b1a      	ldr	r3, [pc, #104]	@ (8001848 <HAL_RCC_OscConfig+0x350>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2513      	movs	r5, #19
 80017e4:	197c      	adds	r4, r7, r5
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff fbda 	bl	8000fa0 <HAL_InitTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80017f0:	197b      	adds	r3, r7, r5
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d060      	beq.n	80018ba <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80017f8:	197b      	adds	r3, r7, r5
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	e1f2      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d03f      	beq.n	8001886 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 800180c:	2180      	movs	r1, #128	@ 0x80
 800180e:	0049      	lsls	r1, r1, #1
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fc0a 	bl	800102c <HAL_GetTick>
 8001818:	0003      	movs	r3, r0
 800181a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800181c:	e018      	b.n	8001850 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800181e:	f7ff fc05 	bl	800102c <HAL_GetTick>
 8001822:	0002      	movs	r2, r0
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d911      	bls.n	8001850 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e1d9      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
 8001830:	40021000 	.word	0x40021000
 8001834:	fffeffff 	.word	0xfffeffff
 8001838:	fffbffff 	.word	0xfffbffff
 800183c:	ffffe0ff 	.word	0xffffe0ff
 8001840:	08003948 	.word	0x08003948
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004
 800184c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001850:	4bc9      	ldr	r3, [pc, #804]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	@ 0x80
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d0e0      	beq.n	800181e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185c:	4bc6      	ldr	r3, [pc, #792]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4ac6      	ldr	r2, [pc, #792]	@ (8001b7c <HAL_RCC_OscConfig+0x684>)
 8001862:	4013      	ands	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1a      	ldr	r2, [r3, #32]
 800186a:	4bc3      	ldr	r3, [pc, #780]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 800186c:	430a      	orrs	r2, r1
 800186e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001870:	4bc1      	ldr	r3, [pc, #772]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	0a19      	lsrs	r1, r3, #8
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	061a      	lsls	r2, r3, #24
 800187e:	4bbe      	ldr	r3, [pc, #760]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	e019      	b.n	80018ba <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001886:	4bbc      	ldr	r3, [pc, #752]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4bbb      	ldr	r3, [pc, #748]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 800188c:	49bc      	ldr	r1, [pc, #752]	@ (8001b80 <HAL_RCC_OscConfig+0x688>)
 800188e:	400a      	ands	r2, r1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff fbcb 	bl	800102c <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189c:	f7ff fbc6 	bl	800102c <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e19a      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018ae:	4bb2      	ldr	r3, [pc, #712]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2208      	movs	r2, #8
 80018c0:	4013      	ands	r3, r2
 80018c2:	d036      	beq.n	8001932 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d019      	beq.n	8001900 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018cc:	4baa      	ldr	r3, [pc, #680]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80018ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018d0:	4ba9      	ldr	r3, [pc, #676]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	430a      	orrs	r2, r1
 80018d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7ff fba8 	bl	800102c <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e2:	f7ff fba3 	bl	800102c <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e177      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018f4:	4ba0      	ldr	r3, [pc, #640]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80018f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d0f1      	beq.n	80018e2 <HAL_RCC_OscConfig+0x3ea>
 80018fe:	e018      	b.n	8001932 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001900:	4b9d      	ldr	r3, [pc, #628]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001902:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001904:	4b9c      	ldr	r3, [pc, #624]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001906:	2101      	movs	r1, #1
 8001908:	438a      	bics	r2, r1
 800190a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff fb8e 	bl	800102c <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001916:	f7ff fb89 	bl	800102c <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e15d      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001928:	4b93      	ldr	r3, [pc, #588]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 800192a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d1f1      	bne.n	8001916 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2204      	movs	r2, #4
 8001938:	4013      	ands	r3, r2
 800193a:	d100      	bne.n	800193e <HAL_RCC_OscConfig+0x446>
 800193c:	e0ae      	b.n	8001a9c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193e:	2023      	movs	r0, #35	@ 0x23
 8001940:	183b      	adds	r3, r7, r0
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001946:	4b8c      	ldr	r3, [pc, #560]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	055b      	lsls	r3, r3, #21
 800194e:	4013      	ands	r3, r2
 8001950:	d109      	bne.n	8001966 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b89      	ldr	r3, [pc, #548]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001956:	4b88      	ldr	r3, [pc, #544]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001958:	2180      	movs	r1, #128	@ 0x80
 800195a:	0549      	lsls	r1, r1, #21
 800195c:	430a      	orrs	r2, r1
 800195e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001960:	183b      	adds	r3, r7, r0
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b87      	ldr	r3, [pc, #540]	@ (8001b84 <HAL_RCC_OscConfig+0x68c>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	@ 0x80
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4013      	ands	r3, r2
 8001970:	d11a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001972:	4b84      	ldr	r3, [pc, #528]	@ (8001b84 <HAL_RCC_OscConfig+0x68c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b83      	ldr	r3, [pc, #524]	@ (8001b84 <HAL_RCC_OscConfig+0x68c>)
 8001978:	2180      	movs	r1, #128	@ 0x80
 800197a:	0049      	lsls	r1, r1, #1
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001980:	f7ff fb54 	bl	800102c <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198a:	f7ff fb4f 	bl	800102c <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b64      	cmp	r3, #100	@ 0x64
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e123      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	4b79      	ldr	r3, [pc, #484]	@ (8001b84 <HAL_RCC_OscConfig+0x68c>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4013      	ands	r3, r2
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4cc>
 80019b4:	4b70      	ldr	r3, [pc, #448]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80019b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80019ba:	2180      	movs	r1, #128	@ 0x80
 80019bc:	0049      	lsls	r1, r1, #1
 80019be:	430a      	orrs	r2, r1
 80019c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80019c2:	e031      	b.n	8001a28 <HAL_RCC_OscConfig+0x530>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4ee>
 80019cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80019ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019d0:	4b69      	ldr	r3, [pc, #420]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80019d2:	496b      	ldr	r1, [pc, #428]	@ (8001b80 <HAL_RCC_OscConfig+0x688>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80019d8:	4b67      	ldr	r3, [pc, #412]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80019da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019dc:	4b66      	ldr	r3, [pc, #408]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80019de:	496a      	ldr	r1, [pc, #424]	@ (8001b88 <HAL_RCC_OscConfig+0x690>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80019e4:	e020      	b.n	8001a28 <HAL_RCC_OscConfig+0x530>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	23a0      	movs	r3, #160	@ 0xa0
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d10e      	bne.n	8001a10 <HAL_RCC_OscConfig+0x518>
 80019f2:	4b61      	ldr	r3, [pc, #388]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80019f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019f6:	4b60      	ldr	r3, [pc, #384]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 80019f8:	2180      	movs	r1, #128	@ 0x80
 80019fa:	00c9      	lsls	r1, r1, #3
 80019fc:	430a      	orrs	r2, r1
 80019fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a00:	4b5d      	ldr	r3, [pc, #372]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001a02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a04:	4b5c      	ldr	r3, [pc, #368]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001a06:	2180      	movs	r1, #128	@ 0x80
 8001a08:	0049      	lsls	r1, r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0x530>
 8001a10:	4b59      	ldr	r3, [pc, #356]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001a12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a14:	4b58      	ldr	r3, [pc, #352]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001a16:	495a      	ldr	r1, [pc, #360]	@ (8001b80 <HAL_RCC_OscConfig+0x688>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a1c:	4b56      	ldr	r3, [pc, #344]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001a1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a20:	4b55      	ldr	r3, [pc, #340]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001a22:	4959      	ldr	r1, [pc, #356]	@ (8001b88 <HAL_RCC_OscConfig+0x690>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d015      	beq.n	8001a5c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a30:	f7ff fafc 	bl	800102c <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a38:	e009      	b.n	8001a4e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff faf7 	bl	800102c <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4a51      	ldr	r2, [pc, #324]	@ (8001b8c <HAL_RCC_OscConfig+0x694>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0ca      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001a50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a52:	2380      	movs	r3, #128	@ 0x80
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d0ef      	beq.n	8001a3a <HAL_RCC_OscConfig+0x542>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fae6 	bl	800102c <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a64:	e009      	b.n	8001a7a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7ff fae1 	bl	800102c <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4a46      	ldr	r2, [pc, #280]	@ (8001b8c <HAL_RCC_OscConfig+0x694>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0b4      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001a7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4013      	ands	r3, r2
 8001a84:	d1ef      	bne.n	8001a66 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a86:	2323      	movs	r3, #35	@ 0x23
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a90:	4b39      	ldr	r3, [pc, #228]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a94:	4b38      	ldr	r3, [pc, #224]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001a96:	493e      	ldr	r1, [pc, #248]	@ (8001b90 <HAL_RCC_OscConfig+0x698>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d100      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5ae>
 8001aa4:	e09d      	b.n	8001be2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d100      	bne.n	8001aae <HAL_RCC_OscConfig+0x5b6>
 8001aac:	e076      	b.n	8001b9c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d145      	bne.n	8001b42 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b30      	ldr	r3, [pc, #192]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001abc:	4935      	ldr	r1, [pc, #212]	@ (8001b94 <HAL_RCC_OscConfig+0x69c>)
 8001abe:	400a      	ands	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fab3 	bl	800102c <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff faae 	bl	800102c <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e082      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ade:	4b26      	ldr	r3, [pc, #152]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	049b      	lsls	r3, r3, #18
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aea:	4b23      	ldr	r3, [pc, #140]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4a2a      	ldr	r2, [pc, #168]	@ (8001b98 <HAL_RCC_OscConfig+0x6a0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	431a      	orrs	r2, r3
 8001b04:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001b06:	430a      	orrs	r2, r1
 8001b08:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001b10:	2180      	movs	r1, #128	@ 0x80
 8001b12:	0449      	lsls	r1, r1, #17
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fa88 	bl	800102c <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff fa83 	bl	800102c <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e057      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b34:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	049b      	lsls	r3, r3, #18
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x62a>
 8001b40:	e04f      	b.n	8001be2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001b48:	4912      	ldr	r1, [pc, #72]	@ (8001b94 <HAL_RCC_OscConfig+0x69c>)
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fa6d 	bl	800102c <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff fa68 	bl	800102c <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e03c      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b6a:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_RCC_OscConfig+0x680>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	049b      	lsls	r3, r3, #18
 8001b72:	4013      	ands	r3, r2
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x660>
 8001b76:	e034      	b.n	8001be2 <HAL_RCC_OscConfig+0x6ea>
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	ffff1fff 	.word	0xffff1fff
 8001b80:	fffffeff 	.word	0xfffffeff
 8001b84:	40007000 	.word	0x40007000
 8001b88:	fffffbff 	.word	0xfffffbff
 8001b8c:	00001388 	.word	0x00001388
 8001b90:	efffffff 	.word	0xefffffff
 8001b94:	feffffff 	.word	0xfeffffff
 8001b98:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e01d      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba8:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <HAL_RCC_OscConfig+0x6f4>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	025b      	lsls	r3, r3, #9
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d10f      	bne.n	8001bde <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	23f0      	movs	r3, #240	@ 0xf0
 8001bc2:	039b      	lsls	r3, r3, #14
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	23c0      	movs	r3, #192	@ 0xc0
 8001bd2:	041b      	lsls	r3, r3, #16
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b00a      	add	sp, #40	@ 0x28
 8001bea:	bdb0      	pop	{r4, r5, r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e128      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b96      	ldr	r3, [pc, #600]	@ (8001e60 <HAL_RCC_ClockConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d91e      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b93      	ldr	r3, [pc, #588]	@ (8001e60 <HAL_RCC_ClockConfig+0x270>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2201      	movs	r2, #1
 8001c18:	4393      	bics	r3, r2
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	4b90      	ldr	r3, [pc, #576]	@ (8001e60 <HAL_RCC_ClockConfig+0x270>)
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c24:	f7ff fa02 	bl	800102c <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2c:	e009      	b.n	8001c42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2e:	f7ff f9fd 	bl	800102c <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	4a8a      	ldr	r2, [pc, #552]	@ (8001e64 <HAL_RCC_ClockConfig+0x274>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e109      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b87      	ldr	r3, [pc, #540]	@ (8001e60 <HAL_RCC_ClockConfig+0x270>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2202      	movs	r2, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c5a:	4b83      	ldr	r3, [pc, #524]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	22f0      	movs	r2, #240	@ 0xf0
 8001c60:	4393      	bics	r3, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	4b7f      	ldr	r3, [pc, #508]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4013      	ands	r3, r2
 8001c76:	d100      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x8a>
 8001c78:	e089      	b.n	8001d8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c82:	4b79      	ldr	r3, [pc, #484]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d120      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0e1      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c9a:	4b73      	ldr	r3, [pc, #460]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	049b      	lsls	r3, r3, #18
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d114      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0d5      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d106      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d109      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0ca      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cc0:	4b69      	ldr	r3, [pc, #420]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	@ 0x80
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0c2      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd0:	4b65      	ldr	r3, [pc, #404]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4393      	bics	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4b62      	ldr	r3, [pc, #392]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f9a2 	bl	800102c <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d111      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf4:	e009      	b.n	8001d0a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf6:	f7ff f999 	bl	800102c <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a58      	ldr	r2, [pc, #352]	@ (8001e64 <HAL_RCC_ClockConfig+0x274>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0a5      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d0a:	4b57      	ldr	r3, [pc, #348]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	220c      	movs	r2, #12
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d1ef      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x106>
 8001d16:	e03a      	b.n	8001d8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d111      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d20:	e009      	b.n	8001d36 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d22:	f7ff f983 	bl	800102c <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e64 <HAL_RCC_ClockConfig+0x274>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e08f      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d36:	4b4c      	ldr	r3, [pc, #304]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b0c      	cmp	r3, #12
 8001d40:	d1ef      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x132>
 8001d42:	e024      	b.n	8001d8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d11b      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4c:	e009      	b.n	8001d62 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4e:	f7ff f96d 	bl	800102c <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	4a42      	ldr	r2, [pc, #264]	@ (8001e64 <HAL_RCC_ClockConfig+0x274>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e079      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d62:	4b41      	ldr	r3, [pc, #260]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	220c      	movs	r2, #12
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d1ef      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x15e>
 8001d6e:	e00e      	b.n	8001d8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff f95c 	bl	800102c <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	4a3a      	ldr	r2, [pc, #232]	@ (8001e64 <HAL_RCC_ClockConfig+0x274>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e068      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d84:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	220c      	movs	r2, #12
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8e:	4b34      	ldr	r3, [pc, #208]	@ (8001e60 <HAL_RCC_ClockConfig+0x270>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2201      	movs	r2, #1
 8001d94:	4013      	ands	r3, r2
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d21e      	bcs.n	8001dda <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9c:	4b30      	ldr	r3, [pc, #192]	@ (8001e60 <HAL_RCC_ClockConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2201      	movs	r2, #1
 8001da2:	4393      	bics	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e60 <HAL_RCC_ClockConfig+0x270>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dae:	f7ff f93d 	bl	800102c <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	e009      	b.n	8001dcc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7ff f938 	bl	800102c <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	4a28      	ldr	r2, [pc, #160]	@ (8001e64 <HAL_RCC_ClockConfig+0x274>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e044      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dcc:	4b24      	ldr	r3, [pc, #144]	@ (8001e60 <HAL_RCC_ClockConfig+0x270>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d1ee      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2204      	movs	r2, #4
 8001de0:	4013      	ands	r3, r2
 8001de2:	d009      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	4a20      	ldr	r2, [pc, #128]	@ (8001e6c <HAL_RCC_ClockConfig+0x27c>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d00a      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e02:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	4a1a      	ldr	r2, [pc, #104]	@ (8001e70 <HAL_RCC_ClockConfig+0x280>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	00da      	lsls	r2, r3, #3
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e18:	f000 f832 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001e1c:	0001      	movs	r1, r0
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_RCC_ClockConfig+0x278>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	220f      	movs	r2, #15
 8001e26:	4013      	ands	r3, r2
 8001e28:	4a12      	ldr	r2, [pc, #72]	@ (8001e74 <HAL_RCC_ClockConfig+0x284>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	000a      	movs	r2, r1
 8001e2e:	40da      	lsrs	r2, r3
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_RCC_ClockConfig+0x288>)
 8001e32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <HAL_RCC_ClockConfig+0x28c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	250b      	movs	r5, #11
 8001e3a:	197c      	adds	r4, r7, r5
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff f8af 	bl	8000fa0 <HAL_InitTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e46:	197b      	adds	r3, r7, r5
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e4e:	197b      	adds	r3, r7, r5
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e5e:	46c0      	nop			@ (mov r8, r8)
 8001e60:	40022000 	.word	0x40022000
 8001e64:	00001388 	.word	0x00001388
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	fffff8ff 	.word	0xfffff8ff
 8001e70:	ffffc7ff 	.word	0xffffc7ff
 8001e74:	08003948 	.word	0x08003948
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e86:	4b3c      	ldr	r3, [pc, #240]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	220c      	movs	r2, #12
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d013      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0x3e>
 8001e96:	d85c      	bhi.n	8001f52 <HAL_RCC_GetSysClockFreq+0xd2>
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d002      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x22>
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x38>
 8001ea0:	e057      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ea2:	4b35      	ldr	r3, [pc, #212]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d002      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001eac:	4b33      	ldr	r3, [pc, #204]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001eae:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001eb0:	e05d      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001eb2:	4b33      	ldr	r3, [pc, #204]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x100>)
 8001eb4:	613b      	str	r3, [r7, #16]
      break;
 8001eb6:	e05a      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb8:	4b32      	ldr	r3, [pc, #200]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eba:	613b      	str	r3, [r7, #16]
      break;
 8001ebc:	e057      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	0c9b      	lsrs	r3, r3, #18
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	4a30      	ldr	r2, [pc, #192]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec8:	5cd3      	ldrb	r3, [r2, r3]
 8001eca:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	0d9b      	lsrs	r3, r3, #22
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ed8:	4b27      	ldr	r3, [pc, #156]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	2380      	movs	r3, #128	@ 0x80
 8001ede:	025b      	lsls	r3, r3, #9
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d00f      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	000a      	movs	r2, r1
 8001ee8:	0152      	lsls	r2, r2, #5
 8001eea:	1a52      	subs	r2, r2, r1
 8001eec:	0193      	lsls	r3, r2, #6
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	185b      	adds	r3, r3, r1
 8001ef4:	025b      	lsls	r3, r3, #9
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7fe f905 	bl	8000108 <__udivsi3>
 8001efe:	0003      	movs	r3, r0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e023      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f04:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2210      	movs	r2, #16
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d00f      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	000a      	movs	r2, r1
 8001f12:	0152      	lsls	r2, r2, #5
 8001f14:	1a52      	subs	r2, r2, r1
 8001f16:	0193      	lsls	r3, r2, #6
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	185b      	adds	r3, r3, r1
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7fe f8f0 	bl	8000108 <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e00e      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001f2e:	68b9      	ldr	r1, [r7, #8]
 8001f30:	000a      	movs	r2, r1
 8001f32:	0152      	lsls	r2, r2, #5
 8001f34:	1a52      	subs	r2, r2, r1
 8001f36:	0193      	lsls	r3, r2, #6
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	185b      	adds	r3, r3, r1
 8001f3e:	029b      	lsls	r3, r3, #10
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	0018      	movs	r0, r3
 8001f44:	f7fe f8e0 	bl	8000108 <__udivsi3>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	613b      	str	r3, [r7, #16]
      break;
 8001f50:	e00d      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	0b5b      	lsrs	r3, r3, #13
 8001f58:	2207      	movs	r2, #7
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	2280      	movs	r2, #128	@ 0x80
 8001f64:	0212      	lsls	r2, r2, #8
 8001f66:	409a      	lsls	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
      break;
 8001f6c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f6e:	693b      	ldr	r3, [r7, #16]
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b006      	add	sp, #24
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	003d0900 	.word	0x003d0900
 8001f80:	00f42400 	.word	0x00f42400
 8001f84:	007a1200 	.word	0x007a1200
 8001f88:	08003960 	.word	0x08003960

08001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f90:	4b02      	ldr	r3, [pc, #8]	@ (8001f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	20000000 	.word	0x20000000

08001fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa4:	f7ff fff2 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fa8:	0001      	movs	r1, r0
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	40d9      	lsrs	r1, r3
 8001fba:	000b      	movs	r3, r1
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	08003958 	.word	0x08003958

08001fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fd0:	f7ff ffdc 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fd4:	0001      	movs	r1, r0
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	0adb      	lsrs	r3, r3, #11
 8001fdc:	2207      	movs	r2, #7
 8001fde:	4013      	ands	r3, r2
 8001fe0:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	40d9      	lsrs	r1, r3
 8001fe6:	000b      	movs	r3, r1
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08003958 	.word	0x08003958

08001ff8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e07b      	b.n	8002102 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	2382      	movs	r3, #130	@ 0x82
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	429a      	cmp	r2, r3
 800201c:	d009      	beq.n	8002032 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	61da      	str	r2, [r3, #28]
 8002024:	e005      	b.n	8002032 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2251      	movs	r2, #81	@ 0x51
 800203c:	5c9b      	ldrb	r3, [r3, r2]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2250      	movs	r2, #80	@ 0x50
 8002048:	2100      	movs	r1, #0
 800204a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0018      	movs	r0, r3
 8002050:	f7fe fe9c 	bl	8000d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2251      	movs	r2, #81	@ 0x51
 8002058:	2102      	movs	r1, #2
 800205a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2140      	movs	r1, #64	@ 0x40
 8002068:	438a      	bics	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	2382      	movs	r3, #130	@ 0x82
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	401a      	ands	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6899      	ldr	r1, [r3, #8]
 800207a:	2384      	movs	r3, #132	@ 0x84
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	400b      	ands	r3, r1
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68d9      	ldr	r1, [r3, #12]
 8002086:	2380      	movs	r3, #128	@ 0x80
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	400b      	ands	r3, r1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2102      	movs	r1, #2
 8002094:	400b      	ands	r3, r1
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	2101      	movs	r1, #1
 800209e:	400b      	ands	r3, r1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6999      	ldr	r1, [r3, #24]
 80020a6:	2380      	movs	r3, #128	@ 0x80
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	400b      	ands	r3, r1
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	2138      	movs	r1, #56	@ 0x38
 80020b4:	400b      	ands	r3, r1
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	2180      	movs	r1, #128	@ 0x80
 80020be:	400b      	ands	r3, r1
 80020c0:	431a      	orrs	r2, r3
 80020c2:	0011      	movs	r1, r2
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	019b      	lsls	r3, r3, #6
 80020cc:	401a      	ands	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	0c1b      	lsrs	r3, r3, #16
 80020dc:	2204      	movs	r2, #4
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e6:	2210      	movs	r2, #16
 80020e8:	401a      	ands	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2251      	movs	r2, #81	@ 0x51
 80020fc:	2101      	movs	r1, #1
 80020fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	0018      	movs	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	b002      	add	sp, #8
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b088      	sub	sp, #32
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	1dbb      	adds	r3, r7, #6
 8002118:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800211a:	f7fe ff87 	bl	800102c <HAL_GetTick>
 800211e:	0003      	movs	r3, r0
 8002120:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002122:	231a      	movs	r3, #26
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	1dba      	adds	r2, r7, #6
 8002128:	8812      	ldrh	r2, [r2, #0]
 800212a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2251      	movs	r2, #81	@ 0x51
 8002130:	5c9b      	ldrb	r3, [r3, r2]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d001      	beq.n	800213c <HAL_SPI_Transmit+0x32>
  {
    return HAL_BUSY;
 8002138:	2302      	movs	r3, #2
 800213a:	e132      	b.n	80023a2 <HAL_SPI_Transmit+0x298>
  }

  if ((pData == NULL) || (Size == 0U))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_SPI_Transmit+0x40>
 8002142:	1dbb      	adds	r3, r7, #6
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_SPI_Transmit+0x44>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e129      	b.n	80023a2 <HAL_SPI_Transmit+0x298>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2250      	movs	r2, #80	@ 0x50
 8002152:	5c9b      	ldrb	r3, [r3, r2]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_SPI_Transmit+0x52>
 8002158:	2302      	movs	r3, #2
 800215a:	e122      	b.n	80023a2 <HAL_SPI_Transmit+0x298>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2250      	movs	r2, #80	@ 0x50
 8002160:	2101      	movs	r1, #1
 8002162:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2251      	movs	r2, #81	@ 0x51
 8002168:	2103      	movs	r1, #3
 800216a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1dba      	adds	r2, r7, #6
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1dba      	adds	r2, r7, #6
 8002184:	8812      	ldrh	r2, [r2, #0]
 8002186:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d110      	bne.n	80021d4 <HAL_SPI_Transmit+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2140      	movs	r1, #64	@ 0x40
 80021be:	438a      	bics	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2180      	movs	r1, #128	@ 0x80
 80021ce:	01c9      	lsls	r1, r1, #7
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2240      	movs	r2, #64	@ 0x40
 80021dc:	4013      	ands	r3, r2
 80021de:	2b40      	cmp	r3, #64	@ 0x40
 80021e0:	d007      	beq.n	80021f2 <HAL_SPI_Transmit+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2140      	movs	r1, #64	@ 0x40
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	2380      	movs	r3, #128	@ 0x80
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d153      	bne.n	80022a6 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <HAL_SPI_Transmit+0x106>
 8002206:	231a      	movs	r3, #26
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d144      	bne.n	800229a <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	1c9a      	adds	r2, r3, #2
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002234:	e031      	b.n	800229a <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2202      	movs	r2, #2
 800223e:	4013      	ands	r3, r2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d112      	bne.n	800226a <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002254:	1c9a      	adds	r2, r3, #2
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002268:	e017      	b.n	800229a <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800226a:	f7fe fedf 	bl	800102c <HAL_GetTick>
 800226e:	0002      	movs	r2, r0
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d802      	bhi.n	8002280 <HAL_SPI_Transmit+0x176>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	d102      	bne.n	8002286 <HAL_SPI_Transmit+0x17c>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <HAL_SPI_Transmit+0x190>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2251      	movs	r2, #81	@ 0x51
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2250      	movs	r2, #80	@ 0x50
 8002292:	2100      	movs	r1, #0
 8002294:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e083      	b.n	80023a2 <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1c8      	bne.n	8002236 <HAL_SPI_Transmit+0x12c>
 80022a4:	e054      	b.n	8002350 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <HAL_SPI_Transmit+0x1ae>
 80022ae:	231a      	movs	r3, #26
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d146      	bne.n	8002346 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	330c      	adds	r3, #12
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022de:	e032      	b.n	8002346 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2202      	movs	r2, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d113      	bne.n	8002316 <HAL_SPI_Transmit+0x20c>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	330c      	adds	r3, #12
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002314:	e017      	b.n	8002346 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002316:	f7fe fe89 	bl	800102c <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d802      	bhi.n	800232c <HAL_SPI_Transmit+0x222>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	d102      	bne.n	8002332 <HAL_SPI_Transmit+0x228>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_SPI_Transmit+0x23c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2251      	movs	r2, #81	@ 0x51
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2250      	movs	r2, #80	@ 0x50
 800233e:	2100      	movs	r1, #0
 8002340:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e02d      	b.n	80023a2 <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1c7      	bne.n	80022e0 <HAL_SPI_Transmit+0x1d6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fc02 	bl	8002b60 <SPI_EndRxTxTransaction>
 800235c:	1e03      	subs	r3, r0, #0
 800235e:	d002      	beq.n	8002366 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10a      	bne.n	8002384 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2251      	movs	r2, #81	@ 0x51
 8002388:	2101      	movs	r1, #1
 800238a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2250      	movs	r2, #80	@ 0x50
 8002390:	2100      	movs	r1, #0
 8002392:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_SPI_Transmit+0x296>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_SPI_Transmit+0x298>
  }
  else
  {
    return HAL_OK;
 80023a0:	2300      	movs	r3, #0
  }
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b008      	add	sp, #32
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	1dbb      	adds	r3, r7, #6
 80023ba:	801a      	strh	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2251      	movs	r2, #81	@ 0x51
 80023c0:	5c9b      	ldrb	r3, [r3, r2]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d001      	beq.n	80023cc <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
 80023ca:	e10a      	b.n	80025e2 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_SPI_Receive+0x2e>
 80023d2:	1dbb      	adds	r3, r7, #6
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_SPI_Receive+0x32>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e101      	b.n	80025e2 <HAL_SPI_Receive+0x236>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	2382      	movs	r3, #130	@ 0x82
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d113      	bne.n	8002412 <HAL_SPI_Receive+0x66>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <HAL_SPI_Receive+0x66>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2251      	movs	r2, #81	@ 0x51
 80023f6:	2104      	movs	r1, #4
 80023f8:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80023fa:	1dbb      	adds	r3, r7, #6
 80023fc:	881c      	ldrh	r4, [r3, #0]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	0023      	movs	r3, r4
 800240a:	f000 f8f1 	bl	80025f0 <HAL_SPI_TransmitReceive>
 800240e:	0003      	movs	r3, r0
 8002410:	e0e7      	b.n	80025e2 <HAL_SPI_Receive+0x236>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002412:	f7fe fe0b 	bl	800102c <HAL_GetTick>
 8002416:	0003      	movs	r3, r0
 8002418:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2250      	movs	r2, #80	@ 0x50
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_SPI_Receive+0x7c>
 8002424:	2302      	movs	r3, #2
 8002426:	e0dc      	b.n	80025e2 <HAL_SPI_Receive+0x236>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2250      	movs	r2, #80	@ 0x50
 800242c:	2101      	movs	r1, #1
 800242e:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2251      	movs	r2, #81	@ 0x51
 8002434:	2104      	movs	r1, #4
 8002436:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1dba      	adds	r2, r7, #6
 8002448:	8812      	ldrh	r2, [r2, #0]
 800244a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1dba      	adds	r2, r7, #6
 8002450:	8812      	ldrh	r2, [r2, #0]
 8002452:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	2380      	movs	r3, #128	@ 0x80
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	429a      	cmp	r2, r3
 800247c:	d10f      	bne.n	800249e <HAL_SPI_Receive+0xf2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2140      	movs	r1, #64	@ 0x40
 800248a:	438a      	bics	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4954      	ldr	r1, [pc, #336]	@ (80025ec <HAL_SPI_Receive+0x240>)
 800249a:	400a      	ands	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2240      	movs	r2, #64	@ 0x40
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b40      	cmp	r3, #64	@ 0x40
 80024aa:	d007      	beq.n	80024bc <HAL_SPI_Receive+0x110>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2140      	movs	r1, #64	@ 0x40
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d000      	beq.n	80024c6 <HAL_SPI_Receive+0x11a>
 80024c4:	e06e      	b.n	80025a4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024c6:	e034      	b.n	8002532 <HAL_SPI_Receive+0x186>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2201      	movs	r2, #1
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d115      	bne.n	8002502 <HAL_SPI_Receive+0x156>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	001a      	movs	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e2:	7812      	ldrb	r2, [r2, #0]
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002500:	e017      	b.n	8002532 <HAL_SPI_Receive+0x186>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002502:	f7fe fd93 	bl	800102c <HAL_GetTick>
 8002506:	0002      	movs	r2, r0
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d802      	bhi.n	8002518 <HAL_SPI_Receive+0x16c>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	d102      	bne.n	800251e <HAL_SPI_Receive+0x172>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_SPI_Receive+0x186>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2251      	movs	r2, #81	@ 0x51
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2250      	movs	r2, #80	@ 0x50
 800252a:	2100      	movs	r1, #0
 800252c:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e057      	b.n	80025e2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1c5      	bne.n	80024c8 <HAL_SPI_Receive+0x11c>
 800253c:	e037      	b.n	80025ae <HAL_SPI_Receive+0x202>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	2b01      	cmp	r3, #1
 800254a:	d113      	bne.n	8002574 <HAL_SPI_Receive+0x1c8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002556:	b292      	uxth	r2, r2
 8002558:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255e:	1c9a      	adds	r2, r3, #2
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002572:	e017      	b.n	80025a4 <HAL_SPI_Receive+0x1f8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002574:	f7fe fd5a 	bl	800102c <HAL_GetTick>
 8002578:	0002      	movs	r2, r0
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d802      	bhi.n	800258a <HAL_SPI_Receive+0x1de>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	d102      	bne.n	8002590 <HAL_SPI_Receive+0x1e4>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_SPI_Receive+0x1f8>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2251      	movs	r2, #81	@ 0x51
 8002594:	2101      	movs	r1, #1
 8002596:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2250      	movs	r2, #80	@ 0x50
 800259c:	2100      	movs	r1, #0
 800259e:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e01e      	b.n	80025e2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1c7      	bne.n	800253e <HAL_SPI_Receive+0x192>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 fa69 	bl	8002a8c <SPI_EndRxTransaction>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_SPI_Receive+0x218>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2251      	movs	r2, #81	@ 0x51
 80025c8:	2101      	movs	r1, #1
 80025ca:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2250      	movs	r2, #80	@ 0x50
 80025d0:	2100      	movs	r1, #0
 80025d2:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_SPI_Receive+0x234>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_SPI_Receive+0x236>
  }
  else
  {
    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
  }
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b007      	add	sp, #28
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	ffffbfff 	.word	0xffffbfff

080025f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	@ 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	001a      	movs	r2, r3
 80025fe:	1cbb      	adds	r3, r7, #2
 8002600:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002602:	2301      	movs	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002606:	f7fe fd11 	bl	800102c <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800260e:	201f      	movs	r0, #31
 8002610:	183b      	adds	r3, r7, r0
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	2151      	movs	r1, #81	@ 0x51
 8002616:	5c52      	ldrb	r2, [r2, r1]
 8002618:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002620:	2316      	movs	r3, #22
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	1cba      	adds	r2, r7, #2
 8002626:	8812      	ldrh	r2, [r2, #0]
 8002628:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800262a:	183b      	adds	r3, r7, r0
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d00e      	beq.n	8002650 <HAL_SPI_TransmitReceive+0x60>
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	2382      	movs	r3, #130	@ 0x82
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	429a      	cmp	r2, r3
 800263a:	d107      	bne.n	800264c <HAL_SPI_TransmitReceive+0x5c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d103      	bne.n	800264c <HAL_SPI_TransmitReceive+0x5c>
 8002644:	183b      	adds	r3, r7, r0
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b04      	cmp	r3, #4
 800264a:	d001      	beq.n	8002650 <HAL_SPI_TransmitReceive+0x60>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800264c:	2302      	movs	r3, #2
 800264e:	e18a      	b.n	8002966 <HAL_SPI_TransmitReceive+0x376>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <HAL_SPI_TransmitReceive+0x74>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_SPI_TransmitReceive+0x74>
 800265c:	1cbb      	adds	r3, r7, #2
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x78>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e17e      	b.n	8002966 <HAL_SPI_TransmitReceive+0x376>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2250      	movs	r2, #80	@ 0x50
 800266c:	5c9b      	ldrb	r3, [r3, r2]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_SPI_TransmitReceive+0x86>
 8002672:	2302      	movs	r3, #2
 8002674:	e177      	b.n	8002966 <HAL_SPI_TransmitReceive+0x376>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2250      	movs	r2, #80	@ 0x50
 800267a:	2101      	movs	r1, #1
 800267c:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2251      	movs	r2, #81	@ 0x51
 8002682:	5c9b      	ldrb	r3, [r3, r2]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b04      	cmp	r3, #4
 8002688:	d003      	beq.n	8002692 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2251      	movs	r2, #81	@ 0x51
 800268e:	2105      	movs	r1, #5
 8002690:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1cba      	adds	r2, r7, #2
 80026a2:	8812      	ldrh	r2, [r2, #0]
 80026a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1cba      	adds	r2, r7, #2
 80026aa:	8812      	ldrh	r2, [r2, #0]
 80026ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1cba      	adds	r2, r7, #2
 80026b8:	8812      	ldrh	r2, [r2, #0]
 80026ba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1cba      	adds	r2, r7, #2
 80026c0:	8812      	ldrh	r2, [r2, #0]
 80026c2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2240      	movs	r2, #64	@ 0x40
 80026d8:	4013      	ands	r3, r2
 80026da:	2b40      	cmp	r3, #64	@ 0x40
 80026dc:	d007      	beq.n	80026ee <HAL_SPI_TransmitReceive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2140      	movs	r1, #64	@ 0x40
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d000      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x10c>
 80026fa:	e080      	b.n	80027fe <HAL_SPI_TransmitReceive+0x20e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_SPI_TransmitReceive+0x120>
 8002704:	2316      	movs	r3, #22
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d000      	beq.n	8002710 <HAL_SPI_TransmitReceive+0x120>
 800270e:	e06b      	b.n	80027e8 <HAL_SPI_TransmitReceive+0x1f8>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	881a      	ldrh	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	1c9a      	adds	r2, r3, #2
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002734:	e058      	b.n	80027e8 <HAL_SPI_TransmitReceive+0x1f8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2202      	movs	r2, #2
 800273e:	4013      	ands	r3, r2
 8002740:	2b02      	cmp	r3, #2
 8002742:	d11b      	bne.n	800277c <HAL_SPI_TransmitReceive+0x18c>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_SPI_TransmitReceive+0x18c>
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	2b01      	cmp	r3, #1
 8002752:	d113      	bne.n	800277c <HAL_SPI_TransmitReceive+0x18c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002764:	1c9a      	adds	r2, r3, #2
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2201      	movs	r2, #1
 8002784:	4013      	ands	r3, r2
 8002786:	2b01      	cmp	r3, #1
 8002788:	d119      	bne.n	80027be <HAL_SPI_TransmitReceive+0x1ce>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d014      	beq.n	80027be <HAL_SPI_TransmitReceive+0x1ce>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279e:	b292      	uxth	r2, r2
 80027a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a6:	1c9a      	adds	r2, r3, #2
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027ba:	2301      	movs	r3, #1
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027be:	f7fe fc35 	bl	800102c <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d80c      	bhi.n	80027e8 <HAL_SPI_TransmitReceive+0x1f8>
 80027ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d0:	3301      	adds	r3, #1
 80027d2:	d009      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x1f8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2251      	movs	r2, #81	@ 0x51
 80027d8:	2101      	movs	r1, #1
 80027da:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2250      	movs	r2, #80	@ 0x50
 80027e0:	2100      	movs	r1, #0
 80027e2:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e0be      	b.n	8002966 <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1a1      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x146>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d19c      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x146>
 80027fc:	e084      	b.n	8002908 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x222>
 8002806:	2316      	movs	r3, #22
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d000      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x222>
 8002810:	e070      	b.n	80028f4 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	330c      	adds	r3, #12
 800281c:	7812      	ldrb	r2, [r2, #0]
 800281e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002838:	e05c      	b.n	80028f4 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2202      	movs	r2, #2
 8002842:	4013      	ands	r3, r2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d11c      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x292>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d017      	beq.n	8002882 <HAL_SPI_TransmitReceive+0x292>
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	2b01      	cmp	r3, #1
 8002856:	d114      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x292>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	7812      	ldrb	r2, [r2, #0]
 8002864:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	2b01      	cmp	r3, #1
 800288e:	d119      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x2d4>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d014      	beq.n	80028c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028c0:	2301      	movs	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028c4:	f7fe fbb2 	bl	800102c <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d802      	bhi.n	80028da <HAL_SPI_TransmitReceive+0x2ea>
 80028d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d6:	3301      	adds	r3, #1
 80028d8:	d102      	bne.n	80028e0 <HAL_SPI_TransmitReceive+0x2f0>
 80028da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_SPI_TransmitReceive+0x304>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2251      	movs	r2, #81	@ 0x51
 80028e4:	2101      	movs	r1, #1
 80028e6:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2250      	movs	r2, #80	@ 0x50
 80028ec:	2100      	movs	r1, #0
 80028ee:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e038      	b.n	8002966 <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d19d      	bne.n	800283a <HAL_SPI_TransmitReceive+0x24a>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d198      	bne.n	800283a <HAL_SPI_TransmitReceive+0x24a>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002908:	6a3a      	ldr	r2, [r7, #32]
 800290a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	0018      	movs	r0, r3
 8002910:	f000 f926 	bl	8002b60 <SPI_EndRxTxTransaction>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d008      	beq.n	800292a <HAL_SPI_TransmitReceive+0x33a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2250      	movs	r2, #80	@ 0x50
 8002922:	2100      	movs	r1, #0
 8002924:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e01d      	b.n	8002966 <HAL_SPI_TransmitReceive+0x376>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2251      	movs	r2, #81	@ 0x51
 800294c:	2101      	movs	r1, #1
 800294e:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2250      	movs	r2, #80	@ 0x50
 8002954:	2100      	movs	r1, #0
 8002956:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_SPI_TransmitReceive+0x374>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_SPI_TransmitReceive+0x376>
  }
  else
  {
    return HAL_OK;
 8002964:	2300      	movs	r3, #0
  }
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b00a      	add	sp, #40	@ 0x28
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	1dfb      	adds	r3, r7, #7
 800297e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002980:	f7fe fb54 	bl	800102c <HAL_GetTick>
 8002984:	0002      	movs	r2, r0
 8002986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	18d3      	adds	r3, r2, r3
 800298e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002990:	f7fe fb4c 	bl	800102c <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002998:	4b3a      	ldr	r3, [pc, #232]	@ (8002a84 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	015b      	lsls	r3, r3, #5
 800299e:	0d1b      	lsrs	r3, r3, #20
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	4353      	muls	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029a6:	e059      	b.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	d056      	beq.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029ae:	f7fe fb3d 	bl	800102c <HAL_GetTick>
 80029b2:	0002      	movs	r2, r0
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d902      	bls.n	80029c4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d142      	bne.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	21e0      	movs	r1, #224	@ 0xe0
 80029d0:	438a      	bics	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	2382      	movs	r3, #130	@ 0x82
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	429a      	cmp	r2, r3
 80029de:	d113      	bne.n	8002a08 <SPI_WaitFlagStateUntilTimeout+0x98>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d005      	beq.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d107      	bne.n	8002a08 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2140      	movs	r1, #64	@ 0x40
 8002a04:	438a      	bics	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a0c:	2380      	movs	r3, #128	@ 0x80
 8002a0e:	019b      	lsls	r3, r3, #6
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d110      	bne.n	8002a36 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	491a      	ldr	r1, [pc, #104]	@ (8002a88 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002a20:	400a      	ands	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2180      	movs	r1, #128	@ 0x80
 8002a30:	0189      	lsls	r1, r1, #6
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2251      	movs	r2, #81	@ 0x51
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2250      	movs	r2, #80	@ 0x50
 8002a42:	2100      	movs	r1, #0
 8002a44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e018      	b.n	8002a7c <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	e002      	b.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	425a      	negs	r2, r3
 8002a6c:	4153      	adcs	r3, r2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	001a      	movs	r2, r3
 8002a72:	1dfb      	adds	r3, r7, #7
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d196      	bne.n	80029a8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b008      	add	sp, #32
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000000 	.word	0x20000000
 8002a88:	ffffdfff 	.word	0xffffdfff

08002a8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	2382      	movs	r3, #130	@ 0x82
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d113      	bne.n	8002acc <SPI_EndRxTransaction+0x40>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d005      	beq.n	8002abc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2140      	movs	r1, #64	@ 0x40
 8002ac8:	438a      	bics	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	2382      	movs	r3, #130	@ 0x82
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d12b      	bne.n	8002b30 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d012      	beq.n	8002b0a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	0013      	movs	r3, r2
 8002aee:	2200      	movs	r2, #0
 8002af0:	2180      	movs	r1, #128	@ 0x80
 8002af2:	f7ff ff3d 	bl	8002970 <SPI_WaitFlagStateUntilTimeout>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d02d      	beq.n	8002b56 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afe:	2220      	movs	r2, #32
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e026      	b.n	8002b58 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	0013      	movs	r3, r2
 8002b14:	2200      	movs	r2, #0
 8002b16:	2101      	movs	r1, #1
 8002b18:	f7ff ff2a 	bl	8002970 <SPI_WaitFlagStateUntilTimeout>
 8002b1c:	1e03      	subs	r3, r0, #0
 8002b1e:	d01a      	beq.n	8002b56 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	2220      	movs	r2, #32
 8002b26:	431a      	orrs	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e013      	b.n	8002b58 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	0013      	movs	r3, r2
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	f7ff ff17 	bl	8002970 <SPI_WaitFlagStateUntilTimeout>
 8002b42:	1e03      	subs	r3, r0, #0
 8002b44:	d007      	beq.n	8002b56 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e000      	b.n	8002b58 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b004      	add	sp, #16
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	0013      	movs	r3, r2
 8002b76:	2201      	movs	r2, #1
 8002b78:	2102      	movs	r1, #2
 8002b7a:	f7ff fef9 	bl	8002970 <SPI_WaitFlagStateUntilTimeout>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d007      	beq.n	8002b92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	2220      	movs	r2, #32
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e037      	b.n	8002c02 <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b92:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <SPI_EndRxTxTransaction+0xac>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	491e      	ldr	r1, [pc, #120]	@ (8002c10 <SPI_EndRxTxTransaction+0xb0>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7fd fab5 	bl	8000108 <__udivsi3>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	001a      	movs	r2, r3
 8002ba2:	0013      	movs	r3, r2
 8002ba4:	015b      	lsls	r3, r3, #5
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	2382      	movs	r3, #130	@ 0x82
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d112      	bne.n	8002be2 <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2180      	movs	r1, #128	@ 0x80
 8002bca:	f7ff fed1 	bl	8002970 <SPI_WaitFlagStateUntilTimeout>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d016      	beq.n	8002c00 <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e00f      	b.n	8002c02 <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2280      	movs	r2, #128	@ 0x80
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b80      	cmp	r3, #128	@ 0x80
 8002bfa:	d0f2      	beq.n	8002be2 <SPI_EndRxTxTransaction+0x82>
 8002bfc:	e000      	b.n	8002c00 <SPI_EndRxTxTransaction+0xa0>
        break;
 8002bfe:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b006      	add	sp, #24
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	016e3600 	.word	0x016e3600

08002c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e044      	b.n	8002cb0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2278      	movs	r2, #120	@ 0x78
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7fe f8eb 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2224      	movs	r2, #36	@ 0x24
 8002c42:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2101      	movs	r1, #1
 8002c50:	438a      	bics	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 fb16 	bl	8003290 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 f8c8 	bl	8002dfc <UART_SetConfig>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e01c      	b.n	8002cb0 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	490d      	ldr	r1, [pc, #52]	@ (8002cb8 <HAL_UART_Init+0xa4>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	212a      	movs	r1, #42	@ 0x2a
 8002c92:	438a      	bics	r2, r1
 8002c94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f000 fba5 	bl	80033f8 <UART_CheckIdleState>
 8002cae:	0003      	movs	r3, r0
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	ffffb7ff 	.word	0xffffb7ff

08002cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	@ 0x28
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	1dbb      	adds	r3, r7, #6
 8002cca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d000      	beq.n	8002cd6 <HAL_UART_Transmit+0x1a>
 8002cd4:	e08c      	b.n	8002df0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_UART_Transmit+0x28>
 8002cdc:	1dbb      	adds	r3, r7, #6
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e084      	b.n	8002df2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	015b      	lsls	r3, r3, #5
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d109      	bne.n	8002d08 <HAL_UART_Transmit+0x4c>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4013      	ands	r3, r2
 8002d02:	d001      	beq.n	8002d08 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e074      	b.n	8002df2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2284      	movs	r2, #132	@ 0x84
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2221      	movs	r2, #33	@ 0x21
 8002d14:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d16:	f7fe f989 	bl	800102c <HAL_GetTick>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1dba      	adds	r2, r7, #6
 8002d22:	2150      	movs	r1, #80	@ 0x50
 8002d24:	8812      	ldrh	r2, [r2, #0]
 8002d26:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1dba      	adds	r2, r7, #6
 8002d2c:	2152      	movs	r1, #82	@ 0x52
 8002d2e:	8812      	ldrh	r2, [r2, #0]
 8002d30:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	015b      	lsls	r3, r3, #5
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d108      	bne.n	8002d50 <HAL_UART_Transmit+0x94>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	e003      	b.n	8002d58 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d58:	e02f      	b.n	8002dba <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	0013      	movs	r3, r2
 8002d64:	2200      	movs	r2, #0
 8002d66:	2180      	movs	r1, #128	@ 0x80
 8002d68:	f000 fbee 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 8002d6c:	1e03      	subs	r3, r0, #0
 8002d6e:	d004      	beq.n	8002d7a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e03b      	b.n	8002df2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	001a      	movs	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	05d2      	lsls	r2, r2, #23
 8002d8c:	0dd2      	lsrs	r2, r2, #23
 8002d8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	3302      	adds	r3, #2
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e007      	b.n	8002da8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	781a      	ldrb	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3301      	adds	r3, #1
 8002da6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2252      	movs	r2, #82	@ 0x52
 8002dac:	5a9b      	ldrh	r3, [r3, r2]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b299      	uxth	r1, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2252      	movs	r2, #82	@ 0x52
 8002db8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2252      	movs	r2, #82	@ 0x52
 8002dbe:	5a9b      	ldrh	r3, [r3, r2]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1c9      	bne.n	8002d5a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	0013      	movs	r3, r2
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2140      	movs	r1, #64	@ 0x40
 8002dd4:	f000 fbb8 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 8002dd8:	1e03      	subs	r3, r0, #0
 8002dda:	d004      	beq.n	8002de6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e005      	b.n	8002df2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e000      	b.n	8002df2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
  }
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b008      	add	sp, #32
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	b08e      	sub	sp, #56	@ 0x38
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e04:	231a      	movs	r3, #26
 8002e06:	2218      	movs	r2, #24
 8002e08:	189b      	adds	r3, r3, r2
 8002e0a:	19db      	adds	r3, r3, r7
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4ab4      	ldr	r2, [pc, #720]	@ (8003100 <UART_SetConfig+0x304>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4aaf      	ldr	r2, [pc, #700]	@ (8003104 <UART_SetConfig+0x308>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4aa9      	ldr	r2, [pc, #676]	@ (8003108 <UART_SetConfig+0x30c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	4aa5      	ldr	r2, [pc, #660]	@ (800310c <UART_SetConfig+0x310>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e82:	430a      	orrs	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4aa1      	ldr	r2, [pc, #644]	@ (8003110 <UART_SetConfig+0x314>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d131      	bne.n	8002ef4 <UART_SetConfig+0xf8>
 8002e90:	4ba0      	ldr	r3, [pc, #640]	@ (8003114 <UART_SetConfig+0x318>)
 8002e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e94:	220c      	movs	r2, #12
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b0c      	cmp	r3, #12
 8002e9a:	d01d      	beq.n	8002ed8 <UART_SetConfig+0xdc>
 8002e9c:	d823      	bhi.n	8002ee6 <UART_SetConfig+0xea>
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d00c      	beq.n	8002ebc <UART_SetConfig+0xc0>
 8002ea2:	d820      	bhi.n	8002ee6 <UART_SetConfig+0xea>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <UART_SetConfig+0xb2>
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d00e      	beq.n	8002eca <UART_SetConfig+0xce>
 8002eac:	e01b      	b.n	8002ee6 <UART_SetConfig+0xea>
 8002eae:	231b      	movs	r3, #27
 8002eb0:	2218      	movs	r2, #24
 8002eb2:	189b      	adds	r3, r3, r2
 8002eb4:	19db      	adds	r3, r3, r7
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e065      	b.n	8002f88 <UART_SetConfig+0x18c>
 8002ebc:	231b      	movs	r3, #27
 8002ebe:	2218      	movs	r2, #24
 8002ec0:	189b      	adds	r3, r3, r2
 8002ec2:	19db      	adds	r3, r3, r7
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e05e      	b.n	8002f88 <UART_SetConfig+0x18c>
 8002eca:	231b      	movs	r3, #27
 8002ecc:	2218      	movs	r2, #24
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e057      	b.n	8002f88 <UART_SetConfig+0x18c>
 8002ed8:	231b      	movs	r3, #27
 8002eda:	2218      	movs	r2, #24
 8002edc:	189b      	adds	r3, r3, r2
 8002ede:	19db      	adds	r3, r3, r7
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	e050      	b.n	8002f88 <UART_SetConfig+0x18c>
 8002ee6:	231b      	movs	r3, #27
 8002ee8:	2218      	movs	r2, #24
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	19db      	adds	r3, r3, r7
 8002eee:	2210      	movs	r2, #16
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	e049      	b.n	8002f88 <UART_SetConfig+0x18c>
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a83      	ldr	r2, [pc, #524]	@ (8003108 <UART_SetConfig+0x30c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d13e      	bne.n	8002f7c <UART_SetConfig+0x180>
 8002efe:	4b85      	ldr	r3, [pc, #532]	@ (8003114 <UART_SetConfig+0x318>)
 8002f00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f02:	23c0      	movs	r3, #192	@ 0xc0
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	4013      	ands	r3, r2
 8002f08:	22c0      	movs	r2, #192	@ 0xc0
 8002f0a:	0112      	lsls	r2, r2, #4
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d027      	beq.n	8002f60 <UART_SetConfig+0x164>
 8002f10:	22c0      	movs	r2, #192	@ 0xc0
 8002f12:	0112      	lsls	r2, r2, #4
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d82a      	bhi.n	8002f6e <UART_SetConfig+0x172>
 8002f18:	2280      	movs	r2, #128	@ 0x80
 8002f1a:	0112      	lsls	r2, r2, #4
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d011      	beq.n	8002f44 <UART_SetConfig+0x148>
 8002f20:	2280      	movs	r2, #128	@ 0x80
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d822      	bhi.n	8002f6e <UART_SetConfig+0x172>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d004      	beq.n	8002f36 <UART_SetConfig+0x13a>
 8002f2c:	2280      	movs	r2, #128	@ 0x80
 8002f2e:	00d2      	lsls	r2, r2, #3
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <UART_SetConfig+0x156>
 8002f34:	e01b      	b.n	8002f6e <UART_SetConfig+0x172>
 8002f36:	231b      	movs	r3, #27
 8002f38:	2218      	movs	r2, #24
 8002f3a:	189b      	adds	r3, r3, r2
 8002f3c:	19db      	adds	r3, r3, r7
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e021      	b.n	8002f88 <UART_SetConfig+0x18c>
 8002f44:	231b      	movs	r3, #27
 8002f46:	2218      	movs	r2, #24
 8002f48:	189b      	adds	r3, r3, r2
 8002f4a:	19db      	adds	r3, r3, r7
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e01a      	b.n	8002f88 <UART_SetConfig+0x18c>
 8002f52:	231b      	movs	r3, #27
 8002f54:	2218      	movs	r2, #24
 8002f56:	189b      	adds	r3, r3, r2
 8002f58:	19db      	adds	r3, r3, r7
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e013      	b.n	8002f88 <UART_SetConfig+0x18c>
 8002f60:	231b      	movs	r3, #27
 8002f62:	2218      	movs	r2, #24
 8002f64:	189b      	adds	r3, r3, r2
 8002f66:	19db      	adds	r3, r3, r7
 8002f68:	2208      	movs	r2, #8
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	e00c      	b.n	8002f88 <UART_SetConfig+0x18c>
 8002f6e:	231b      	movs	r3, #27
 8002f70:	2218      	movs	r2, #24
 8002f72:	189b      	adds	r3, r3, r2
 8002f74:	19db      	adds	r3, r3, r7
 8002f76:	2210      	movs	r2, #16
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e005      	b.n	8002f88 <UART_SetConfig+0x18c>
 8002f7c:	231b      	movs	r3, #27
 8002f7e:	2218      	movs	r2, #24
 8002f80:	189b      	adds	r3, r3, r2
 8002f82:	19db      	adds	r3, r3, r7
 8002f84:	2210      	movs	r2, #16
 8002f86:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8003108 <UART_SetConfig+0x30c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d000      	beq.n	8002f94 <UART_SetConfig+0x198>
 8002f92:	e084      	b.n	800309e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f94:	231b      	movs	r3, #27
 8002f96:	2218      	movs	r2, #24
 8002f98:	189b      	adds	r3, r3, r2
 8002f9a:	19db      	adds	r3, r3, r7
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d01d      	beq.n	8002fde <UART_SetConfig+0x1e2>
 8002fa2:	dc20      	bgt.n	8002fe6 <UART_SetConfig+0x1ea>
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d015      	beq.n	8002fd4 <UART_SetConfig+0x1d8>
 8002fa8:	dc1d      	bgt.n	8002fe6 <UART_SetConfig+0x1ea>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <UART_SetConfig+0x1b8>
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d005      	beq.n	8002fbe <UART_SetConfig+0x1c2>
 8002fb2:	e018      	b.n	8002fe6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb4:	f7fe fff4 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002fbc:	e01c      	b.n	8002ff8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fbe:	4b55      	ldr	r3, [pc, #340]	@ (8003114 <UART_SetConfig+0x318>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d002      	beq.n	8002fce <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002fc8:	4b53      	ldr	r3, [pc, #332]	@ (8003118 <UART_SetConfig+0x31c>)
 8002fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002fcc:	e014      	b.n	8002ff8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002fce:	4b53      	ldr	r3, [pc, #332]	@ (800311c <UART_SetConfig+0x320>)
 8002fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002fd2:	e011      	b.n	8002ff8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd4:	f7fe ff54 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002fdc:	e00c      	b.n	8002ff8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002fe4:	e008      	b.n	8002ff8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002fea:	231a      	movs	r3, #26
 8002fec:	2218      	movs	r2, #24
 8002fee:	189b      	adds	r3, r3, r2
 8002ff0:	19db      	adds	r3, r3, r7
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
        break;
 8002ff6:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d100      	bne.n	8003000 <UART_SetConfig+0x204>
 8002ffe:	e12f      	b.n	8003260 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	0013      	movs	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	189b      	adds	r3, r3, r2
 800300a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800300c:	429a      	cmp	r2, r3
 800300e:	d305      	bcc.n	800301c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003018:	429a      	cmp	r2, r3
 800301a:	d906      	bls.n	800302a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 800301c:	231a      	movs	r3, #26
 800301e:	2218      	movs	r2, #24
 8003020:	189b      	adds	r3, r3, r2
 8003022:	19db      	adds	r3, r3, r7
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e11a      	b.n	8003260 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800302a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	6939      	ldr	r1, [r7, #16]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	000b      	movs	r3, r1
 8003038:	0e1b      	lsrs	r3, r3, #24
 800303a:	0010      	movs	r0, r2
 800303c:	0205      	lsls	r5, r0, #8
 800303e:	431d      	orrs	r5, r3
 8003040:	000b      	movs	r3, r1
 8003042:	021c      	lsls	r4, r3, #8
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68b8      	ldr	r0, [r7, #8]
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	1900      	adds	r0, r0, r4
 8003056:	4169      	adcs	r1, r5
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f7fd f8db 	bl	8000220 <__aeabi_uldivmod>
 800306a:	0002      	movs	r2, r0
 800306c:	000b      	movs	r3, r1
 800306e:	0013      	movs	r3, r2
 8003070:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003074:	23c0      	movs	r3, #192	@ 0xc0
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d309      	bcc.n	8003090 <UART_SetConfig+0x294>
 800307c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	035b      	lsls	r3, r3, #13
 8003082:	429a      	cmp	r2, r3
 8003084:	d204      	bcs.n	8003090 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	e0e7      	b.n	8003260 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003090:	231a      	movs	r3, #26
 8003092:	2218      	movs	r2, #24
 8003094:	189b      	adds	r3, r3, r2
 8003096:	19db      	adds	r3, r3, r7
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e0e0      	b.n	8003260 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	2380      	movs	r3, #128	@ 0x80
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d000      	beq.n	80030ac <UART_SetConfig+0x2b0>
 80030aa:	e082      	b.n	80031b2 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80030ac:	231b      	movs	r3, #27
 80030ae:	2218      	movs	r2, #24
 80030b0:	189b      	adds	r3, r3, r2
 80030b2:	19db      	adds	r3, r3, r7
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d834      	bhi.n	8003124 <UART_SetConfig+0x328>
 80030ba:	009a      	lsls	r2, r3, #2
 80030bc:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <UART_SetConfig+0x324>)
 80030be:	18d3      	adds	r3, r2, r3
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c4:	f7fe ff6c 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 80030c8:	0003      	movs	r3, r0
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030cc:	e033      	b.n	8003136 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030ce:	f7fe ff7d 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 80030d2:	0003      	movs	r3, r0
 80030d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030d6:	e02e      	b.n	8003136 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <UART_SetConfig+0x318>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2210      	movs	r2, #16
 80030de:	4013      	ands	r3, r2
 80030e0:	d002      	beq.n	80030e8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003118 <UART_SetConfig+0x31c>)
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80030e6:	e026      	b.n	8003136 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <UART_SetConfig+0x320>)
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030ec:	e023      	b.n	8003136 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ee:	f7fe fec7 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 80030f2:	0003      	movs	r3, r0
 80030f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030f6:	e01e      	b.n	8003136 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030fe:	e01a      	b.n	8003136 <UART_SetConfig+0x33a>
 8003100:	efff69f3 	.word	0xefff69f3
 8003104:	ffffcfff 	.word	0xffffcfff
 8003108:	40004800 	.word	0x40004800
 800310c:	fffff4ff 	.word	0xfffff4ff
 8003110:	40004400 	.word	0x40004400
 8003114:	40021000 	.word	0x40021000
 8003118:	003d0900 	.word	0x003d0900
 800311c:	00f42400 	.word	0x00f42400
 8003120:	0800396c 	.word	0x0800396c
      default:
        pclk = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003128:	231a      	movs	r3, #26
 800312a:	2218      	movs	r2, #24
 800312c:	189b      	adds	r3, r3, r2
 800312e:	19db      	adds	r3, r3, r7
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
        break;
 8003134:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d100      	bne.n	800313e <UART_SetConfig+0x342>
 800313c:	e090      	b.n	8003260 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800313e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003140:	005a      	lsls	r2, r3, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	085b      	lsrs	r3, r3, #1
 8003148:	18d2      	adds	r2, r2, r3
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	0019      	movs	r1, r3
 8003150:	0010      	movs	r0, r2
 8003152:	f7fc ffd9 	bl	8000108 <__udivsi3>
 8003156:	0003      	movs	r3, r0
 8003158:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800315a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315c:	2b0f      	cmp	r3, #15
 800315e:	d921      	bls.n	80031a4 <UART_SetConfig+0x3a8>
 8003160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003162:	2380      	movs	r3, #128	@ 0x80
 8003164:	025b      	lsls	r3, r3, #9
 8003166:	429a      	cmp	r2, r3
 8003168:	d21c      	bcs.n	80031a4 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316c:	b29a      	uxth	r2, r3
 800316e:	200e      	movs	r0, #14
 8003170:	2418      	movs	r4, #24
 8003172:	1903      	adds	r3, r0, r4
 8003174:	19db      	adds	r3, r3, r7
 8003176:	210f      	movs	r1, #15
 8003178:	438a      	bics	r2, r1
 800317a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	b29b      	uxth	r3, r3
 8003182:	2207      	movs	r2, #7
 8003184:	4013      	ands	r3, r2
 8003186:	b299      	uxth	r1, r3
 8003188:	1903      	adds	r3, r0, r4
 800318a:	19db      	adds	r3, r3, r7
 800318c:	1902      	adds	r2, r0, r4
 800318e:	19d2      	adds	r2, r2, r7
 8003190:	8812      	ldrh	r2, [r2, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	1902      	adds	r2, r0, r4
 800319c:	19d2      	adds	r2, r2, r7
 800319e:	8812      	ldrh	r2, [r2, #0]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	e05d      	b.n	8003260 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80031a4:	231a      	movs	r3, #26
 80031a6:	2218      	movs	r2, #24
 80031a8:	189b      	adds	r3, r3, r2
 80031aa:	19db      	adds	r3, r3, r7
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e056      	b.n	8003260 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031b2:	231b      	movs	r3, #27
 80031b4:	2218      	movs	r2, #24
 80031b6:	189b      	adds	r3, r3, r2
 80031b8:	19db      	adds	r3, r3, r7
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d822      	bhi.n	8003206 <UART_SetConfig+0x40a>
 80031c0:	009a      	lsls	r2, r3, #2
 80031c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003280 <UART_SetConfig+0x484>)
 80031c4:	18d3      	adds	r3, r2, r3
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ca:	f7fe fee9 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 80031ce:	0003      	movs	r3, r0
 80031d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031d2:	e021      	b.n	8003218 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7fe fefa 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 80031d8:	0003      	movs	r3, r0
 80031da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031dc:	e01c      	b.n	8003218 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031de:	4b29      	ldr	r3, [pc, #164]	@ (8003284 <UART_SetConfig+0x488>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2210      	movs	r2, #16
 80031e4:	4013      	ands	r3, r2
 80031e6:	d002      	beq.n	80031ee <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80031e8:	4b27      	ldr	r3, [pc, #156]	@ (8003288 <UART_SetConfig+0x48c>)
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80031ec:	e014      	b.n	8003218 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80031ee:	4b27      	ldr	r3, [pc, #156]	@ (800328c <UART_SetConfig+0x490>)
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031f2:	e011      	b.n	8003218 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f4:	f7fe fe44 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 80031f8:	0003      	movs	r3, r0
 80031fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031fc:	e00c      	b.n	8003218 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031fe:	2380      	movs	r3, #128	@ 0x80
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003204:	e008      	b.n	8003218 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800320a:	231a      	movs	r3, #26
 800320c:	2218      	movs	r2, #24
 800320e:	189b      	adds	r3, r3, r2
 8003210:	19db      	adds	r3, r3, r7
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
        break;
 8003216:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d020      	beq.n	8003260 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	085a      	lsrs	r2, r3, #1
 8003224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003226:	18d2      	adds	r2, r2, r3
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0019      	movs	r1, r3
 800322e:	0010      	movs	r0, r2
 8003230:	f7fc ff6a 	bl	8000108 <__udivsi3>
 8003234:	0003      	movs	r3, r0
 8003236:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323a:	2b0f      	cmp	r3, #15
 800323c:	d90a      	bls.n	8003254 <UART_SetConfig+0x458>
 800323e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	025b      	lsls	r3, r3, #9
 8003244:	429a      	cmp	r2, r3
 8003246:	d205      	bcs.n	8003254 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	b29a      	uxth	r2, r3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	e005      	b.n	8003260 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003254:	231a      	movs	r3, #26
 8003256:	2218      	movs	r2, #24
 8003258:	189b      	adds	r3, r3, r2
 800325a:	19db      	adds	r3, r3, r7
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2200      	movs	r2, #0
 8003264:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	2200      	movs	r2, #0
 800326a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800326c:	231a      	movs	r3, #26
 800326e:	2218      	movs	r2, #24
 8003270:	189b      	adds	r3, r3, r2
 8003272:	19db      	adds	r3, r3, r7
 8003274:	781b      	ldrb	r3, [r3, #0]
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b00e      	add	sp, #56	@ 0x38
 800327c:	bdb0      	pop	{r4, r5, r7, pc}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	08003990 	.word	0x08003990
 8003284:	40021000 	.word	0x40021000
 8003288:	003d0900 	.word	0x003d0900
 800328c:	00f42400 	.word	0x00f42400

08003290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	2208      	movs	r2, #8
 800329e:	4013      	ands	r3, r2
 80032a0:	d00b      	beq.n	80032ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4a4a      	ldr	r2, [pc, #296]	@ (80033d4 <UART_AdvFeatureConfig+0x144>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	0019      	movs	r1, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	2201      	movs	r2, #1
 80032c0:	4013      	ands	r3, r2
 80032c2:	d00b      	beq.n	80032dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4a43      	ldr	r2, [pc, #268]	@ (80033d8 <UART_AdvFeatureConfig+0x148>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	0019      	movs	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	2202      	movs	r2, #2
 80032e2:	4013      	ands	r3, r2
 80032e4:	d00b      	beq.n	80032fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4a3b      	ldr	r2, [pc, #236]	@ (80033dc <UART_AdvFeatureConfig+0x14c>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	0019      	movs	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	2204      	movs	r2, #4
 8003304:	4013      	ands	r3, r2
 8003306:	d00b      	beq.n	8003320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4a34      	ldr	r2, [pc, #208]	@ (80033e0 <UART_AdvFeatureConfig+0x150>)
 8003310:	4013      	ands	r3, r2
 8003312:	0019      	movs	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	2210      	movs	r2, #16
 8003326:	4013      	ands	r3, r2
 8003328:	d00b      	beq.n	8003342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a2c      	ldr	r2, [pc, #176]	@ (80033e4 <UART_AdvFeatureConfig+0x154>)
 8003332:	4013      	ands	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	2220      	movs	r2, #32
 8003348:	4013      	ands	r3, r2
 800334a:	d00b      	beq.n	8003364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	4a25      	ldr	r2, [pc, #148]	@ (80033e8 <UART_AdvFeatureConfig+0x158>)
 8003354:	4013      	ands	r3, r2
 8003356:	0019      	movs	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	2240      	movs	r2, #64	@ 0x40
 800336a:	4013      	ands	r3, r2
 800336c:	d01d      	beq.n	80033aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4a1d      	ldr	r2, [pc, #116]	@ (80033ec <UART_AdvFeatureConfig+0x15c>)
 8003376:	4013      	ands	r3, r2
 8003378:	0019      	movs	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800338a:	2380      	movs	r3, #128	@ 0x80
 800338c:	035b      	lsls	r3, r3, #13
 800338e:	429a      	cmp	r2, r3
 8003390:	d10b      	bne.n	80033aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a15      	ldr	r2, [pc, #84]	@ (80033f0 <UART_AdvFeatureConfig+0x160>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	2280      	movs	r2, #128	@ 0x80
 80033b0:	4013      	ands	r3, r2
 80033b2:	d00b      	beq.n	80033cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a0e      	ldr	r2, [pc, #56]	@ (80033f4 <UART_AdvFeatureConfig+0x164>)
 80033bc:	4013      	ands	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
  }
}
 80033cc:	46c0      	nop			@ (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	ffff7fff 	.word	0xffff7fff
 80033d8:	fffdffff 	.word	0xfffdffff
 80033dc:	fffeffff 	.word	0xfffeffff
 80033e0:	fffbffff 	.word	0xfffbffff
 80033e4:	ffffefff 	.word	0xffffefff
 80033e8:	ffffdfff 	.word	0xffffdfff
 80033ec:	ffefffff 	.word	0xffefffff
 80033f0:	ff9fffff 	.word	0xff9fffff
 80033f4:	fff7ffff 	.word	0xfff7ffff

080033f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b092      	sub	sp, #72	@ 0x48
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2284      	movs	r2, #132	@ 0x84
 8003404:	2100      	movs	r1, #0
 8003406:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003408:	f7fd fe10 	bl	800102c <HAL_GetTick>
 800340c:	0003      	movs	r3, r0
 800340e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2208      	movs	r2, #8
 8003418:	4013      	ands	r3, r2
 800341a:	2b08      	cmp	r3, #8
 800341c:	d12c      	bne.n	8003478 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800341e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003420:	2280      	movs	r2, #128	@ 0x80
 8003422:	0391      	lsls	r1, r2, #14
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4a46      	ldr	r2, [pc, #280]	@ (8003540 <UART_CheckIdleState+0x148>)
 8003428:	9200      	str	r2, [sp, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	f000 f88c 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 8003430:	1e03      	subs	r3, r0, #0
 8003432:	d021      	beq.n	8003478 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003434:	f3ef 8310 	mrs	r3, PRIMASK
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800343c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800343e:	2301      	movs	r3, #1
 8003440:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	f383 8810 	msr	PRIMASK, r3
}
 8003448:	46c0      	nop			@ (mov r8, r8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2180      	movs	r1, #128	@ 0x80
 8003456:	438a      	bics	r2, r1
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003460:	f383 8810 	msr	PRIMASK, r3
}
 8003464:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2278      	movs	r2, #120	@ 0x78
 8003470:	2100      	movs	r1, #0
 8003472:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e05f      	b.n	8003538 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2204      	movs	r2, #4
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d146      	bne.n	8003514 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003488:	2280      	movs	r2, #128	@ 0x80
 800348a:	03d1      	lsls	r1, r2, #15
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4a2c      	ldr	r2, [pc, #176]	@ (8003540 <UART_CheckIdleState+0x148>)
 8003490:	9200      	str	r2, [sp, #0]
 8003492:	2200      	movs	r2, #0
 8003494:	f000 f858 	bl	8003548 <UART_WaitOnFlagUntilTimeout>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d03b      	beq.n	8003514 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349c:	f3ef 8310 	mrs	r3, PRIMASK
 80034a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80034a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034a6:	2301      	movs	r3, #1
 80034a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4921      	ldr	r1, [pc, #132]	@ (8003544 <UART_CheckIdleState+0x14c>)
 80034be:	400a      	ands	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f383 8810 	msr	PRIMASK, r3
}
 80034cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ce:	f3ef 8310 	mrs	r3, PRIMASK
 80034d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80034d4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80034d8:	2301      	movs	r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f383 8810 	msr	PRIMASK, r3
}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2101      	movs	r1, #1
 80034f0:	438a      	bics	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f383 8810 	msr	PRIMASK, r3
}
 80034fe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2280      	movs	r2, #128	@ 0x80
 8003504:	2120      	movs	r1, #32
 8003506:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2278      	movs	r2, #120	@ 0x78
 800350c:	2100      	movs	r1, #0
 800350e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e011      	b.n	8003538 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2280      	movs	r2, #128	@ 0x80
 800351e:	2120      	movs	r1, #32
 8003520:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2278      	movs	r2, #120	@ 0x78
 8003532:	2100      	movs	r1, #0
 8003534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b010      	add	sp, #64	@ 0x40
 800353e:	bd80      	pop	{r7, pc}
 8003540:	01ffffff 	.word	0x01ffffff
 8003544:	fffffedf 	.word	0xfffffedf

08003548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	1dfb      	adds	r3, r7, #7
 8003556:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003558:	e051      	b.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	3301      	adds	r3, #1
 800355e:	d04e      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003560:	f7fd fd64 	bl	800102c <HAL_GetTick>
 8003564:	0002      	movs	r2, r0
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	429a      	cmp	r2, r3
 800356e:	d302      	bcc.n	8003576 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e051      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2204      	movs	r2, #4
 8003582:	4013      	ands	r3, r2
 8003584:	d03b      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b80      	cmp	r3, #128	@ 0x80
 800358a:	d038      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b40      	cmp	r3, #64	@ 0x40
 8003590:	d035      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	2208      	movs	r2, #8
 800359a:	4013      	ands	r3, r2
 800359c:	2b08      	cmp	r3, #8
 800359e:	d111      	bne.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2208      	movs	r2, #8
 80035a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 f83c 	bl	8003628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2284      	movs	r2, #132	@ 0x84
 80035b4:	2108      	movs	r1, #8
 80035b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2278      	movs	r2, #120	@ 0x78
 80035bc:	2100      	movs	r1, #0
 80035be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e02c      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69da      	ldr	r2, [r3, #28]
 80035ca:	2380      	movs	r3, #128	@ 0x80
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	401a      	ands	r2, r3
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d112      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2280      	movs	r2, #128	@ 0x80
 80035de:	0112      	lsls	r2, r2, #4
 80035e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 f81f 	bl	8003628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2284      	movs	r2, #132	@ 0x84
 80035ee:	2120      	movs	r1, #32
 80035f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2278      	movs	r2, #120	@ 0x78
 80035f6:	2100      	movs	r1, #0
 80035f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e00f      	b.n	800361e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	4013      	ands	r3, r2
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	425a      	negs	r2, r3
 800360e:	4153      	adcs	r3, r2
 8003610:	b2db      	uxtb	r3, r3
 8003612:	001a      	movs	r2, r3
 8003614:	1dfb      	adds	r3, r7, #7
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d09e      	beq.n	800355a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b004      	add	sp, #16
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08e      	sub	sp, #56	@ 0x38
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003630:	f3ef 8310 	mrs	r3, PRIMASK
 8003634:	617b      	str	r3, [r7, #20]
  return(result);
 8003636:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003638:	637b      	str	r3, [r7, #52]	@ 0x34
 800363a:	2301      	movs	r3, #1
 800363c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f383 8810 	msr	PRIMASK, r3
}
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4926      	ldr	r1, [pc, #152]	@ (80036ec <UART_EndRxTransfer+0xc4>)
 8003652:	400a      	ands	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003658:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f383 8810 	msr	PRIMASK, r3
}
 8003660:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003662:	f3ef 8310 	mrs	r3, PRIMASK
 8003666:	623b      	str	r3, [r7, #32]
  return(result);
 8003668:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366a:	633b      	str	r3, [r7, #48]	@ 0x30
 800366c:	2301      	movs	r3, #1
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	f383 8810 	msr	PRIMASK, r3
}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2101      	movs	r1, #1
 8003684:	438a      	bics	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368e:	f383 8810 	msr	PRIMASK, r3
}
 8003692:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003698:	2b01      	cmp	r3, #1
 800369a:	d118      	bne.n	80036ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369c:	f3ef 8310 	mrs	r3, PRIMASK
 80036a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80036a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036a6:	2301      	movs	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2110      	movs	r1, #16
 80036be:	438a      	bics	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f383 8810 	msr	PRIMASK, r3
}
 80036cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2280      	movs	r2, #128	@ 0x80
 80036d2:	2120      	movs	r1, #32
 80036d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b00e      	add	sp, #56	@ 0x38
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	fffffedf 	.word	0xfffffedf

080036f0 <memset>:
 80036f0:	0003      	movs	r3, r0
 80036f2:	1882      	adds	r2, r0, r2
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d100      	bne.n	80036fa <memset+0xa>
 80036f8:	4770      	bx	lr
 80036fa:	7019      	strb	r1, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	e7f9      	b.n	80036f4 <memset+0x4>

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	2600      	movs	r6, #0
 8003704:	4c0c      	ldr	r4, [pc, #48]	@ (8003738 <__libc_init_array+0x38>)
 8003706:	4d0d      	ldr	r5, [pc, #52]	@ (800373c <__libc_init_array+0x3c>)
 8003708:	1b64      	subs	r4, r4, r5
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	42a6      	cmp	r6, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	2600      	movs	r6, #0
 8003712:	f000 f819 	bl	8003748 <_init>
 8003716:	4c0a      	ldr	r4, [pc, #40]	@ (8003740 <__libc_init_array+0x40>)
 8003718:	4d0a      	ldr	r5, [pc, #40]	@ (8003744 <__libc_init_array+0x44>)
 800371a:	1b64      	subs	r4, r4, r5
 800371c:	10a4      	asrs	r4, r4, #2
 800371e:	42a6      	cmp	r6, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	00b3      	lsls	r3, r6, #2
 8003726:	58eb      	ldr	r3, [r5, r3]
 8003728:	4798      	blx	r3
 800372a:	3601      	adds	r6, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	00b3      	lsls	r3, r6, #2
 8003730:	58eb      	ldr	r3, [r5, r3]
 8003732:	4798      	blx	r3
 8003734:	3601      	adds	r6, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	080039bc 	.word	0x080039bc
 800373c:	080039bc 	.word	0x080039bc
 8003740:	080039c0 	.word	0x080039c0
 8003744:	080039bc 	.word	0x080039bc

08003748 <_init>:
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374e:	bc08      	pop	{r3}
 8003750:	469e      	mov	lr, r3
 8003752:	4770      	bx	lr

08003754 <_fini>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr
